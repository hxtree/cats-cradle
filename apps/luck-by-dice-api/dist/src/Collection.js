"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Collection = void 0;
const Dice_1 = require("./Dice");
const NotationCodec_1 = require("./NotationCodec");
/**
 * A Collection holds same sided Dice and can be configured to modify or multiply the Dice outcome.
 */
class Collection {
    // Sides should be a Dice object
    constructor(amount, sides, modifier = 0, multiplier = 1) {
        this._dice = [];
        if (amount === undefined) {
            throw new RangeError('A collection must have at least one dice.');
        }
        for (let i = 1; i <= amount; i++) {
            this._dice.push(new Dice_1.Dice(sides));
        }
        this._sides = sides;
        this._modifier = modifier;
        this._multiplier = multiplier;
        this._excess = 0;
    }
    allocateBonuses(amount) {
        this._dice.forEach((dice) => {
            amount = dice.allocateBonuses(amount);
        });
        return amount;
    }
    set modifier(value) {
        this._modifier = value;
    }
    get modifier() {
        return this._modifier;
    }
    set multiplier(value) {
        this._multiplier = value;
    }
    get multiplier() {
        return this._multiplier;
    }
    get sides() {
        return this._sides;
    }
    get dice() {
        return this._dice;
    }
    set dice(value) {
        this._dice = value;
    }
    get value() {
        let value = 0;
        for (const dice of this._dice) {
            if (dice.value === undefined) {
                continue;
            }
            value += dice.value;
        }
        return (value + this._modifier) * this._multiplier;
    }
    get bonus() {
        let bonus = 0;
        for (const dice of this._dice) {
            if (dice.bonus === undefined) {
                continue;
            }
            bonus += dice.bonus;
        }
        return bonus;
    }
    set bonus(value) {
        this._dice = this._shuffle(this._dice);
        // do while seems to make more sense here
        this._dice.forEach(function (part, index, dice) {
            if (value === 0) {
                dice[index].bonus = 0;
            }
            if (dice[index].value === undefined) {
                throw new RangeError('A bonus cannot only be applied to a rolled dice.');
            }
            const bonus = dice[index].max - dice[index].value;
            dice[index].bonus = bonus;
            if (value > bonus) {
                value -= bonus;
            }
            else {
                value = 0;
            }
        });
        this._excess = value;
    }
    get totalNatural() {
        let total = 0;
        this._dice.forEach(function (part, index, dice) {
            total += dice[index].total;
        });
        return total;
    }
    get total() {
        return (this.totalNatural + this.modifier) * this.multiplier;
    }
    get excess() {
        return this._excess;
    }
    get notation() {
        const notationCodec = new NotationCodec_1.NotationCodec();
        return notationCodec.encodeCollection(this);
    }
    get minOutcome() {
        return this.count();
    }
    get maxOutcome() {
        return this.count() * this._sides;
    }
    get minPotential() {
        return (this.minOutcome + this.modifier) * this.multiplier;
    }
    get maxPotential() {
        return (this.maxOutcome + this.modifier) * this.multiplier;
    }
    get outcomePercent() {
        return (this.value - this.count()) / (this.maxOutcome - this.count());
    }
    count() {
        return this._dice.length;
    }
    roll() {
        this._dice.forEach(function (part, index, dice) {
            dice[index].roll();
        });
        return this.total;
    }
    _shuffle(array) {
        let currentIndex = array.length, randomIndex;
        while (currentIndex !== 0) {
            randomIndex = Math.floor(Math.random() * currentIndex);
            currentIndex--;
            [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];
        }
        return array;
    }
}
exports.Collection = Collection;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Db2xsZWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGlDQUE4QjtBQUM5QixtREFBZ0Q7QUEyQmhEOztHQUVHO0FBQ0gsTUFBYSxVQUFVO0lBWW5CLGdDQUFnQztJQUNoQyxZQUFtQixNQUFjLEVBQUUsS0FBYSxFQUFFLFdBQW1CLENBQUMsRUFBRSxhQUFxQixDQUFDO1FBWnRGLFVBQUssR0FBZ0IsRUFBRSxDQUFDO1FBYTVCLElBQUksTUFBTSxLQUFLLFNBQVMsRUFBRTtZQUN0QixNQUFNLElBQUksVUFBVSxDQUFDLDJDQUEyQyxDQUFDLENBQUM7U0FDckU7UUFFRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzlCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksV0FBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7U0FDcEM7UUFFRCxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNwQixJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztRQUMxQixJQUFJLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQztRQUM5QixJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQztJQUNyQixDQUFDO0lBRU0sZUFBZSxDQUFDLE1BQWM7UUFDakMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFVLEVBQUUsRUFBRTtZQUM5QixNQUFNLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMxQyxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFFRCxJQUFXLFFBQVEsQ0FBQyxLQUFhO1FBQzdCLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO0lBQzNCLENBQUM7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LElBQUksRUFBRSxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3RCLENBQUM7SUFFTyxRQUFRLENBQUMsS0FBa0I7UUFDL0IsSUFBSSxZQUFZLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFDM0IsV0FBVyxDQUFDO1FBQ2hCLE9BQU8sWUFBWSxLQUFLLENBQUMsRUFBRTtZQUN2QixXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsWUFBWSxDQUFDLENBQUM7WUFDdkQsWUFBWSxFQUFFLENBQUM7WUFDZixDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsRUFBRSxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsRUFBRSxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztTQUN6RjtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7Q0FDSjtBQXRMRCxnQ0FzTEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaWNlIH0gZnJvbSAnLi9EaWNlJztcbmltcG9ydCB7IE5vdGF0aW9uQ29kZWMgfSBmcm9tICcuL05vdGF0aW9uQ29kZWMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElDb2xsZWN0aW9uIHtcbiAgICBzZXQgbW9kaWZpZXIodmFsdWU6IG51bWJlcik7XG4gICAgZ2V0IG1vZGlmaWVyKCk6IG51bWJlcjtcbiAgICBzZXQgbXVsdGlwbGllcih2YWx1ZTogbnVtYmVyKTtcbiAgICBnZXQgbXVsdGlwbGllcigpOiBudW1iZXI7XG4gICAgZ2V0IHNpZGVzKCk6IG51bWJlcjtcbiAgICBnZXQgZGljZSgpOiBBcnJheTxEaWNlPjtcbiAgICBzZXQgZGljZSh2YWx1ZTogQXJyYXk8RGljZT4pO1xuICAgIGdldCB2YWx1ZSgpOiBudW1iZXIgfCB1bmRlZmluZWQ7XG4gICAgZ2V0IGJvbnVzKCk6IG51bWJlcjtcbiAgICBzZXQgYm9udXModmFsdWU6IG51bWJlcik7XG4gICAgZ2V0IHRvdGFsTmF0dXJhbCgpOiBudW1iZXI7XG4gICAgZ2V0IHRvdGFsKCk6IG51bWJlcjtcbiAgICBnZXQgZXhjZXNzKCk6IG51bWJlcjtcbiAgICBnZXQgbm90YXRpb24oKTogc3RyaW5nO1xuICAgIGdldCBtaW5PdXRjb21lKCk6IG51bWJlcjtcbiAgICBnZXQgbWF4T3V0Y29tZSgpOiBudW1iZXI7XG4gICAgZ2V0IG1pblBvdGVudGlhbCgpOiBudW1iZXI7XG4gICAgZ2V0IG1heFBvdGVudGlhbCgpOiBudW1iZXI7XG4gICAgZ2V0IG91dGNvbWVQZXJjZW50KCk6IG51bWJlcjtcbiAgICBjb3VudCgpOiBudW1iZXI7XG4gICAgcm9sbCgpOiBudW1iZXI7XG4gICAgYWxsb2NhdGVCb251c2VzKGFtb3VudDogbnVtYmVyKTogbnVtYmVyO1xufVxuXG4vKipcbiAqIEEgQ29sbGVjdGlvbiBob2xkcyBzYW1lIHNpZGVkIERpY2UgYW5kIGNhbiBiZSBjb25maWd1cmVkIHRvIG1vZGlmeSBvciBtdWx0aXBseSB0aGUgRGljZSBvdXRjb21lLlxuICovXG5leHBvcnQgY2xhc3MgQ29sbGVjdGlvbiBpbXBsZW1lbnRzIElDb2xsZWN0aW9uIHtcbiAgICBwcml2YXRlIF9kaWNlOiBBcnJheTxEaWNlPiA9IFtdO1xuXG4gICAgcHJpdmF0ZSBfc2lkZXM6IG51bWJlcjtcblxuICAgIHByaXZhdGUgX21vZGlmaWVyOiBudW1iZXI7XG5cbiAgICBwcml2YXRlIF9tdWx0aXBsaWVyOiBudW1iZXI7XG5cbiAgICAvKiogZXhjZXNzIGJvbnVzIGFtb3VudCB0aGF0IGNvdWxkIG5vdCBiZSBhYnNvcmJlZCBieSBkaWNlICovXG4gICAgcHJpdmF0ZSBfZXhjZXNzOiBudW1iZXI7XG5cbiAgICAvLyBTaWRlcyBzaG91bGQgYmUgYSBEaWNlIG9iamVjdFxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihhbW91bnQ6IG51bWJlciwgc2lkZXM6IG51bWJlciwgbW9kaWZpZXI6IG51bWJlciA9IDAsIG11bHRpcGxpZXI6IG51bWJlciA9IDEpIHtcbiAgICAgICAgaWYgKGFtb3VudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQSBjb2xsZWN0aW9uIG11c3QgaGF2ZSBhdCBsZWFzdCBvbmUgZGljZS4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IGFtb3VudDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLl9kaWNlLnB1c2gobmV3IERpY2Uoc2lkZXMpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3NpZGVzID0gc2lkZXM7XG4gICAgICAgIHRoaXMuX21vZGlmaWVyID0gbW9kaWZpZXI7XG4gICAgICAgIHRoaXMuX211bHRpcGxpZXIgPSBtdWx0aXBsaWVyO1xuICAgICAgICB0aGlzLl9leGNlc3MgPSAwO1xuICAgIH1cblxuICAgIHB1YmxpYyBhbGxvY2F0ZUJvbnVzZXMoYW1vdW50OiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgICB0aGlzLl9kaWNlLmZvckVhY2goKGRpY2U6IERpY2UpID0+IHtcbiAgICAgICAgICAgIGFtb3VudCA9IGRpY2UuYWxsb2NhdGVCb251c2VzKGFtb3VudCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gYW1vdW50O1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXQgbW9kaWZpZXIodmFsdWU6IG51bWJlcikge1xuICAgICAgICB0aGlzLl9tb2RpZmllciA9IHZhbHVlO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgbW9kaWZpZXIoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21vZGlmaWVyO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXQgbXVsdGlwbGllcih2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuX211bHRpcGxpZXIgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IG11bHRpcGxpZXIoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX211bHRpcGxpZXI7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBzaWRlcygpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2lkZXM7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBkaWNlKCk6IEFycmF5PERpY2U+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RpY2U7XG4gICAgfVxuXG4gICAgcHVibGljIHNldCBkaWNlKHZhbHVlOiBBcnJheTxEaWNlPikge1xuICAgICAgICB0aGlzLl9kaWNlID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCB2YWx1ZSgpOiBudW1iZXIgfCB1bmRlZmluZWQge1xuICAgICAgICBsZXQgdmFsdWUgPSAwO1xuXG4gICAgICAgIGZvciAoY29uc3QgZGljZSBvZiB0aGlzLl9kaWNlKSB7XG4gICAgICAgICAgICBpZiAoZGljZS52YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YWx1ZSArPSBkaWNlLnZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICh2YWx1ZSArIHRoaXMuX21vZGlmaWVyKSAqIHRoaXMuX211bHRpcGxpZXI7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBib251cygpOiBudW1iZXIge1xuICAgICAgICBsZXQgYm9udXMgPSAwO1xuXG4gICAgICAgIGZvciAoY29uc3QgZGljZSBvZiB0aGlzLl9kaWNlKSB7XG4gICAgICAgICAgICBpZiAoZGljZS5ib251cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBib251cyArPSBkaWNlLmJvbnVzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGJvbnVzO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXQgYm9udXModmFsdWU6IG51bWJlcikge1xuICAgICAgICB0aGlzLl9kaWNlID0gdGhpcy5fc2h1ZmZsZSh0aGlzLl9kaWNlKTtcblxuICAgICAgICAvLyBkbyB3aGlsZSBzZWVtcyB0byBtYWtlIG1vcmUgc2Vuc2UgaGVyZVxuICAgICAgICB0aGlzLl9kaWNlLmZvckVhY2goZnVuY3Rpb24gKHBhcnQ6IERpY2UsIGluZGV4OiBudW1iZXIsIGRpY2U6IEFycmF5PERpY2U+KSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IDApIHtcbiAgICAgICAgICAgICAgICBkaWNlW2luZGV4XS5ib251cyA9IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkaWNlW2luZGV4XS52YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0EgYm9udXMgY2Fubm90IG9ubHkgYmUgYXBwbGllZCB0byBhIHJvbGxlZCBkaWNlLicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBib251cyA9IGRpY2VbaW5kZXhdLm1heCAtIGRpY2VbaW5kZXhdLnZhbHVlITtcblxuICAgICAgICAgICAgZGljZVtpbmRleF0uYm9udXMgPSBib251cztcblxuICAgICAgICAgICAgaWYgKHZhbHVlID4gYm9udXMpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSAtPSBib251cztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLl9leGNlc3MgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHRvdGFsTmF0dXJhbCgpOiBudW1iZXIge1xuICAgICAgICBsZXQgdG90YWwgPSAwO1xuXG4gICAgICAgIHRoaXMuX2RpY2UuZm9yRWFjaChmdW5jdGlvbiAocGFydDogRGljZSwgaW5kZXg6IG51bWJlciwgZGljZTogQXJyYXk8RGljZT4pIHtcbiAgICAgICAgICAgIHRvdGFsICs9IGRpY2VbaW5kZXhdLnRvdGFsO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdG90YWw7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCB0b3RhbCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gKHRoaXMudG90YWxOYXR1cmFsICsgdGhpcy5tb2RpZmllcikgKiB0aGlzLm11bHRpcGxpZXI7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBleGNlc3MoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4Y2VzcztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IG5vdGF0aW9uKCk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IG5vdGF0aW9uQ29kZWMgPSBuZXcgTm90YXRpb25Db2RlYygpO1xuICAgICAgICByZXR1cm4gbm90YXRpb25Db2RlYy5lbmNvZGVDb2xsZWN0aW9uKHRoaXMpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgbWluT3V0Y29tZSgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5jb3VudCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgbWF4T3V0Y29tZSgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5jb3VudCgpICogdGhpcy5fc2lkZXM7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBtaW5Qb3RlbnRpYWwoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLm1pbk91dGNvbWUgKyB0aGlzLm1vZGlmaWVyKSAqIHRoaXMubXVsdGlwbGllcjtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IG1heFBvdGVudGlhbCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gKHRoaXMubWF4T3V0Y29tZSArIHRoaXMubW9kaWZpZXIpICogdGhpcy5tdWx0aXBsaWVyO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgb3V0Y29tZVBlcmNlbnQoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLnZhbHVlISAtIHRoaXMuY291bnQoKSkgLyAodGhpcy5tYXhPdXRjb21lIC0gdGhpcy5jb3VudCgpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY291bnQoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RpY2UubGVuZ3RoO1xuICAgIH1cblxuICAgIHB1YmxpYyByb2xsKCk6IG51bWJlciB7XG4gICAgICAgIHRoaXMuX2RpY2UuZm9yRWFjaChmdW5jdGlvbiAocGFydDogRGljZSwgaW5kZXg6IG51bWJlciwgZGljZTogQXJyYXk8RGljZT4pIHtcbiAgICAgICAgICAgIGRpY2VbaW5kZXhdLnJvbGwoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMudG90YWw7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfc2h1ZmZsZShhcnJheTogQXJyYXk8RGljZT4pIHtcbiAgICAgICAgbGV0IGN1cnJlbnRJbmRleCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICAgIHJhbmRvbUluZGV4O1xuICAgICAgICB3aGlsZSAoY3VycmVudEluZGV4ICE9PSAwKSB7XG4gICAgICAgICAgICByYW5kb21JbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGN1cnJlbnRJbmRleCk7XG4gICAgICAgICAgICBjdXJyZW50SW5kZXgtLTtcbiAgICAgICAgICAgIFthcnJheVtjdXJyZW50SW5kZXhdLCBhcnJheVtyYW5kb21JbmRleF1dID0gW2FycmF5W3JhbmRvbUluZGV4XSwgYXJyYXlbY3VycmVudEluZGV4XV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxufVxuIl19