"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const Turn_1 = require("./Turn");
const handler = async (event, context) => {
    console.log("request:", JSON.stringify(event, undefined, 2));
    console.log("context:", JSON.stringify(context, undefined, 2));
    if (event.queryStringParameters === null) {
        return {
            statusCode: 200,
            headers: {
                'Content-Type': 'application/json',
                "Access-Control-Allow-Origin": '*',
                "Access-Control-Allow-Credentials": "true"
            },
            body: JSON.stringify({
                message: 'notation and luck required'
            })
        };
    }
    const notation = event.queryStringParameters?.notation ?? 'd6';
    const luck = Number(event.queryStringParameters?.luck) ?? 0;
    const turn = new Turn_1.Turn(notation, luck);
    return {
        statusCode: 200,
        headers: {
            'Content-Type': 'application/json',
            "Access-Control-Allow-Origin": '*',
            "Access-Control-Allow-Credentials": "true"
        },
        body: JSON.stringify({
            message: 'Success',
            data: {
                total: turn.roll(),
                luck: turn.luck.value,
                min: turn.minPotential(),
                max: turn.maxPotential(),
                bonus: turn.extraBonus
            }
        })
    };
};
exports.handler = handler;
exports.default = exports.handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9IYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQU1FLGlDQUE0QjtBQUlyQixNQUFNLE9BQU8sR0FBaUIsS0FBSyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsRUFBRTtJQUM1RCxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM3RCxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvRCxJQUFHLEtBQUssQ0FBQyxxQkFBcUIsS0FBSyxJQUFJLEVBQUM7UUFDbEMsT0FBTztZQUNILFVBQVUsRUFBRSxHQUFHO1lBQ2YsT0FBTyxFQUFFO2dCQUNMLGNBQWMsRUFBRSxrQkFBa0I7Z0JBQ2hDLDZCQUE2QixFQUFFLEdBQUc7Z0JBQ2xDLGtDQUFrQyxFQUFFLE1BQU07YUFDN0M7WUFDSCxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQztnQkFDakIsT0FBTyxFQUFFLDRCQUE0QjthQUN4QyxDQUFDO1NBQ0wsQ0FBQztLQUNMO0lBRUQsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLHFCQUFxQixFQUFFLFFBQVEsSUFBSSxJQUFJLENBQUM7SUFDL0QsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUQsTUFBTSxJQUFJLEdBQUcsSUFBSSxXQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBRXRDLE9BQU87UUFDSCxVQUFVLEVBQUUsR0FBRztRQUNmLE9BQU8sRUFBRTtZQUNELGNBQWMsRUFBRSxrQkFBa0I7WUFDaEMsNkJBQTZCLEVBQUUsR0FBRztZQUNsQyxrQ0FBa0MsRUFBRSxNQUFNO1NBQ25EO1FBQ0QsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDakIsT0FBTyxFQUFFLFNBQVM7WUFDbEIsSUFBSSxFQUFFO2dCQUNGLEtBQUssRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUNsQixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLO2dCQUNyQixHQUFHLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRTtnQkFDeEIsR0FBRyxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUU7Z0JBQ3hCLEtBQUssRUFBRSxJQUFJLENBQUMsVUFBVTthQUN6QjtTQUNKLENBQUM7S0FDTCxDQUFDO0FBQ04sQ0FBQyxDQUFDO0FBdkNXLFFBQUEsT0FBTyxXQXVDbEI7QUFFRixrQkFBZSxlQUFPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIEFQSUdhdGV3YXlQcm94eUV2ZW50VjIsXG4gICAgQVBJR2F0ZXdheVByb3h5UmVzdWx0VjIsXG4gICAgSGFuZGxlcixcbiAgfSBmcm9tICdhd3MtbGFtYmRhJztcbiAgXG4gIGltcG9ydCB7VHVybn0gZnJvbSAnLi9UdXJuJztcbiAgXG4gIGV4cG9ydCB0eXBlIFByb3h5SGFuZGxlciA9IEhhbmRsZXI8QVBJR2F0ZXdheVByb3h5RXZlbnRWMiwgQVBJR2F0ZXdheVByb3h5UmVzdWx0VjI+XG4gIFxuICBleHBvcnQgY29uc3QgaGFuZGxlcjogUHJveHlIYW5kbGVyID0gYXN5bmMgKGV2ZW50LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc29sZS5sb2coXCJyZXF1ZXN0OlwiLCBKU09OLnN0cmluZ2lmeShldmVudCwgdW5kZWZpbmVkLCAyKSk7XG4gICAgY29uc29sZS5sb2coXCJjb250ZXh0OlwiLCBKU09OLnN0cmluZ2lmeShjb250ZXh0LCB1bmRlZmluZWQsIDIpKTtcbiAgICBpZihldmVudC5xdWVyeVN0cmluZ1BhcmFtZXRlcnMgPT09IG51bGwpe1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIHN0YXR1c0NvZGU6IDIwMCxcbiAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAgICAgXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW5cIjogJyonLFxuICAgICAgICAgICAgICAgICAgICBcIkFjY2Vzcy1Db250cm9sLUFsbG93LUNyZWRlbnRpYWxzXCI6IFwidHJ1ZVwiICBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnbm90YXRpb24gYW5kIGx1Y2sgcmVxdWlyZWQnXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgfTtcbiAgICAgIH1cbiAgXG4gICAgICBjb25zdCBub3RhdGlvbiA9IGV2ZW50LnF1ZXJ5U3RyaW5nUGFyYW1ldGVycz8ubm90YXRpb24gPz8gJ2Q2JztcbiAgICAgIGNvbnN0IGx1Y2sgPSBOdW1iZXIoZXZlbnQucXVlcnlTdHJpbmdQYXJhbWV0ZXJzPy5sdWNrKSA/PyAwO1xuICAgICAgY29uc3QgdHVybiA9IG5ldyBUdXJuKG5vdGF0aW9uLCBsdWNrKTtcbiAgICAgIFxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzdGF0dXNDb2RlOiAyMDAsXG4gICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAgICAgXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW5cIjogJyonLFxuICAgICAgICAgICAgICAgICAgICBcIkFjY2Vzcy1Db250cm9sLUFsbG93LUNyZWRlbnRpYWxzXCI6IFwidHJ1ZVwiICBcbiAgICAgICAgICB9LFxuICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgbWVzc2FnZTogJ1N1Y2Nlc3MnLFxuICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICB0b3RhbDogdHVybi5yb2xsKCksXG4gICAgICAgICAgICAgICAgICBsdWNrOiB0dXJuLmx1Y2sudmFsdWUsXG4gICAgICAgICAgICAgICAgICBtaW46IHR1cm4ubWluUG90ZW50aWFsKCksXG4gICAgICAgICAgICAgICAgICBtYXg6IHR1cm4ubWF4UG90ZW50aWFsKCksXG4gICAgICAgICAgICAgICAgICBib251czogdHVybi5leHRyYUJvbnVzXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgfTtcbiAgfTtcblxuICBleHBvcnQgZGVmYXVsdCBoYW5kbGVyOyJdfQ==