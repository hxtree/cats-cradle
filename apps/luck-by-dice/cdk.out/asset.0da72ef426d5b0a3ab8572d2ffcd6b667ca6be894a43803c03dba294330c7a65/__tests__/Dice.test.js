"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Dice_1 = require("../components/Dice");
describe('Dice', () => {
    const testFaces = [
        [2, 2],
        [4, 4],
        [6, 6],
        [8, 8],
        [10, 10],
        [50, 50],
        [100, 100]
    ];
    test.each(testFaces)('Numerical faces set by constructor %s', (input, output) => {
        const dice = new Dice_1.Dice(input);
        expect(dice.faces).toBe(output);
    });
    test.each(testFaces)('Roll within expected range for %s', (input, output) => {
        const dice = new Dice_1.Dice(input);
        const outcome = dice.roll();
        expect(outcome).toBeGreaterThanOrEqual(1);
        expect(outcome).toBeLessThanOrEqual(output);
    });
    test('Total computes correct from value and bonus', () => {
        const dice = new Dice_1.Dice(2);
        dice.value = 2;
        dice.bonus = 2;
        expect(dice.total).toEqual(dice.value + dice.bonus);
    });
    test('Total should not be 100% every time', () => {
        // 1 out of a million chance of failing
        const dice = new Dice_1.Dice(1000000);
        expect(dice.roll()).toBeLessThan(1000000);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGljZS50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL19fdGVzdHNfXy9EaWNlLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2Q0FBMEM7QUFFMUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUU7SUFDbEIsTUFBTSxTQUFTLEdBQUc7UUFDZCxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDTixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDTixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDTixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDTixDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7UUFDUixDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7UUFDUixDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUM7S0FDYixDQUFDO0lBRUYsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyx1Q0FBdUMsRUFBRSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsRUFBRTtRQUM1RSxNQUFNLElBQUksR0FBRyxJQUFJLFdBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM3QixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNwQyxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsbUNBQW1DLEVBQUUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLEVBQUU7UUFDeEUsTUFBTSxJQUFJLEdBQUcsSUFBSSxXQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0IsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBRTVCLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDaEQsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsNkNBQTZDLEVBQUUsR0FBRyxFQUFFO1FBQ3JELE1BQU0sSUFBSSxHQUFHLElBQUksV0FBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXpCLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ2YsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7UUFFZixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN4RCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxxQ0FBcUMsRUFBRSxHQUFHLEVBQUU7UUFDN0MsdUNBQXVDO1FBQ3ZDLE1BQU0sSUFBSSxHQUFHLElBQUksV0FBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDOUMsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpY2UgfSBmcm9tICcuLi9jb21wb25lbnRzL0RpY2UnO1xuXG5kZXNjcmliZSgnRGljZScsICgpID0+IHtcbiAgICBjb25zdCB0ZXN0RmFjZXMgPSBbXG4gICAgICAgIFsyLCAyXSxcbiAgICAgICAgWzQsIDRdLFxuICAgICAgICBbNiwgNl0sXG4gICAgICAgIFs4LCA4XSxcbiAgICAgICAgWzEwLCAxMF0sXG4gICAgICAgIFs1MCwgNTBdLFxuICAgICAgICBbMTAwLCAxMDBdXG4gICAgXTtcblxuICAgIHRlc3QuZWFjaCh0ZXN0RmFjZXMpKCdOdW1lcmljYWwgZmFjZXMgc2V0IGJ5IGNvbnN0cnVjdG9yICVzJywgKGlucHV0LCBvdXRwdXQpID0+IHtcbiAgICAgICAgY29uc3QgZGljZSA9IG5ldyBEaWNlKGlucHV0KTtcbiAgICAgICAgZXhwZWN0KGRpY2UuZmFjZXMpLnRvQmUob3V0cHV0KTtcbiAgICB9KTtcblxuICAgIHRlc3QuZWFjaCh0ZXN0RmFjZXMpKCdSb2xsIHdpdGhpbiBleHBlY3RlZCByYW5nZSBmb3IgJXMnLCAoaW5wdXQsIG91dHB1dCkgPT4ge1xuICAgICAgICBjb25zdCBkaWNlID0gbmV3IERpY2UoaW5wdXQpO1xuICAgICAgICBjb25zdCBvdXRjb21lID0gZGljZS5yb2xsKCk7XG5cbiAgICAgICAgZXhwZWN0KG91dGNvbWUpLnRvQmVHcmVhdGVyVGhhbk9yRXF1YWwoMSk7XG4gICAgICAgIGV4cGVjdChvdXRjb21lKS50b0JlTGVzc1RoYW5PckVxdWFsKG91dHB1dCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdUb3RhbCBjb21wdXRlcyBjb3JyZWN0IGZyb20gdmFsdWUgYW5kIGJvbnVzJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBkaWNlID0gbmV3IERpY2UoMik7XG5cbiAgICAgICAgZGljZS52YWx1ZSA9IDI7XG4gICAgICAgIGRpY2UuYm9udXMgPSAyO1xuXG4gICAgICAgIGV4cGVjdChkaWNlLnRvdGFsKS50b0VxdWFsKGRpY2UudmFsdWUgKyBkaWNlLmJvbnVzKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ1RvdGFsIHNob3VsZCBub3QgYmUgMTAwJSBldmVyeSB0aW1lJywgKCkgPT4ge1xuICAgICAgICAvLyAxIG91dCBvZiBhIG1pbGxpb24gY2hhbmNlIG9mIGZhaWxpbmdcbiAgICAgICAgY29uc3QgZGljZSA9IG5ldyBEaWNlKDEwMDAwMDApO1xuICAgICAgICBleHBlY3QoZGljZS5yb2xsKCkpLnRvQmVMZXNzVGhhbigxMDAwMDAwKTtcbiAgICB9KTtcbn0pO1xuIl19