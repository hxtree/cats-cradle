"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Collection_1 = require("../components/Collection");
const Cup_1 = require("../components/Cup");
const Dice_1 = require("../components/Dice");
const NotationCodec_1 = require("../components/NotationCodec");
describe('NotationCodec', () => {
    // decode - notation to object
    test('.decodeDice()', () => {
        const notationCodec = new NotationCodec_1.NotationCodec();
        const diceFromNotation = notationCodec.decodeDice('d6');
        const diceObject = new Dice_1.Dice(6);
        expect(diceObject).toEqual(diceFromNotation);
    });
    test.each([
        { input: '1d6', output: new Collection_1.Collection(1, 6) },
        { input: '1d8', output: new Collection_1.Collection(1, 8) },
        { input: '2d10', output: new Collection_1.Collection(2, 10) },
        { input: 'd%', output: new Collection_1.Collection(1, 100) },
        { input: 'd%+2', output: new Collection_1.Collection(1, 100, 2) },
        { input: 'd%+3*7', output: new Collection_1.Collection(1, 100, 3, 7) },
        { input: '200d2+1', output: new Collection_1.Collection(200, 2, 1) },
        { input: 'd20+100', output: new Collection_1.Collection(1, 20, 100) },
        { input: 'd50-7', output: new Collection_1.Collection(1, 50, -7) },
        { input: '2d50-7', output: new Collection_1.Collection(2, 50, -7) },
        { input: 'd5*10', output: new Collection_1.Collection(1, 5, 0, 10) },
        { input: 'd5+20*1000', output: new Collection_1.Collection(1, 5, 20, 1000) },
        { input: '1000d1000+1000*1000', output: new Collection_1.Collection(1000, 1000, 1000, 1000) }
    ])('.decodeCollection($a)', ({ input, output }) => {
        const notationCodec = new NotationCodec_1.NotationCodec();
        expect(notationCodec.decodeCollection(input)).toEqual(output);
    });
    test('.decodeCup()', () => {
        const notationCodec = new NotationCodec_1.NotationCodec();
        const cup = new Cup_1.Cup();
        cup.push(new Collection_1.Collection(1, 6));
        cup.push(new Collection_1.Collection(1, 8));
        cup.push(new Collection_1.Collection(2, 10));
        cup.push(new Collection_1.Collection(1, 100));
        cup.push(new Collection_1.Collection(1, 100, 2));
        const output = notationCodec.decodeCup('d6,1d8,2d10,d%,d%+2');
        expect(output).toEqual(cup);
    });
    // encode -- object to notation
    test('.encodeDice()', () => {
        const notationCodec = new NotationCodec_1.NotationCodec();
        const dice = new Dice_1.Dice(6);
        const notation = notationCodec.encodeDice(dice);
        expect(notation).toBe('d6');
    });
    test('.encodeCollection()', () => {
        const notationCodec = new NotationCodec_1.NotationCodec();
        const collection = new Collection_1.Collection(2, 3, 4, 5);
        const notation = notationCodec.encodeCollection(collection);
        expect(notation).toBe('2d3+4*5');
    });
    test('.encodeCup()', () => {
        const notationCodec = new NotationCodec_1.NotationCodec();
        const cup = new Cup_1.Cup();
        cup.push(new Collection_1.Collection(1, 6));
        cup.push(new Collection_1.Collection(1, 8));
        cup.push(new Collection_1.Collection(2, 10));
        cup.push(new Collection_1.Collection(1, 100));
        cup.push(new Collection_1.Collection(1, 100, 2));
        const notation = notationCodec.encodeCup(cup);
        expect(notation).toBe('d6,d8,2d10,d%,d%+2');
    });
});
//# sourceMappingURL=data:application/json;base64,