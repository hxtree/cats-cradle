"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Luck_1 = require("../components/Luck");
const FickleLuckAdjustment_1 = require("../components/LuckAdjustment/FickleLuckAdjustment");
describe('Luck', () => {
    test.each([[Luck_1.Active.enable], [Luck_1.Active.disable]])('status()', (status) => {
        const luck = new Luck_1.Luck(0);
        luck.status = status;
        expect(luck.status).toEqual(status);
    });
    test('value()', () => {
        const luck = new Luck_1.Luck(0);
        luck.value = 6;
        expect(luck.value).toBe(6);
    });
    test('algorithm()', () => {
        const luck = new Luck_1.Luck(0);
        luck.algorithm = new FickleLuckAdjustment_1.FickleLuckAdjustment();
        expect(luck.algorithm).toBeInstanceOf(FickleLuckAdjustment_1.FickleLuckAdjustment);
    });
    test('applicablePercent() greater than 0', () => {
        const luck = new Luck_1.Luck(100);
        expect(luck.applicablePercent).toBeGreaterThanOrEqual(0);
    });
    test('applicablePercent() less than 10', () => {
        const luck = new Luck_1.Luck(100);
        expect(luck.applicablePercent).toBeLessThanOrEqual(10);
    });
    test('modify() greater than', () => {
        const luck = new Luck_1.Luck(100);
        const roll = 1;
        const newRoll = luck.modify(roll);
        expect(newRoll).toBeGreaterThanOrEqual(roll);
    });
    test('modify() less than', () => {
        const luck = new Luck_1.Luck(1);
        const roll = 10;
        const newRoll = luck.modify(roll);
        expect(newRoll).toBeLessThanOrEqual(roll);
    });
    test('modify() a lot', () => {
        const luck = new Luck_1.Luck(100000000000);
        const roll = 10;
        const newRoll = luck.modify(roll);
        expect(newRoll).toBeGreaterThan(roll);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTHVjay50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL19fdGVzdHNfXy9MdWNrLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2Q0FHNEI7QUFDNUIsNEZBRTJEO0FBRTNELFFBQVEsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFO0lBRWxCLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGFBQU0sQ0FBQyxNQUFNLENBQUMsRUFBQyxDQUFDLGFBQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUU7UUFDakUsTUFBTSxJQUFJLEdBQUcsSUFBSSxXQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDdkMsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRTtRQUNqQixNQUFNLElBQUksR0FBRyxJQUFJLFdBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QixJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztRQUNmLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQzlCLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLGFBQWEsRUFBRSxHQUFHLEVBQUU7UUFDckIsTUFBTSxJQUFJLEdBQUcsSUFBSSxXQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLDJDQUFvQixFQUFFLENBQUM7UUFDNUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxjQUFjLENBQUMsMkNBQW9CLENBQUMsQ0FBQTtJQUMvRCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxvQ0FBb0MsRUFBRSxHQUFHLEVBQUU7UUFDNUMsTUFBTSxJQUFJLEdBQUcsSUFBSSxXQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDM0IsTUFBTSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdELENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLGtDQUFrQyxFQUFFLEdBQUcsRUFBRTtRQUMxQyxNQUFNLElBQUksR0FBRyxJQUFJLFdBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMzQixNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsbUJBQW1CLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDM0QsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsdUJBQXVCLEVBQUUsR0FBRyxFQUFFO1FBQy9CLE1BQU0sSUFBSSxHQUFHLElBQUksV0FBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzNCLE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBQztRQUNmLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pELENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLG9CQUFvQixFQUFFLEdBQUcsRUFBRTtRQUM1QixNQUFNLElBQUksR0FBRyxJQUFJLFdBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUM7UUFDaEIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNsQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUMsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFO1FBQ3hCLE1BQU0sSUFBSSxHQUFHLElBQUksV0FBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUNoQixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUMsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFjdGl2ZSxcbiAgTHVjayxcbn0gZnJvbSAnLi4vY29tcG9uZW50cy9MdWNrJztcbmltcG9ydCB7XG4gIEZpY2tsZUx1Y2tBZGp1c3RtZW50LFxufSBmcm9tICcuLi9jb21wb25lbnRzL0x1Y2tBZGp1c3RtZW50L0ZpY2tsZUx1Y2tBZGp1c3RtZW50JztcblxuZGVzY3JpYmUoJ0x1Y2snLCAoKSA9PiB7XG5cbiAgICB0ZXN0LmVhY2goW1tBY3RpdmUuZW5hYmxlXSxbQWN0aXZlLmRpc2FibGVdXSkoJ3N0YXR1cygpJywgKHN0YXR1cykgPT4ge1xuICAgICAgICBjb25zdCBsdWNrID0gbmV3IEx1Y2soMCk7XG4gICAgICAgIGx1Y2suc3RhdHVzID0gc3RhdHVzO1xuICAgICAgICBleHBlY3QobHVjay5zdGF0dXMpLnRvRXF1YWwoc3RhdHVzKVxuICAgIH0pO1xuXG4gICAgdGVzdCgndmFsdWUoKScsICgpID0+IHtcbiAgICAgICAgY29uc3QgbHVjayA9IG5ldyBMdWNrKDApO1xuICAgICAgICBsdWNrLnZhbHVlID0gNjtcbiAgICAgICAgZXhwZWN0KGx1Y2sudmFsdWUpLnRvQmUoNilcbiAgICB9KTtcblxuICAgIHRlc3QoJ2FsZ29yaXRobSgpJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBsdWNrID0gbmV3IEx1Y2soMCk7XG4gICAgICAgIGx1Y2suYWxnb3JpdGhtID0gbmV3IEZpY2tsZUx1Y2tBZGp1c3RtZW50KCk7XG4gICAgICAgIGV4cGVjdChsdWNrLmFsZ29yaXRobSkudG9CZUluc3RhbmNlT2YoRmlja2xlTHVja0FkanVzdG1lbnQpXG4gICAgfSk7XG5cbiAgICB0ZXN0KCdhcHBsaWNhYmxlUGVyY2VudCgpIGdyZWF0ZXIgdGhhbiAwJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBsdWNrID0gbmV3IEx1Y2soMTAwKTsgICAgICAgIFxuICAgICAgICBleHBlY3QobHVjay5hcHBsaWNhYmxlUGVyY2VudCkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCgwKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ2FwcGxpY2FibGVQZXJjZW50KCkgbGVzcyB0aGFuIDEwJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBsdWNrID0gbmV3IEx1Y2soMTAwKTsgICAgICAgIFxuICAgICAgICBleHBlY3QobHVjay5hcHBsaWNhYmxlUGVyY2VudCkudG9CZUxlc3NUaGFuT3JFcXVhbCgxMCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdtb2RpZnkoKSBncmVhdGVyIHRoYW4nLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGx1Y2sgPSBuZXcgTHVjaygxMDApO1xuICAgICAgICBjb25zdCByb2xsID0gMTtcbiAgICAgICAgY29uc3QgbmV3Um9sbCA9IGx1Y2subW9kaWZ5KHJvbGwpOyAgICBcbiAgICAgICAgZXhwZWN0KG5ld1JvbGwpLnRvQmVHcmVhdGVyVGhhbk9yRXF1YWwocm9sbCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdtb2RpZnkoKSBsZXNzIHRoYW4nLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGx1Y2sgPSBuZXcgTHVjaygxKTtcbiAgICAgICAgY29uc3Qgcm9sbCA9IDEwO1xuICAgICAgICBjb25zdCBuZXdSb2xsID0gbHVjay5tb2RpZnkocm9sbCk7ICAgIFxuICAgICAgICBleHBlY3QobmV3Um9sbCkudG9CZUxlc3NUaGFuT3JFcXVhbChyb2xsKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ21vZGlmeSgpIGEgbG90JywgKCkgPT4ge1xuICAgICAgICBjb25zdCBsdWNrID0gbmV3IEx1Y2soMTAwMDAwMDAwMDAwKTtcbiAgICAgICAgY29uc3Qgcm9sbCA9IDEwO1xuICAgICAgICBjb25zdCBuZXdSb2xsID0gbHVjay5tb2RpZnkocm9sbCk7XG4gICAgICAgIGV4cGVjdChuZXdSb2xsKS50b0JlR3JlYXRlclRoYW4ocm9sbCk7XG4gICAgfSk7XG59KTtcbiJdfQ==