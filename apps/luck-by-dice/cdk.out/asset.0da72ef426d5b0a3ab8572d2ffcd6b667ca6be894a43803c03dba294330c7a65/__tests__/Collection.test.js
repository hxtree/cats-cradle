"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Collection_1 = require("../components/Collection");
describe('Collection', () => {
    test('Notation returns correct values', () => {
        const collection = new Collection_1.Collection(1, 6);
        expect(collection.notation).toBe('d6');
    });
    test('Notation returns correct values with modifier', () => {
        const collection = new Collection_1.Collection(10, 100, 10);
        expect(collection.notation).toBe('10d%+10');
    });
    test('Notation returns correct values with modifier and multipler', () => {
        const collection = new Collection_1.Collection(100, 4, 2, 4);
        expect(collection.notation).toBe('100d4+2*4');
    });
    test('Count returns correct value', () => {
        const collection = new Collection_1.Collection(6, 10);
        expect(collection.count()).toBe(6);
    });
    test('Set bonus is absorbed by dice and sets excess', () => {
        const collection = new Collection_1.Collection(10, 8);
        for (let i = 0; i < collection.dice.length; i++) {
            collection.dice[i].value = 4;
        }
        collection.bonus = 41;
        expect(collection.excess).toBe(1);
    });
    test('Total natural adds up correctly', () => {
        const collection = new Collection_1.Collection(10, 8);
        for (let i = 0; i < collection.dice.length; i++) {
            collection.dice[i].value = 4;
        }
        expect(collection.total).toBe(40);
    });
    test('Total adds up correctly', () => {
        const collection = new Collection_1.Collection(10, 8, 2, 10);
        for (let i = 0; i < collection.dice.length; i++) {
            collection.dice[i].value = 4;
        }
        expect(collection.total).toBe(420);
    });
    test('Total should not be 100% every time', () => {
        // 1 out of a million chance of failing
        const collection = new Collection_1.Collection(1000000, 6);
        expect(collection.roll()).toBeLessThan(6000000);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29sbGVjdGlvbi50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL19fdGVzdHNfXy9Db2xsZWN0aW9uLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5REFBc0Q7QUFFdEQsUUFBUSxDQUFDLFlBQVksRUFBRSxHQUFHLEVBQUU7SUFDeEIsSUFBSSxDQUFDLGlDQUFpQyxFQUFFLEdBQUcsRUFBRTtRQUN6QyxNQUFNLFVBQVUsR0FBRyxJQUFJLHVCQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3hDLE1BQU0sQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNDLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLCtDQUErQyxFQUFFLEdBQUcsRUFBRTtRQUN2RCxNQUFNLFVBQVUsR0FBRyxJQUFJLHVCQUFVLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMvQyxNQUFNLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNoRCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyw2REFBNkQsRUFBRSxHQUFHLEVBQUU7UUFDckUsTUFBTSxVQUFVLEdBQUcsSUFBSSx1QkFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2hELE1BQU0sQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2xELENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLDZCQUE2QixFQUFFLEdBQUcsRUFBRTtRQUNyQyxNQUFNLFVBQVUsR0FBRyxJQUFJLHVCQUFVLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3pDLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkMsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsK0NBQStDLEVBQUUsR0FBRyxFQUFFO1FBQ3ZELE1BQU0sVUFBVSxHQUFHLElBQUksdUJBQVUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFekMsS0FBSyxJQUFJLENBQUMsR0FBVyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3JELFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztTQUNoQztRQUVELFVBQVUsQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3RDLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLGlDQUFpQyxFQUFFLEdBQUcsRUFBRTtRQUN6QyxNQUFNLFVBQVUsR0FBRyxJQUFJLHVCQUFVLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRXpDLEtBQUssSUFBSSxDQUFDLEdBQVcsQ0FBQyxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNyRCxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7U0FDaEM7UUFFRCxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN0QyxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyx5QkFBeUIsRUFBRSxHQUFHLEVBQUU7UUFDakMsTUFBTSxVQUFVLEdBQUcsSUFBSSx1QkFBVSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWhELEtBQUssSUFBSSxDQUFDLEdBQVcsQ0FBQyxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNyRCxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7U0FDaEM7UUFFRCxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN2QyxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxxQ0FBcUMsRUFBRSxHQUFHLEVBQUU7UUFDN0MsdUNBQXVDO1FBQ3ZDLE1BQU0sVUFBVSxHQUFHLElBQUksdUJBQVUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDOUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNwRCxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29sbGVjdGlvbiB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29sbGVjdGlvbic7XG5cbmRlc2NyaWJlKCdDb2xsZWN0aW9uJywgKCkgPT4ge1xuICAgIHRlc3QoJ05vdGF0aW9uIHJldHVybnMgY29ycmVjdCB2YWx1ZXMnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGNvbGxlY3Rpb24gPSBuZXcgQ29sbGVjdGlvbigxLCA2KTtcbiAgICAgICAgZXhwZWN0KGNvbGxlY3Rpb24ubm90YXRpb24pLnRvQmUoJ2Q2Jyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdOb3RhdGlvbiByZXR1cm5zIGNvcnJlY3QgdmFsdWVzIHdpdGggbW9kaWZpZXInLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGNvbGxlY3Rpb24gPSBuZXcgQ29sbGVjdGlvbigxMCwgMTAwLCAxMCk7XG4gICAgICAgIGV4cGVjdChjb2xsZWN0aW9uLm5vdGF0aW9uKS50b0JlKCcxMGQlKzEwJyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdOb3RhdGlvbiByZXR1cm5zIGNvcnJlY3QgdmFsdWVzIHdpdGggbW9kaWZpZXIgYW5kIG11bHRpcGxlcicsICgpID0+IHtcbiAgICAgICAgY29uc3QgY29sbGVjdGlvbiA9IG5ldyBDb2xsZWN0aW9uKDEwMCwgNCwgMiwgNCk7XG4gICAgICAgIGV4cGVjdChjb2xsZWN0aW9uLm5vdGF0aW9uKS50b0JlKCcxMDBkNCsyKjQnKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ0NvdW50IHJldHVybnMgY29ycmVjdCB2YWx1ZScsICgpID0+IHtcbiAgICAgICAgY29uc3QgY29sbGVjdGlvbiA9IG5ldyBDb2xsZWN0aW9uKDYsIDEwKTtcbiAgICAgICAgZXhwZWN0KGNvbGxlY3Rpb24uY291bnQoKSkudG9CZSg2KTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ1NldCBib251cyBpcyBhYnNvcmJlZCBieSBkaWNlIGFuZCBzZXRzIGV4Y2VzcycsICgpID0+IHtcbiAgICAgICAgY29uc3QgY29sbGVjdGlvbiA9IG5ldyBDb2xsZWN0aW9uKDEwLCA4KTtcblxuICAgICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgY29sbGVjdGlvbi5kaWNlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb2xsZWN0aW9uLmRpY2VbaV0udmFsdWUgPSA0O1xuICAgICAgICB9XG5cbiAgICAgICAgY29sbGVjdGlvbi5ib251cyA9IDQxO1xuICAgICAgICBleHBlY3QoY29sbGVjdGlvbi5leGNlc3MpLnRvQmUoMSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdUb3RhbCBuYXR1cmFsIGFkZHMgdXAgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgICAgICBjb25zdCBjb2xsZWN0aW9uID0gbmV3IENvbGxlY3Rpb24oMTAsIDgpO1xuXG4gICAgICAgIGZvciAobGV0IGk6IG51bWJlciA9IDA7IGkgPCBjb2xsZWN0aW9uLmRpY2UubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbGxlY3Rpb24uZGljZVtpXS52YWx1ZSA9IDQ7XG4gICAgICAgIH1cblxuICAgICAgICBleHBlY3QoY29sbGVjdGlvbi50b3RhbCkudG9CZSg0MCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdUb3RhbCBhZGRzIHVwIGNvcnJlY3RseScsICgpID0+IHtcbiAgICAgICAgY29uc3QgY29sbGVjdGlvbiA9IG5ldyBDb2xsZWN0aW9uKDEwLCA4LCAyLCAxMCk7XG5cbiAgICAgICAgZm9yIChsZXQgaTogbnVtYmVyID0gMDsgaSA8IGNvbGxlY3Rpb24uZGljZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29sbGVjdGlvbi5kaWNlW2ldLnZhbHVlID0gNDtcbiAgICAgICAgfVxuXG4gICAgICAgIGV4cGVjdChjb2xsZWN0aW9uLnRvdGFsKS50b0JlKDQyMCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdUb3RhbCBzaG91bGQgbm90IGJlIDEwMCUgZXZlcnkgdGltZScsICgpID0+IHtcbiAgICAgICAgLy8gMSBvdXQgb2YgYSBtaWxsaW9uIGNoYW5jZSBvZiBmYWlsaW5nXG4gICAgICAgIGNvbnN0IGNvbGxlY3Rpb24gPSBuZXcgQ29sbGVjdGlvbigxMDAwMDAwLCA2KTtcbiAgICAgICAgZXhwZWN0KGNvbGxlY3Rpb24ucm9sbCgpKS50b0JlTGVzc1RoYW4oNjAwMDAwMCk7XG4gICAgfSk7XG59KTtcbiJdfQ==