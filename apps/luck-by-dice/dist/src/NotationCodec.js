"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotationCodec = void 0;
const Collection_1 = require("./Collection");
const Cup_1 = require("./Cup");
const Dice_1 = require("./Dice");
/**
 * Codec that encodes objects to notations and decodes notations to objects.
 */
class NotationCodec {
    //private _cup;
    constructor() {
        this._separator = ',';
        this._cup = '2';
        //name: string) {
        //  this._cup = name;
    }
    get cup() {
        return this._cup;
    }
    /**
     * Encode from a cup to a string
     * @param cup
     * @returns
     */
    encodeCup(cup) {
        let notation = '';
        let firstIteration = true;
        cup.forEach((collection) => {
            if (firstIteration) {
                firstIteration = false;
            }
            else {
                notation += this._separator;
            }
            notation += this.encodeCollection(collection);
        });
        return notation;
    }
    /**
     * Encode from a collection to a string
     * @param collection
     * @returns
     */
    encodeCollection(collection) {
        let notation = '';
        const amount = collection.count();
        if (amount > 1) {
            notation += amount;
        }
        const sides = collection.sides;
        if (sides === 100) {
            notation += 'd%';
        }
        else {
            notation += 'd' + sides;
        }
        const modifier = collection.modifier;
        if (modifier > 0) {
            notation += '+' + Math.abs(modifier);
        }
        else if (modifier < 0) {
            notation += '-' + Math.abs(modifier);
        }
        const multiplier = collection.multiplier;
        if (multiplier > 1) {
            notation += '*' + multiplier;
        }
        return notation;
    }
    /**
     * Encode from a dice to a string
     */
    encodeDice(dice) {
        let notation = '';
        if (dice.max === 100) {
            notation += 'd%';
        }
        else {
            notation += 'd' + dice.max;
        }
        return notation;
    }
    /**
     * Decodes a dice cup notation
     * @param notation 1d6+2*8,1d10,2d%
     */
    decodeCup(notation) {
        const expressionParts = notation.toLowerCase().split(this._separator);
        const cup = new Cup_1.Cup();
        expressionParts.forEach((expressionPart) => {
            cup.push(this.decodeCollection(expressionPart));
        });
        return cup;
    }
    /**
     * Decodes a dice collection notation
     * @param notation 1d6+2*8
     * @returns ICollection
     */
    decodeCollection(notation) {
        let amount = 1;
        let sides = 2;
        let multiplier = 1;
        let modifier = 0;
        let unsorted = notation.split('d');
        amount = unsorted[0] !== '' ? Number(unsorted[0]) : 1;
        unsorted = unsorted[1].split('*');
        if (!this._isEmpty(unsorted[1])) {
            multiplier = Number(unsorted[1]);
        }
        if (unsorted[0].includes('+') !== false) {
            unsorted = unsorted[0].split('+');
            modifier = unsorted[1] !== null ? Number(unsorted[1]) : 0;
        }
        else if (unsorted[0].includes('-') !== false) {
            unsorted = unsorted[0].split('-');
            modifier = unsorted[1] !== null ? 0 - Number(unsorted[1]) : 0;
        }
        if (unsorted[0] === '%') {
            sides = 100;
        }
        else {
            sides = Number(unsorted[0]);
        }
        return new Collection_1.Collection(amount, sides, modifier, multiplier);
    }
    decodeDice(notation) {
        if (notation.charAt(0).toLowerCase() !== 'd') {
            throw new Error('Invalid dice notation');
        }
        const number = Number(notation.substring(1));
        return new Dice_1.Dice(number);
    }
    /**
     * Determine whether string is empty or not
     * @param string
     * @returns
     */
    _isEmpty(string) {
        return !string || string.length === 0;
    }
}
exports.NotationCodec = NotationCodec;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTm90YXRpb25Db2RlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Ob3RhdGlvbkNvZGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDZDQUdzQjtBQUN0QiwrQkFHZTtBQUNmLGlDQUdnQjtBQVloQjs7R0FFRztBQUNILE1BQWEsYUFBYTtJQUl0QixlQUFlO0lBRWY7UUFMUSxlQUFVLEdBQVcsR0FBRyxDQUFDO1FBQ3pCLFNBQUksR0FBVyxHQUFHLENBQUM7UUFLdkIsaUJBQWlCO1FBQ2pCLHFCQUFxQjtJQUN6QixDQUFDO0lBRUQsSUFBVyxHQUFHO1FBQ1YsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ3JCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksU0FBUyxDQUFDLEdBQVM7UUFDdEIsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDO1FBRWxCLElBQUksY0FBYyxHQUFHLElBQUksQ0FBQztRQUMxQixHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBdUIsRUFBRSxFQUFFO1lBQ3BDLElBQUksY0FBYyxFQUFFO2dCQUNoQixjQUFjLEdBQUcsS0FBSyxDQUFDO2FBQzFCO2lCQUFNO2dCQUNILFFBQVEsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDO2FBQy9CO1lBRUQsUUFBUSxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNsRCxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sUUFBUSxDQUFDO0lBQ3BCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksZ0JBQWdCLENBQUMsVUFBdUI7UUFDM0MsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLE1BQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNsQyxJQUFJLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDWixRQUFRLElBQUksTUFBTSxDQUFDO1NBQ3RCO1FBRUQsTUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLEtB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c0NBd0pDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDb2xsZWN0aW9uLFxuICAgIElDb2xsZWN0aW9uXG59IGZyb20gJy4vQ29sbGVjdGlvbic7XG5pbXBvcnQge1xuICAgIEN1cCxcbiAgICBJQ3VwXG59IGZyb20gJy4vQ3VwJztcbmltcG9ydCB7XG4gICAgRGljZSxcbiAgICBJRGljZVxufSBmcm9tICcuL0RpY2UnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElOb3RhdGlvbkNvZGVjIHtcbiAgICBnZXQgY3VwKCk6IHN0cmluZztcbiAgICBlbmNvZGVDdXAoY3VwOiBJQ3VwKTogc3RyaW5nO1xuICAgIGVuY29kZUNvbGxlY3Rpb24oY29sbGVjdGlvbjogSUNvbGxlY3Rpb24pOiBzdHJpbmc7XG4gICAgZW5jb2RlRGljZShkaWNlOiBJRGljZSk6IHN0cmluZztcbiAgICBkZWNvZGVDdXAobm90YXRpb246IHN0cmluZyk6IElDdXA7XG4gICAgZGVjb2RlQ29sbGVjdGlvbihub3RhdGlvbjogc3RyaW5nKTogSUNvbGxlY3Rpb247XG4gICAgZGVjb2RlRGljZShub3RhdGlvbjogc3RyaW5nKTogSURpY2U7IFxufVxuXG4vKipcbiAqIENvZGVjIHRoYXQgZW5jb2RlcyBvYmplY3RzIHRvIG5vdGF0aW9ucyBhbmQgZGVjb2RlcyBub3RhdGlvbnMgdG8gb2JqZWN0cy5cbiAqL1xuZXhwb3J0IGNsYXNzIE5vdGF0aW9uQ29kZWMge1xuICAgIHByaXZhdGUgX3NlcGFyYXRvcjogc3RyaW5nID0gJywnO1xuICAgIHByaXZhdGUgX2N1cDogc3RyaW5nID0gJzInO1xuXG4gICAgLy9wcml2YXRlIF9jdXA7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8vbmFtZTogc3RyaW5nKSB7XG4gICAgICAgIC8vICB0aGlzLl9jdXAgPSBuYW1lO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgY3VwKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jdXA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW5jb2RlIGZyb20gYSBjdXAgdG8gYSBzdHJpbmdcbiAgICAgKiBAcGFyYW0gY3VwXG4gICAgICogQHJldHVybnNcbiAgICAgKi9cbiAgICBwdWJsaWMgZW5jb2RlQ3VwKGN1cDogSUN1cCk6IHN0cmluZyB7XG4gICAgICAgIGxldCBub3RhdGlvbiA9ICcnO1xuXG4gICAgICAgIGxldCBmaXJzdEl0ZXJhdGlvbiA9IHRydWU7XG4gICAgICAgIGN1cC5mb3JFYWNoKChjb2xsZWN0aW9uOiBJQ29sbGVjdGlvbikgPT4ge1xuICAgICAgICAgICAgaWYgKGZpcnN0SXRlcmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgZmlyc3RJdGVyYXRpb24gPSBmYWxzZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbm90YXRpb24gKz0gdGhpcy5fc2VwYXJhdG9yO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBub3RhdGlvbiArPSB0aGlzLmVuY29kZUNvbGxlY3Rpb24oY29sbGVjdGlvbik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBub3RhdGlvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFbmNvZGUgZnJvbSBhIGNvbGxlY3Rpb24gdG8gYSBzdHJpbmdcbiAgICAgKiBAcGFyYW0gY29sbGVjdGlvblxuICAgICAqIEByZXR1cm5zXG4gICAgICovXG4gICAgcHVibGljIGVuY29kZUNvbGxlY3Rpb24oY29sbGVjdGlvbjogSUNvbGxlY3Rpb24pOiBzdHJpbmcge1xuICAgICAgICBsZXQgbm90YXRpb24gPSAnJztcbiAgICAgICAgY29uc3QgYW1vdW50ID0gY29sbGVjdGlvbi5jb3VudCgpO1xuICAgICAgICBpZiAoYW1vdW50ID4gMSkge1xuICAgICAgICAgICAgbm90YXRpb24gKz0gYW1vdW50O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc2lkZXMgPSBjb2xsZWN0aW9uLnNpZGVzO1xuICAgICAgICBpZiAoc2lkZXMgPT09IDEwMCkge1xuICAgICAgICAgICAgbm90YXRpb24gKz0gJ2QlJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5vdGF0aW9uICs9ICdkJyArIHNpZGVzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1vZGlmaWVyID0gY29sbGVjdGlvbi5tb2RpZmllcjtcbiAgICAgICAgaWYgKG1vZGlmaWVyID4gMCkge1xuICAgICAgICAgICAgbm90YXRpb24gKz0gJysnICsgTWF0aC5hYnMobW9kaWZpZXIpO1xuICAgICAgICB9IGVsc2UgaWYgKG1vZGlmaWVyIDwgMCkge1xuICAgICAgICAgICAgbm90YXRpb24gKz0gJy0nICsgTWF0aC5hYnMobW9kaWZpZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbXVsdGlwbGllciA9IGNvbGxlY3Rpb24ubXVsdGlwbGllcjtcbiAgICAgICAgaWYgKG11bHRpcGxpZXIgPiAxKSB7XG4gICAgICAgICAgICBub3RhdGlvbiArPSAnKicgKyBtdWx0aXBsaWVyO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5vdGF0aW9uO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuY29kZSBmcm9tIGEgZGljZSB0byBhIHN0cmluZ1xuICAgICAqL1xuICAgIHB1YmxpYyBlbmNvZGVEaWNlKGRpY2U6IElEaWNlKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IG5vdGF0aW9uID0gJyc7XG4gICAgICAgIGlmIChkaWNlLm1heCA9PT0gMTAwKSB7XG4gICAgICAgICAgICBub3RhdGlvbiArPSAnZCUnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbm90YXRpb24gKz0gJ2QnICsgZGljZS5tYXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5vdGF0aW9uO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlY29kZXMgYSBkaWNlIGN1cCBub3RhdGlvblxuICAgICAqIEBwYXJhbSBub3RhdGlvbiAxZDYrMio4LDFkMTAsMmQlXG4gICAgICovXG4gICAgcHVibGljIGRlY29kZUN1cChub3RhdGlvbjogc3RyaW5nKSA6IElDdXAge1xuICAgICAgICBjb25zdCBleHByZXNzaW9uUGFydHMgPSBub3RhdGlvbi50b0xvd2VyQ2FzZSgpLnNwbGl0KHRoaXMuX3NlcGFyYXRvcik7XG4gICAgICAgIGNvbnN0IGN1cCA9IG5ldyBDdXAoKTtcblxuICAgICAgICBleHByZXNzaW9uUGFydHMuZm9yRWFjaCgoZXhwcmVzc2lvblBhcnQ6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgY3VwLnB1c2godGhpcy5kZWNvZGVDb2xsZWN0aW9uKGV4cHJlc3Npb25QYXJ0KSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBjdXA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVjb2RlcyBhIGRpY2UgY29sbGVjdGlvbiBub3RhdGlvblxuICAgICAqIEBwYXJhbSBub3RhdGlvbiAxZDYrMio4XG4gICAgICogQHJldHVybnMgSUNvbGxlY3Rpb25cbiAgICAgKi9cbiAgICBwdWJsaWMgZGVjb2RlQ29sbGVjdGlvbihub3RhdGlvbjogc3RyaW5nKTogSUNvbGxlY3Rpb24ge1xuICAgICAgICBsZXQgYW1vdW50ID0gMTtcbiAgICAgICAgbGV0IHNpZGVzID0gMjtcbiAgICAgICAgbGV0IG11bHRpcGxpZXIgPSAxO1xuICAgICAgICBsZXQgbW9kaWZpZXIgPSAwO1xuXG4gICAgICAgIGxldCB1bnNvcnRlZCA9IG5vdGF0aW9uLnNwbGl0KCdkJyk7XG5cbiAgICAgICAgYW1vdW50ID0gdW5zb3J0ZWRbMF0gIT09ICcnID8gTnVtYmVyKHVuc29ydGVkWzBdKSA6IDE7XG5cbiAgICAgICAgdW5zb3J0ZWQgPSB1bnNvcnRlZFsxXS5zcGxpdCgnKicpO1xuXG4gICAgICAgIGlmICghdGhpcy5faXNFbXB0eSh1bnNvcnRlZFsxXSkpIHtcbiAgICAgICAgICAgIG11bHRpcGxpZXIgPSBOdW1iZXIodW5zb3J0ZWRbMV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVuc29ydGVkWzBdLmluY2x1ZGVzKCcrJykgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICB1bnNvcnRlZCA9IHVuc29ydGVkWzBdLnNwbGl0KCcrJyk7XG4gICAgICAgICAgICBtb2RpZmllciA9IHVuc29ydGVkWzFdICE9PSBudWxsID8gTnVtYmVyKHVuc29ydGVkWzFdKSA6IDA7XG4gICAgICAgIH0gZWxzZSBpZiAodW5zb3J0ZWRbMF0uaW5jbHVkZXMoJy0nKSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHVuc29ydGVkID0gdW5zb3J0ZWRbMF0uc3BsaXQoJy0nKTtcbiAgICAgICAgICAgIG1vZGlmaWVyID0gdW5zb3J0ZWRbMV0gIT09IG51bGwgPyAwIC0gTnVtYmVyKHVuc29ydGVkWzFdKSA6IDA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodW5zb3J0ZWRbMF0gPT09ICclJykge1xuICAgICAgICAgICAgc2lkZXMgPSAxMDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzaWRlcyA9IE51bWJlcih1bnNvcnRlZFswXSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IENvbGxlY3Rpb24oYW1vdW50LCBzaWRlcywgbW9kaWZpZXIsIG11bHRpcGxpZXIpO1xuICAgIH1cblxuICAgIHB1YmxpYyBkZWNvZGVEaWNlKG5vdGF0aW9uOiBzdHJpbmcpOiBJRGljZSB7XG4gICAgICAgIGlmIChub3RhdGlvbi5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSAhPT0gJ2QnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZGljZSBub3RhdGlvbicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG51bWJlciA9IE51bWJlcihub3RhdGlvbi5zdWJzdHJpbmcoMSkpO1xuICAgICAgICByZXR1cm4gbmV3IERpY2UobnVtYmVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmUgd2hldGhlciBzdHJpbmcgaXMgZW1wdHkgb3Igbm90XG4gICAgICogQHBhcmFtIHN0cmluZ1xuICAgICAqIEByZXR1cm5zXG4gICAgICovXG4gICAgcHJpdmF0ZSBfaXNFbXB0eShzdHJpbmc6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gIXN0cmluZyB8fCBzdHJpbmcubGVuZ3RoID09PSAwO1xuICAgIH1cbn1cbiJdfQ==