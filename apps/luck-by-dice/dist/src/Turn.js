"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Turn = void 0;
const Cup_1 = require("./Cup");
const Luck_1 = require("./Luck");
const NotationCodec_1 = require("./NotationCodec");
class Turn {
    constructor(notation, luck) {
        this._notationCodec = new NotationCodec_1.NotationCodec();
        this._extraBonus = 0;
        if (luck === undefined) {
            this._luck = new Luck_1.Luck();
        }
        else {
            this._luck = new Luck_1.Luck(luck);
        }
        if (notation === undefined) {
            this._cup = new Cup_1.Cup();
        }
        else {
            this._cup = this._notationCodec.decodeCup(notation);
        }
    }
    get notation() {
        return this._notationCodec.encodeCup(this._cup);
    }
    set notation(value) {
        this._cup = this._notationCodec.decodeCup(value);
    }
    get luck() {
        return this._luck;
    }
    set luck(luck) {
        this._luck = luck;
    }
    get cup() {
        return this._cup;
    }
    set cup(cup) {
        this._cup = cup;
    }
    minPotential() {
        let total = 0;
        this._cup.forEach(function (collection) {
            total += collection.minPotential;
        });
        return total;
    }
    maxPotential() {
        let total = 0;
        this._cup.forEach(function (collection) {
            total += collection.maxPotential;
        });
        return total;
    }
    get total() {
        let total = 0;
        this._cup.forEach(function (collection) {
            total += collection.total;
        });
        return total;
    }
    get extraBonus() {
        return this._extraBonus;
    }
    roll() {
        const value = this._cup.roll();
        if (this._luck.status === Luck_1.Active.disable) {
            return this.total;
        }
        // update luck base value based on roll outcome percentage
        this._luck.update(this._cup.outcomePercent);
        const bonus = this._luck.modify(value) - value;
        // take luck modifier and distribute to dice
        // luck modifies actual dice not modifiers or multipliers
        // there is the potential for an amount to still exist after above iterations, store it
        this._extraBonus = this.cup.allocateBonuses(bonus);
        return this.total;
    }
}
exports.Turn = Turn;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHVybi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9UdXJuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLCtCQUdlO0FBQ2YsaUNBSWdCO0FBQ2hCLG1EQUd5QjtBQU16QixNQUFhLElBQUk7SUFPYixZQUNJLFFBQTRCLEVBQzVCLElBQXdCO1FBRXhCLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSw2QkFBYSxFQUFFLENBQUM7UUFDMUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7UUFFckIsSUFBRyxJQUFJLEtBQUssU0FBUyxFQUFDO1lBQ2xCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxXQUFJLEVBQUUsQ0FBQztTQUMzQjthQUFNO1lBQ0gsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLFdBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUMvQjtRQUVELElBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtZQUN4QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksU0FBRyxFQUFFLENBQUM7U0FDekI7YUFBTTtZQUNILElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDdkQ7SUFDTCxDQUFDO0lBRUQsSUFBVyxRQUFRO1FBQ2YsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVELElBQVcsUUFBUSxDQUFDLEtBQWE7UUFDN0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQsSUFBVyxJQUFJO1FBQ1gsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxJQUFXLElBQUksQ0FBQyxJQUFXO1FBQ3ZCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO0lBQ3RCLENBQUM7SUFFRCxJQUFXLEdBQUc7UUFDVixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDckIsQ0FBQztJQUVELElBQVcsR0FBRyxDQUFDLEdBQVM7UUFDcEIsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7SUFDcEIsQ0FBQztJQUVNLFlBQVk7UUFFZixJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDZCxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLFVBQXVCO1lBQy9DLEtBQUssSUFBSSxVQUFVLENBQUMsWUFBWSxDQUFDO1FBQ3JDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQztJQUVNLFlBQVk7UUFFZixJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDZCxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLFVBQXVCO1lBQy9DLEtBQUssSUFBSSxVQUFVLENBQUMsWUFBWSxDQUFDO1FBQ3JDLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQztJQUVELElBQVcsS0FBSztRQUVaLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztRQUNkLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsVUFBdUI7WUFDL0MsS0FBSyxJQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUM7UUFDOUIsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0lBRUQsSUFBVyxVQUFVO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUM1QixDQUFDO0lBRU0sSUFBSTtRQUVQLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFL0IsSUFBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sS0FBSyxhQUFNLENBQUMsT0FBTyxFQUFDO1lBQ3BDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztTQUNyQjtRQUVELDBEQUEwRDtRQUMxRCxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBRTVDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUUvQyw0Q0FBNEM7UUFDNUMseURBQXlEO1FBQ3pELHVGQUF1RjtRQUN2RixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRW5ELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN0QixDQUFDO0NBQ0o7QUF2R0Qsb0JBdUdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSUNvbGxlY3Rpb24gfSBmcm9tICcuL0NvbGxlY3Rpb24nO1xuaW1wb3J0IHtcbiAgICBDdXAsXG4gICAgSUN1cFxufSBmcm9tICcuL0N1cCc7XG5pbXBvcnQge1xuICAgIEFjdGl2ZSxcbiAgICBJTHVjayxcbiAgICBMdWNrXG59IGZyb20gJy4vTHVjayc7XG5pbXBvcnQge1xuICAgIElOb3RhdGlvbkNvZGVjLFxuICAgIE5vdGF0aW9uQ29kZWNcbn0gZnJvbSAnLi9Ob3RhdGlvbkNvZGVjJztcblxuZXhwb3J0IGludGVyZmFjZSBJVHVybiB7XG5cbn1cblxuZXhwb3J0IGNsYXNzIFR1cm4gaW1wbGVtZW50cyBJVHVyblxue1xuICAgIHByaXZhdGUgX25vdGF0aW9uQ29kZWM6IElOb3RhdGlvbkNvZGVjO1xuICAgIHByaXZhdGUgX2N1cDogSUN1cDtcbiAgICBwcml2YXRlIF9sdWNrOiBJTHVjaztcbiAgICBwcml2YXRlIF9leHRyYUJvbnVzOiBudW1iZXI7IC8vc3VycGx1c0JvbnVzO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKFxuICAgICAgICBub3RhdGlvbjogc3RyaW5nIHwgdW5kZWZpbmVkLFxuICAgICAgICBsdWNrOiBudW1iZXIgfCB1bmRlZmluZWRcbiAgICApIHtcbiAgICAgICAgdGhpcy5fbm90YXRpb25Db2RlYyA9IG5ldyBOb3RhdGlvbkNvZGVjKCk7XG4gICAgICAgIHRoaXMuX2V4dHJhQm9udXMgPSAwO1xuXG4gICAgICAgIGlmKGx1Y2sgPT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICB0aGlzLl9sdWNrID0gbmV3IEx1Y2soKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2x1Y2sgPSBuZXcgTHVjayhsdWNrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChub3RhdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLl9jdXAgPSBuZXcgQ3VwKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9jdXAgPSB0aGlzLl9ub3RhdGlvbkNvZGVjLmRlY29kZUN1cChub3RhdGlvbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IG5vdGF0aW9uKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ub3RhdGlvbkNvZGVjLmVuY29kZUN1cCh0aGlzLl9jdXApO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXQgbm90YXRpb24odmFsdWU6IHN0cmluZyl7XG4gICAgICAgIHRoaXMuX2N1cCA9IHRoaXMuX25vdGF0aW9uQ29kZWMuZGVjb2RlQ3VwKHZhbHVlKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGx1Y2soKTogSUx1Y2sge1xuICAgICAgICByZXR1cm4gdGhpcy5fbHVjaztcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0IGx1Y2sobHVjazogSUx1Y2spe1xuICAgICAgICB0aGlzLl9sdWNrID0gbHVjaztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGN1cCgpOiBJQ3VwIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2N1cDtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0IGN1cChjdXA6IElDdXApIHtcbiAgICAgICAgdGhpcy5fY3VwID0gY3VwO1xuICAgIH1cblxuICAgIHB1YmxpYyBtaW5Qb3RlbnRpYWwoKTogbnVtYmVyXG4gICAge1xuICAgICAgICBsZXQgdG90YWwgPSAwO1xuICAgICAgICB0aGlzLl9jdXAuZm9yRWFjaChmdW5jdGlvbiAoY29sbGVjdGlvbjogSUNvbGxlY3Rpb24pIHtcbiAgICAgICAgICAgIHRvdGFsICs9IGNvbGxlY3Rpb24ubWluUG90ZW50aWFsO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRvdGFsO1xuICAgIH1cblxuICAgIHB1YmxpYyBtYXhQb3RlbnRpYWwoKTogbnVtYmVyXG4gICAge1xuICAgICAgICBsZXQgdG90YWwgPSAwO1xuICAgICAgICB0aGlzLl9jdXAuZm9yRWFjaChmdW5jdGlvbiAoY29sbGVjdGlvbjogSUNvbGxlY3Rpb24pIHtcbiAgICAgICAgICAgIHRvdGFsICs9IGNvbGxlY3Rpb24ubWF4UG90ZW50aWFsO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdG90YWw7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCB0b3RhbCgpOiBudW1iZXJcbiAgICB7XG4gICAgICAgIGxldCB0b3RhbCA9IDA7XG4gICAgICAgIHRoaXMuX2N1cC5mb3JFYWNoKGZ1bmN0aW9uIChjb2xsZWN0aW9uOiBJQ29sbGVjdGlvbikge1xuICAgICAgICAgICAgdG90YWwgKz0gY29sbGVjdGlvbi50b3RhbDtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0b3RhbDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGV4dHJhQm9udXMoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4dHJhQm9udXM7XG4gICAgfVxuXG4gICAgcHVibGljIHJvbGwoKTogbnVtYmVyXG4gICAge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuX2N1cC5yb2xsKCk7XG5cbiAgICAgICAgaWYodGhpcy5fbHVjay5zdGF0dXMgPT09IEFjdGl2ZS5kaXNhYmxlKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRvdGFsO1xuICAgICAgICB9XG4gICAgIFxuICAgICAgICAvLyB1cGRhdGUgbHVjayBiYXNlIHZhbHVlIGJhc2VkIG9uIHJvbGwgb3V0Y29tZSBwZXJjZW50YWdlXG4gICAgICAgIHRoaXMuX2x1Y2sudXBkYXRlKHRoaXMuX2N1cC5vdXRjb21lUGVyY2VudCk7XG5cbiAgICAgICAgY29uc3QgYm9udXMgPSB0aGlzLl9sdWNrLm1vZGlmeSh2YWx1ZSkgLSB2YWx1ZTtcblxuICAgICAgICAvLyB0YWtlIGx1Y2sgbW9kaWZpZXIgYW5kIGRpc3RyaWJ1dGUgdG8gZGljZVxuICAgICAgICAvLyBsdWNrIG1vZGlmaWVzIGFjdHVhbCBkaWNlIG5vdCBtb2RpZmllcnMgb3IgbXVsdGlwbGllcnNcbiAgICAgICAgLy8gdGhlcmUgaXMgdGhlIHBvdGVudGlhbCBmb3IgYW4gYW1vdW50IHRvIHN0aWxsIGV4aXN0IGFmdGVyIGFib3ZlIGl0ZXJhdGlvbnMsIHN0b3JlIGl0XG4gICAgICAgIHRoaXMuX2V4dHJhQm9udXMgPSB0aGlzLmN1cC5hbGxvY2F0ZUJvbnVzZXMoYm9udXMpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLnRvdGFsO1xuICAgIH1cbn0iXX0=