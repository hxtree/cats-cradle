// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MainStack should match snapshot test 1`] = `
{
  Outputs: {
    Endpoint: {
      Value: {
        Fn::Join: [
          ,
          [
            https://,
            {
              Ref: MyTestStackdnsdomainMyTestStackdnsdomaincustomdomainB25EDAC1,
            },
          ],
        ],
      },
    },
    MyTestStackdnsdomainMyTestStackdnsdomainrestapiEndpointF2D9559A: {
      Value: {
        Fn::Join: [
          ,
          [
            https://,
            {
              Ref: MyTestStackdnsdomainMyTestStackdnsdomainrestapiF4C3ABA3,
            },
            .execute-api.,
            {
              Ref: AWS::Region,
            },
            .,
            {
              Ref: AWS::URLSuffix,
            },
            /,
            {
              Ref: MyTestStackdnsdomainMyTestStackdnsdomainrestapiDeploymentStageprod1A061321,
            },
            /,
          ],
        ],
      },
    },
  },
  Parameters: {
    BootstrapVersion: {
      Default: /cdk-bootstrap/hnb659fds/version,
      Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip],
      Type: AWS::SSM::Parameter::Value<String>,
    },
    MyTestStackdnsdomainMyTestStackdnsdomainhostedzoneidParameter6C99EE2E: {
      Default: my-domains-hosted-zone-id,
      Type: AWS::SSM::Parameter::Value<String>,
    },
    MyTestStackdnsdomainMyTestStackdnsdomainorgformationcertswildcardcert1arnParameter1B552984: {
      Default: orgformation-certs-wildcard-cert1-arn,
      Type: AWS::SSM::Parameter::Value<String>,
    },
    MyTestStackdnsdomainMyTestStackdnsdomainssmdomainnameParameter504B2E51: {
      Default: DOMAIN_NAME,
      Type: AWS::SSM::Parameter::Value<String>,
    },
    lambdalayernestjslatestversionssmParameter: {
      Default: LAMBDA_LAYER_VERSION_NESTJS,
      Type: AWS::SSM::Parameter::Value<String>,
    },
    mongodatabasepasswordssmParameter: {
      Default: MONGO_DATABASE_PASSWORD,
      Type: AWS::SSM::Parameter::Value<String>,
    },
    mongodatabaseurissmParameter: {
      Default: MONGO_DATABASE_URI,
      Type: AWS::SSM::Parameter::Value<String>,
    },
    mongodatabaseuserssmParameter: {
      Default: MONGO_DATABASE_USER,
      Type: AWS::SSM::Parameter::Value<String>,
    },
  },
  Resources: {
    LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A: {
      DependsOn: [
        LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB,
        LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB,
      ],
      Properties: {
        Code: {
          S3Bucket: {
            Fn::Sub: cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region},
          },
          S3Key: 4e26bf2d0a26f2097fb2b261f22bb51e3f6b4b52635777b1e54edbd8e2d58c35.zip,
        },
        Handler: index.handler,
        Role: {
          Fn::GetAtt: [
            LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB,
            Arn,
          ],
        },
        Runtime: nodejs18.x,
        Timeout: 900,
      },
      Type: AWS::Lambda::Function,
    },
    LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB: {
      Properties: {
        AssumeRolePolicyDocument: {
          Statement: [
            {
              Action: sts:AssumeRole,
              Effect: Allow,
              Principal: {
                Service: lambda.amazonaws.com,
              },
            },
          ],
          Version: 2012-10-17,
        },
        ManagedPolicyArns: [
          {
            Fn::Join: [
              ,
              [
                arn:,
                {
                  Ref: AWS::Partition,
                },
                :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole,
              ],
            ],
          },
        ],
      },
      Type: AWS::IAM::Role,
    },
    LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB: {
      Properties: {
        PolicyDocument: {
          Statement: [
            {
              Action: [
                logs:PutRetentionPolicy,
                logs:DeleteRetentionPolicy,
              ],
              Effect: Allow,
              Resource: *,
            },
          ],
          Version: 2012-10-17,
        },
        PolicyName: LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB,
        Roles: [
          {
            Ref: LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB,
          },
        ],
      },
      Type: AWS::IAM::Policy,
    },
    MyTestStackdnsdomainMyTestStackdnsdomainapigatewayaliasrecord1E646064: {
      Properties: {
        AliasTarget: {
          DNSName: {
            Fn::GetAtt: [
              MyTestStackdnsdomainMyTestStackdnsdomaincustomdomainB25EDAC1,
              RegionalDomainName,
            ],
          },
          HostedZoneId: {
            Fn::GetAtt: [
              MyTestStackdnsdomainMyTestStackdnsdomaincustomdomainB25EDAC1,
              RegionalHostedZoneId,
            ],
          },
        },
        HostedZoneId: {
          Ref: MyTestStackdnsdomainMyTestStackdnsdomainhostedzoneidParameter6C99EE2E,
        },
        Name: {
          Fn::Join: [
            ,
            [
              api.,
              {
                Ref: MyTestStackdnsdomainMyTestStackdnsdomainssmdomainnameParameter504B2E51,
              },
              .,
            ],
          ],
        },
        Type: A,
      },
      Type: AWS::Route53::RecordSet,
    },
    MyTestStackdnsdomainMyTestStackdnsdomainapistageC0477553: {
      DependsOn: [
        MyTestStackdnsdomainMyTestStackdnsdomainrestapiAccount8D836574,
      ],
      Properties: {
        DeploymentId: {
          Ref: MyTestStackdnsdomainMyTestStackdnsdomaindeployment_UNIQUE_HASH,
        },
        RestApiId: {
          Ref: MyTestStackdnsdomainMyTestStackdnsdomainrestapiF4C3ABA3,
        },
        StageName: default,
      },
      Type: AWS::ApiGateway::Stage,
    },
    MyTestStackdnsdomainMyTestStackdnsdomainapisvcdomainname27A6A141: {
      Properties: {
        Description: api service domain name,
        Name: API_SVC_DOMAIN_NAME,
        Type: String,
        Value: {
          Ref: MyTestStackdnsdomainMyTestStackdnsdomaincustomdomainB25EDAC1,
        },
      },
      Type: AWS::SSM::Parameter,
    },
    MyTestStackdnsdomainMyTestStackdnsdomaincustomdomainB25EDAC1: {
      Properties: {
        DomainName: {
          Fn::Join: [
            ,
            [
              api.,
              {
                Ref: MyTestStackdnsdomainMyTestStackdnsdomainssmdomainnameParameter504B2E51,
              },
            ],
          ],
        },
        EndpointConfiguration: {
          Types: [
            REGIONAL,
          ],
        },
        RegionalCertificateArn: {
          Ref: MyTestStackdnsdomainMyTestStackdnsdomainorgformationcertswildcardcert1arnParameter1B552984,
        },
        SecurityPolicy: TLS_1_2,
      },
      Type: AWS::ApiGateway::DomainName,
    },
    MyTestStackdnsdomainMyTestStackdnsdomaincustomdomainMapMyTestStackMyTestStackdnsdomainMyTestStackdnsdomainrestapiE6EBAD2957CC8CE6: {
      Properties: {
        DomainName: {
          Ref: MyTestStackdnsdomainMyTestStackdnsdomaincustomdomainB25EDAC1,
        },
        RestApiId: {
          Ref: MyTestStackdnsdomainMyTestStackdnsdomainrestapiF4C3ABA3,
        },
        Stage: {
          Ref: MyTestStackdnsdomainMyTestStackdnsdomainrestapiDeploymentStageprod1A061321,
        },
      },
      Type: AWS::ApiGateway::BasePathMapping,
    },
    MyTestStackdnsdomainMyTestStackdnsdomaindeployment_UNIQUE_HASH: {
      DependsOn: [
        MyTestStackdnsdomainMyTestStackdnsdomainrestapiproxyANY74B2D563,
        MyTestStackdnsdomainMyTestStackdnsdomainrestapiANY413B061D,
      ],
      Properties: {
        RestApiId: {
          Ref: MyTestStackdnsdomainMyTestStackdnsdomainrestapiF4C3ABA3,
        },
      },
      Type: AWS::ApiGateway::Deployment,
    },
    MyTestStackdnsdomainMyTestStackdnsdomainrestapiANY413B061D: {
      Properties: {
        AuthorizationType: NONE,
        HttpMethod: ANY,
        Integration: {
          IntegrationHttpMethod: POST,
          Type: AWS_PROXY,
          Uri: {
            Fn::Join: [
              ,
              [
                arn:,
                {
                  Ref: AWS::Partition,
                },
                :apigateway:,
                {
                  Ref: AWS::Region,
                },
                :lambda:path/2015-03-31/functions/,
                {
                  Fn::GetAtt: [
                    apiservicestacknestjsNodeJsLambdaA2C684BA,
                    Arn,
                  ],
                },
                /invocations,
              ],
            ],
          },
        },
        ResourceId: {
          Fn::GetAtt: [
            MyTestStackdnsdomainMyTestStackdnsdomainrestapiF4C3ABA3,
            RootResourceId,
          ],
        },
        RestApiId: {
          Ref: MyTestStackdnsdomainMyTestStackdnsdomainrestapiF4C3ABA3,
        },
      },
      Type: AWS::ApiGateway::Method,
    },
    MyTestStackdnsdomainMyTestStackdnsdomainrestapiANYApiPermissionMyTestStackMyTestStackdnsdomainMyTestStackdnsdomainrestapiE6EBAD29ANYB678C578: {
      Properties: {
        Action: lambda:InvokeFunction,
        FunctionName: {
          Fn::GetAtt: [
            apiservicestacknestjsNodeJsLambdaA2C684BA,
            Arn,
          ],
        },
        Principal: apigateway.amazonaws.com,
        SourceArn: {
          Fn::Join: [
            ,
            [
              arn:,
              {
                Ref: AWS::Partition,
              },
              :execute-api:,
              {
                Ref: AWS::Region,
              },
              :,
              {
                Ref: AWS::AccountId,
              },
              :,
              {
                Ref: MyTestStackdnsdomainMyTestStackdnsdomainrestapiF4C3ABA3,
              },
              /,
              {
                Ref: MyTestStackdnsdomainMyTestStackdnsdomainrestapiDeploymentStageprod1A061321,
              },
              /*/,
            ],
          ],
        },
      },
      Type: AWS::Lambda::Permission,
    },
    MyTestStackdnsdomainMyTestStackdnsdomainrestapiANYApiPermissionTestMyTestStackMyTestStackdnsdomainMyTestStackdnsdomainrestapiE6EBAD29ANY7EC26F97: {
      Properties: {
        Action: lambda:InvokeFunction,
        FunctionName: {
          Fn::GetAtt: [
            apiservicestacknestjsNodeJsLambdaA2C684BA,
            Arn,
          ],
        },
        Principal: apigateway.amazonaws.com,
        SourceArn: {
          Fn::Join: [
            ,
            [
              arn:,
              {
                Ref: AWS::Partition,
              },
              :execute-api:,
              {
                Ref: AWS::Region,
              },
              :,
              {
                Ref: AWS::AccountId,
              },
              :,
              {
                Ref: MyTestStackdnsdomainMyTestStackdnsdomainrestapiF4C3ABA3,
              },
              /test-invoke-stage/*/,
            ],
          ],
        },
      },
      Type: AWS::Lambda::Permission,
    },
    MyTestStackdnsdomainMyTestStackdnsdomainrestapiAccount8D836574: {
      DeletionPolicy: Retain,
      DependsOn: [
        MyTestStackdnsdomainMyTestStackdnsdomainrestapiF4C3ABA3,
      ],
      Properties: {
        CloudWatchRoleArn: {
          Fn::GetAtt: [
            MyTestStackdnsdomainMyTestStackdnsdomainrestapiCloudWatchRole576320DC,
            Arn,
          ],
        },
      },
      Type: AWS::ApiGateway::Account,
      UpdateReplacePolicy: Retain,
    },
    MyTestStackdnsdomainMyTestStackdnsdomainrestapiCloudWatchRole576320DC: {
      DeletionPolicy: Retain,
      Properties: {
        AssumeRolePolicyDocument: {
          Statement: [
            {
              Action: sts:AssumeRole,
              Effect: Allow,
              Principal: {
                Service: apigateway.amazonaws.com,
              },
            },
          ],
          Version: 2012-10-17,
        },
        ManagedPolicyArns: [
          {
            Fn::Join: [
              ,
              [
                arn:,
                {
                  Ref: AWS::Partition,
                },
                :iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs,
              ],
            ],
          },
        ],
      },
      Type: AWS::IAM::Role,
      UpdateReplacePolicy: Retain,
    },
    MyTestStackdnsdomainMyTestStackdnsdomainrestapiDeployment2879F381befc6bceb2ba77e261b13d1c0830c668: {
      DependsOn: [
        MyTestStackdnsdomainMyTestStackdnsdomainrestapiproxyANY74B2D563,
        MyTestStackdnsdomainMyTestStackdnsdomainrestapiproxy3260E5C6,
        MyTestStackdnsdomainMyTestStackdnsdomainrestapiANY413B061D,
      ],
      Properties: {
        Description: api Service API Gateway,
        RestApiId: {
          Ref: MyTestStackdnsdomainMyTestStackdnsdomainrestapiF4C3ABA3,
        },
      },
      Type: AWS::ApiGateway::Deployment,
    },
    MyTestStackdnsdomainMyTestStackdnsdomainrestapiDeploymentStageprod1A061321: {
      DependsOn: [
        MyTestStackdnsdomainMyTestStackdnsdomainrestapiAccount8D836574,
      ],
      Properties: {
        DeploymentId: {
          Ref: MyTestStackdnsdomainMyTestStackdnsdomainrestapiDeployment2879F381befc6bceb2ba77e261b13d1c0830c668,
        },
        MethodSettings: [
          {
            DataTraceEnabled: false,
            HttpMethod: *,
            ResourcePath: /*,
            ThrottlingBurstLimit: 10,
            ThrottlingRateLimit: 10,
          },
        ],
        RestApiId: {
          Ref: MyTestStackdnsdomainMyTestStackdnsdomainrestapiF4C3ABA3,
        },
        StageName: prod,
      },
      Type: AWS::ApiGateway::Stage,
    },
    MyTestStackdnsdomainMyTestStackdnsdomainrestapiF4C3ABA3: {
      Properties: {
        Description: api Service API Gateway,
        Name: api RestAPI,
      },
      Type: AWS::ApiGateway::RestApi,
    },
    MyTestStackdnsdomainMyTestStackdnsdomainrestapiproxy3260E5C6: {
      Properties: {
        ParentId: {
          Fn::GetAtt: [
            MyTestStackdnsdomainMyTestStackdnsdomainrestapiF4C3ABA3,
            RootResourceId,
          ],
        },
        PathPart: {proxy+},
        RestApiId: {
          Ref: MyTestStackdnsdomainMyTestStackdnsdomainrestapiF4C3ABA3,
        },
      },
      Type: AWS::ApiGateway::Resource,
    },
    MyTestStackdnsdomainMyTestStackdnsdomainrestapiproxyANY74B2D563: {
      Properties: {
        AuthorizationType: NONE,
        HttpMethod: ANY,
        Integration: {
          IntegrationHttpMethod: POST,
          Type: AWS_PROXY,
          Uri: {
            Fn::Join: [
              ,
              [
                arn:,
                {
                  Ref: AWS::Partition,
                },
                :apigateway:,
                {
                  Ref: AWS::Region,
                },
                :lambda:path/2015-03-31/functions/,
                {
                  Fn::GetAtt: [
                    apiservicestacknestjsNodeJsLambdaA2C684BA,
                    Arn,
                  ],
                },
                /invocations,
              ],
            ],
          },
        },
        ResourceId: {
          Ref: MyTestStackdnsdomainMyTestStackdnsdomainrestapiproxy3260E5C6,
        },
        RestApiId: {
          Ref: MyTestStackdnsdomainMyTestStackdnsdomainrestapiF4C3ABA3,
        },
      },
      Type: AWS::ApiGateway::Method,
    },
    MyTestStackdnsdomainMyTestStackdnsdomainrestapiproxyANYApiPermissionMyTestStackMyTestStackdnsdomainMyTestStackdnsdomainrestapiE6EBAD29ANYproxyD28F0389: {
      Properties: {
        Action: lambda:InvokeFunction,
        FunctionName: {
          Fn::GetAtt: [
            apiservicestacknestjsNodeJsLambdaA2C684BA,
            Arn,
          ],
        },
        Principal: apigateway.amazonaws.com,
        SourceArn: {
          Fn::Join: [
            ,
            [
              arn:,
              {
                Ref: AWS::Partition,
              },
              :execute-api:,
              {
                Ref: AWS::Region,
              },
              :,
              {
                Ref: AWS::AccountId,
              },
              :,
              {
                Ref: MyTestStackdnsdomainMyTestStackdnsdomainrestapiF4C3ABA3,
              },
              /,
              {
                Ref: MyTestStackdnsdomainMyTestStackdnsdomainrestapiDeploymentStageprod1A061321,
              },
              /*/*,
            ],
          ],
        },
      },
      Type: AWS::Lambda::Permission,
    },
    MyTestStackdnsdomainMyTestStackdnsdomainrestapiproxyANYApiPermissionTestMyTestStackMyTestStackdnsdomainMyTestStackdnsdomainrestapiE6EBAD29ANYproxy132638AB: {
      Properties: {
        Action: lambda:InvokeFunction,
        FunctionName: {
          Fn::GetAtt: [
            apiservicestacknestjsNodeJsLambdaA2C684BA,
            Arn,
          ],
        },
        Principal: apigateway.amazonaws.com,
        SourceArn: {
          Fn::Join: [
            ,
            [
              arn:,
              {
                Ref: AWS::Partition,
              },
              :execute-api:,
              {
                Ref: AWS::Region,
              },
              :,
              {
                Ref: AWS::AccountId,
              },
              :,
              {
                Ref: MyTestStackdnsdomainMyTestStackdnsdomainrestapiF4C3ABA3,
              },
              /test-invoke-stage/*/*,
            ],
          ],
        },
      },
      Type: AWS::Lambda::Permission,
    },
    apiservicestacknestjsNodeJsLambdaA2C684BA: {
      DependsOn: [
        apiservicestacknestjsNodeJsLambdaServiceRole7CC8341F,
      ],
      Properties: {
        Code: {
          S3Bucket: {
            Fn::Sub: cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region},
          },
          S3Key: b8ba19c32be3f3a103e1b09b48ddc7264973a45b1bd00c108f1abb1a314e78cb.zip,
        },
        Environment: {
          Variables: {
            API_SVC_DOMAIN_NAME: {{resolve:ssm:/API_SVC_DOMAIN_NAME}},
            AWS_ACCOUNT_ID: {
              Ref: AWS::AccountId,
            },
            CHARACTER_SHEETS_SVC_DOMAIN_NAME: {{resolve:ssm:/CHARACTER_SHEETS_SVC_DOMAIN_NAME}},
            EMAIL_SERVICE_SVC_DOMAIN_NAME: {{resolve:ssm:/EMAIL_SERVICE_SVC_DOMAIN_NAME}},
            HTML_TO_PDF_SVC_DOMAIN_NAME: {{resolve:ssm:/HTML_TO_PDF_SVC_DOMAIN_NAME}},
            INSTANCES_SVC_DOMAIN_NAME: {{resolve:ssm:/INSTANCES_SVC_DOMAIN_NAME}},
            LUCK_BY_DICE_SVC_DOMAIN_NAME: {{resolve:ssm:/LUCK_BY_DICE_SVC_DOMAIN_NAME}},
            MONGO_DATABASE_PASSWORD: {
              Ref: mongodatabasepasswordssmParameter,
            },
            MONGO_DATABASE_URI: {
              Ref: mongodatabaseurissmParameter,
            },
            MONGO_DATABASE_USER: {
              Ref: mongodatabaseuserssmParameter,
            },
            PLAYER_ACHIEVEMENTS_SVC_DOMAIN_NAME: {{resolve:ssm:/PLAYER_ACHIEVEMENTS_SVC_DOMAIN_NAME}},
            STAGE_NAME: default,
            USER_SVC_DOMAIN_NAME: {{resolve:ssm:/USER_SVC_DOMAIN_NAME}},
          },
        },
        Handler: index.handler,
        Layers: [
          {
            Ref: lambdalayernestjslatestversionssmParameter,
          },
        ],
        MemorySize: 1024,
        Role: {
          Fn::GetAtt: [
            apiservicestacknestjsNodeJsLambdaServiceRole7CC8341F,
            Arn,
          ],
        },
        Runtime: nodejs18.x,
        Timeout: 30,
      },
      Type: AWS::Lambda::Function,
    },
    apiservicestacknestjsNodeJsLambdaLogRetention0873DFB6: {
      Properties: {
        LogGroupName: {
          Fn::Join: [
            ,
            [
              /aws/lambda/,
              {
                Ref: apiservicestacknestjsNodeJsLambdaA2C684BA,
              },
            ],
          ],
        },
        RetentionInDays: 1,
        ServiceToken: {
          Fn::GetAtt: [
            LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A,
            Arn,
          ],
        },
      },
      Type: Custom::LogRetention,
    },
    apiservicestacknestjsNodeJsLambdaServiceRole7CC8341F: {
      Properties: {
        AssumeRolePolicyDocument: {
          Statement: [
            {
              Action: sts:AssumeRole,
              Effect: Allow,
              Principal: {
                Service: lambda.amazonaws.com,
              },
            },
          ],
          Version: 2012-10-17,
        },
        ManagedPolicyArns: [
          {
            Fn::Join: [
              ,
              [
                arn:,
                {
                  Ref: AWS::Partition,
                },
                :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole,
              ],
            ],
          },
        ],
      },
      Type: AWS::IAM::Role,
    },
  },
  Rules: {
    CheckBootstrapVersion: {
      Assertions: [
        {
          Assert: {
            Fn::Not: [
              {
                Fn::Contains: [
                  [
                    1,
                    2,
                    3,
                    4,
                    5,
                  ],
                  {
                    Ref: BootstrapVersion,
                  },
                ],
              },
            ],
          },
          AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.,
        },
      ],
    },
  },
}
`;
