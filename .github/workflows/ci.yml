name: ci

on:
  pull_request:
    branches:
        - main
  push:
    branches:
      - "main"

jobs:
  build-rush:
    name: Rush build
    runs-on: ubuntu-latest
    needs: version
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Cache rush
        id: cache
        uses: actions/cache@vv3.2.2
        with:
          path: common/temp
          key: ${{ runner.os }}-build-branch-${{ hashFiles('common/config/rush/repo-state.json') }}
          restore-keys: |
            ${{ runner.os }}-build-pr-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Rush install
        if: steps.cache.outputs.cache-hit != 'true'
        run: node common/scripts/install-run-rush.js install

      - name: Build
        run: node common/scripts/install-run-rush.js build

      - name: Test
        run: node common/scripts/install-run-rush.js test


    # runs-on: ubuntu-latest
    # steps:
    #   - name: Checkout code
    #     uses: actions/checkout@v3

    #   - name: Set up Docker Buildx
    #     uses: docker/setup-buildx-action@v2

    #   - name: Login to Docker Hub
    #     uses: docker/login-action@v2
    #     with:
    #       username: ${{ secrets.DOCKERHUB_USERNAME }}
    #       password: ${{ secrets.DOCKERHUB_TOKEN }}

    #   - name: Build and push
    #     uses: docker/build-push-action@v3
    #     with:
    #       context: .
    #       target: test
    #       push: true
    #       tags: hxtree/keepers-cradle:latest
    #       cache-from: type=registry,ref=hxtree/keepers-cradle:latest
    #       cache-to: type=inline

    #   - name: Code standards
    #     run: docker compose run keepers-cradle rush lint:ci

    #   - name: Run unit tests generate coverage report
    #     run: docker compose run keepers-cradle rush test

      # - name: Submit code coverage
      #   uses: codacy/codacy-coverage-reporter-action@v1
      #   with:
      #     project-token: ${{ secrets.CODACY_API_TOKEN }}
      #     coverage-reports: tests/output/clover.xml

  # slack-notification:
  #   name: "Slack Notification"
  #   runs-on: ubuntu-latest
  #   if: always()
  #   needs:
  #     - composer-validate
  #     - docker-hub
  #   steps:
  #     - name: Send message to Slack API
  #       uses: archive/github-actions-slack@v2.0.0
  #       with:
  #         slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
  #         slack-channel: ${{ secrets.SLACK_CHANNEL_ID }}
  #         slack-text: |
  #           Event "${{ github.event_name }}" in "${{ github.repository }}" by @${{ github.actor }}
  #           Commit ${{ github.sha }}
  #           ${{ needs.composer-validate.result == 'success' && ':white_check_mark:' || ':no_entry_sign:' }} Composer Validate.
