"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Luck = exports.Active = void 0;
const DefaultLuckAdjustment_1 = require("./LuckAdjustment/DefaultLuckAdjustment");
var Active;
(function (Active) {
    Active[Active["enable"] = 0] = "enable";
    Active[Active["disable"] = 1] = "disable";
})(Active = exports.Active || (exports.Active = {}));
class Luck {
    constructor(value) {
        this._history = [];
        this._algorithm = new DefaultLuckAdjustment_1.DefaultLuckAdjustment();
        // disable luck if undefined
        if (value === undefined) {
            this._status = Active.disable;
            this._value = 0;
            return;
        }
        this._status = Active.enable;
        this._history.push(value);
        this._value = value;
    }
    set status(value) {
        this._status = value;
    }
    get status() {
        return this._status;
    }
    set algorithm(algorithm) {
        this._algorithm = algorithm;
    }
    get algorithm() {
        return this._algorithm;
    }
    update(rollPercent) {
        this.value += this._algorithm.adjustment(rollPercent);
    }
    get value() {
        return this._value;
    }
    set value(value) {
        this._history.push(value);
        this._value = value;
    }
    modify(number) {
        let newNumber = number;
        if (this._status === 0) {
            newNumber *= this.applicablePercent;
            return Math.round(newNumber);
        }
        return newNumber;
    }
    get applicablePercent() {
        const change = Math.random() * Math.abs(this._value) * 0.01;
        if (this._value < 0) {
            return 1 - change;
        }
        if (this._value === 0) {
            return 1;
        }
        return 1 + change;
    }
}
exports.Luck = Luck;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTHVjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9MdWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLGtGQUE2RTtBQUU3RSxJQUFZLE1BR1g7QUFIRCxXQUFZLE1BQU07SUFDaEIsdUNBQVUsQ0FBQTtJQUNWLHlDQUFXLENBQUE7QUFDYixDQUFDLEVBSFcsTUFBTSxHQUFOLGNBQU0sS0FBTixjQUFNLFFBR2pCO0FBY0QsTUFBYSxJQUFJO0lBU2YsWUFBbUIsS0FBYztRQUp6QixhQUFRLEdBQWtCLEVBQUUsQ0FBQztRQUtuQyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksNkNBQXFCLEVBQUUsQ0FBQztRQUU5Qyw0QkFBNEI7UUFDNUIsSUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQztZQUM5QixJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztZQUNoQixPQUFPO1NBQ1I7UUFFRCxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDN0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUVELElBQVcsTUFBTSxDQUFDLEtBQWE7UUFDN0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFDdkIsQ0FBQztJQUVELElBQVcsTUFBTTtRQUNmLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDO0lBRUQsSUFBVyxTQUFTLENBQUMsU0FBMEI7UUFDN0MsSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7SUFDOUIsQ0FBQztJQUVELElBQVcsU0FBUztRQUNsQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDekIsQ0FBQztJQUVNLE1BQU0sQ0FBQyxXQUFtQjtRQUMvQixJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFFRCxJQUFXLEtBQUs7UUFDZCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztJQUVELElBQVcsS0FBSyxDQUFDLEtBQWE7UUFDNUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUVNLE1BQU0sQ0FBQyxNQUFjO1FBQzFCLElBQUksU0FBUyxHQUFHLE1BQU0sQ0FBQztRQUN2QixJQUFJLElBQUksQ0FBQyxPQUFPLEtBQUssQ0FBQyxFQUFFO1lBQ3RCLFNBQVMsSUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUM7WUFFcEMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQzlCO1FBRUQsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztJQUVELElBQVcsaUJBQWlCO1FBQzFCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDNUQsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNuQixPQUFPLENBQUMsR0FBRyxNQUFNLENBQUM7U0FDbkI7UUFDRCxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3JCLE9BQU8sQ0FBQyxDQUFDO1NBQ1Y7UUFDRCxPQUFPLENBQUMsR0FBRyxNQUFNLENBQUM7SUFDcEIsQ0FBQztDQUNGO0FBMUVELG9CQTBFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SUx1Y2tBZGp1c3RtZW50fSBmcm9tICcuL0x1Y2tBZGp1c3RtZW50L0Fic3RyYWN0THVja0FkanVzdG1lbnQnO1xuaW1wb3J0IHtEZWZhdWx0THVja0FkanVzdG1lbnR9IGZyb20gJy4vTHVja0FkanVzdG1lbnQvRGVmYXVsdEx1Y2tBZGp1c3RtZW50JztcblxuZXhwb3J0IGVudW0gQWN0aXZlIHtcbiAgZW5hYmxlID0gMCxcbiAgZGlzYWJsZSA9IDEsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUx1Y2sge1xuICBnZXQgc3RhdHVzKCk6IEFjdGl2ZTtcbiAgc2V0IHN0YXR1cyh2YWx1ZTogQWN0aXZlKTtcbiAgc2V0IGFsZ29yaXRobShhbGdvcml0aG06IElMdWNrQWRqdXN0bWVudCk7XG4gIGdldCBhbGdvcml0aG0oKTogSUx1Y2tBZGp1c3RtZW50O1xuICB1cGRhdGUocm9sbFBlcmNlbnQ6IG51bWJlcik6IHZvaWQ7XG4gIGdldCB2YWx1ZSgpOiBudW1iZXI7XG4gIHNldCB2YWx1ZShsdWNrOiBudW1iZXIpO1xuICBtb2RpZnkobnVtYmVyOiBudW1iZXIpOiBudW1iZXI7XG4gIGdldCBhcHBsaWNhYmxlUGVyY2VudCgpOiBudW1iZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBMdWNrIGltcGxlbWVudHMgSUx1Y2sge1xuICBwcml2YXRlIF9zdGF0dXM6IEFjdGl2ZTtcblxuICBwcml2YXRlIF92YWx1ZTogbnVtYmVyO1xuXG4gIHByaXZhdGUgX2hpc3Rvcnk6IEFycmF5PG51bWJlcj4gPSBbXTtcblxuICBwcml2YXRlIF9hbGdvcml0aG06IElMdWNrQWRqdXN0bWVudDtcblxuICBwdWJsaWMgY29uc3RydWN0b3IodmFsdWU/OiBudW1iZXIpIHtcbiAgICB0aGlzLl9hbGdvcml0aG0gPSBuZXcgRGVmYXVsdEx1Y2tBZGp1c3RtZW50KCk7XG5cbiAgICAvLyBkaXNhYmxlIGx1Y2sgaWYgdW5kZWZpbmVkXG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuX3N0YXR1cyA9IEFjdGl2ZS5kaXNhYmxlO1xuICAgICAgdGhpcy5fdmFsdWUgPSAwO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX3N0YXR1cyA9IEFjdGl2ZS5lbmFibGU7XG4gICAgdGhpcy5faGlzdG9yeS5wdXNoKHZhbHVlKTtcbiAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xuICB9XG5cbiAgcHVibGljIHNldCBzdGF0dXModmFsdWU6IEFjdGl2ZSkge1xuICAgIHRoaXMuX3N0YXR1cyA9IHZhbHVlO1xuICB9XG5cbiAgcHVibGljIGdldCBzdGF0dXMoKTogQWN0aXZlIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhdHVzO1xuICB9XG5cbiAgcHVibGljIHNldCBhbGdvcml0aG0oYWxnb3JpdGhtOiBJTHVja0FkanVzdG1lbnQpIHtcbiAgICB0aGlzLl9hbGdvcml0aG0gPSBhbGdvcml0aG07XG4gIH1cblxuICBwdWJsaWMgZ2V0IGFsZ29yaXRobSgpOiBJTHVja0FkanVzdG1lbnQge1xuICAgIHJldHVybiB0aGlzLl9hbGdvcml0aG07XG4gIH1cblxuICBwdWJsaWMgdXBkYXRlKHJvbGxQZXJjZW50OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLnZhbHVlICs9IHRoaXMuX2FsZ29yaXRobS5hZGp1c3RtZW50KHJvbGxQZXJjZW50KTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgdmFsdWUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gIH1cblxuICBwdWJsaWMgc2V0IHZhbHVlKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9oaXN0b3J5LnB1c2godmFsdWUpO1xuICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XG4gIH1cblxuICBwdWJsaWMgbW9kaWZ5KG51bWJlcjogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBsZXQgbmV3TnVtYmVyID0gbnVtYmVyO1xuICAgIGlmICh0aGlzLl9zdGF0dXMgPT09IDApIHtcbiAgICAgIG5ld051bWJlciAqPSB0aGlzLmFwcGxpY2FibGVQZXJjZW50O1xuXG4gICAgICByZXR1cm4gTWF0aC5yb3VuZChuZXdOdW1iZXIpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXdOdW1iZXI7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGFwcGxpY2FibGVQZXJjZW50KCk6IG51bWJlciB7XG4gICAgY29uc3QgY2hhbmdlID0gTWF0aC5yYW5kb20oKSAqIE1hdGguYWJzKHRoaXMuX3ZhbHVlKSAqIDAuMDE7XG4gICAgaWYgKHRoaXMuX3ZhbHVlIDwgMCkge1xuICAgICAgcmV0dXJuIDEgLSBjaGFuZ2U7XG4gICAgfVxuICAgIGlmICh0aGlzLl92YWx1ZSA9PT0gMCkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIHJldHVybiAxICsgY2hhbmdlO1xuICB9XG59XG4iXX0=