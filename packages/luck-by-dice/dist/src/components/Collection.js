"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Collection = void 0;
const Dice_1 = require("./Dice");
const NotationCodec_1 = require("./NotationCodec");
/**
 * A Collection holds same sided Dice and can be configured to modify or multiply the Dice outcome.
 */
class Collection {
    // Sides should be a Dice object
    constructor(amount, sides, modifier = 0, multiplier = 1) {
        this._dice = [];
        if (amount === undefined) {
            throw new RangeError('A collection must have at least one dice.');
        }
        for (let i = 1; i <= amount; i++) {
            this._dice.push(new Dice_1.Dice(sides));
        }
        this._sides = sides;
        this._modifier = modifier;
        this._multiplier = multiplier;
        this._excess = 0;
    }
    allocateBonuses(amount) {
        this._dice.forEach((dice) => {
            amount = dice.allocateBonuses(amount);
        });
        return amount;
    }
    set modifier(value) {
        this._modifier = value;
    }
    get modifier() {
        return this._modifier;
    }
    set multiplier(value) {
        this._multiplier = value;
    }
    get multiplier() {
        return this._multiplier;
    }
    get sides() {
        return this._sides;
    }
    get dice() {
        return this._dice;
    }
    set dice(value) {
        this._dice = value;
    }
    get value() {
        let value = 0;
        for (const dice of this._dice) {
            if (dice.value === undefined) {
                continue;
            }
            value += dice.value;
        }
        return (value + this._modifier) * this._multiplier;
    }
    get bonus() {
        let bonus = 0;
        for (const dice of this._dice) {
            if (dice.bonus === undefined) {
                continue;
            }
            bonus += dice.bonus;
        }
        return bonus;
    }
    set bonus(value) {
        this._dice = this._shuffle(this._dice);
        // do while seems to make more sense here
        this._dice.forEach(function (part, index, dice) {
            if (value === 0) {
                dice[index].bonus = 0;
            }
            if (dice[index].value === undefined) {
                throw new RangeError('A bonus cannot only be applied to a rolled dice.');
            }
            const bonus = dice[index].max - dice[index].value;
            dice[index].bonus = bonus;
            if (value > bonus) {
                value -= bonus;
            }
            else {
                value = 0;
            }
        });
        this._excess = value;
    }
    get totalNatural() {
        let total = 0;
        this._dice.forEach(function (part, index, dice) {
            total += dice[index].total;
        });
        return total;
    }
    get total() {
        return (this.totalNatural + this.modifier) * this.multiplier;
    }
    get excess() {
        return this._excess;
    }
    get notation() {
        const notationCodec = new NotationCodec_1.NotationCodec();
        return notationCodec.encodeCollection(this);
    }
    get minOutcome() {
        return this.count();
    }
    get maxOutcome() {
        return this.count() * this._sides;
    }
    get minPotential() {
        return (this.minOutcome + this.modifier) * this.multiplier;
    }
    get maxPotential() {
        return (this.maxOutcome + this.modifier) * this.multiplier;
    }
    get outcomePercent() {
        return (this.value - this.count()) / (this.maxOutcome - this.count());
    }
    count() {
        return this._dice.length;
    }
    roll() {
        this._dice.forEach(function (part, index, dice) {
            dice[index].roll();
        });
        return this.total;
    }
    _shuffle(array) {
        let currentIndex = array.length, randomIndex;
        while (currentIndex !== 0) {
            randomIndex = Math.floor(Math.random() * currentIndex);
            currentIndex--;
            [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];
        }
        return array;
    }
}
exports.Collection = Collection;
//# sourceMappingURL=data:application/json;base64,