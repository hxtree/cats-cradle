"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TraezUthsha = exports.PennyKibbutz = exports.MeekuOni = exports.MalaceTsia = exports.LoomeeAngora = exports.GunterStonewell = exports.GaaliRuin = exports.FayeImago = exports.ArinothDiyath = void 0;
class ArinothDiyath {
}
exports.ArinothDiyath = ArinothDiyath;
class FayeImago {
}
exports.FayeImago = FayeImago;
class GaaliRuin {
}
exports.GaaliRuin = GaaliRuin;
class GunterStonewell {
}
exports.GunterStonewell = GunterStonewell;
class LoomeeAngora {
}
exports.LoomeeAngora = LoomeeAngora;
/**
 * Malace
 */
class MalaceTsia {
}
exports.MalaceTsia = MalaceTsia;
class MeekuOni {
}
exports.MeekuOni = MeekuOni;
class PennyKibbutz {
}
exports.PennyKibbutz = PennyKibbutz;
class TraezUthsha {
}
exports.TraezUthsha = TraezUthsha;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxheWVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2FyY2hldHlwZS9wbGF5ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBb0VBLE1BQWEsYUFBYTtDQUt6QjtBQUxELHNDQUtDO0FBRUQsTUFBYSxTQUFTO0NBaUJyQjtBQWpCRCw4QkFpQkM7QUFFRCxNQUFhLFNBQVM7Q0EwQnJCO0FBMUJELDhCQTBCQztBQUVELE1BQWEsZUFBZTtDQVMzQjtBQVRELDBDQVNDO0FBRUQsTUFBYSxZQUFZO0NBZXhCO0FBZkQsb0NBZUM7QUFFRDs7R0FFRztBQUNILE1BQWEsVUFBVTtDQXFCdEI7QUFyQkQsZ0NBcUJDO0FBRUQsTUFBYSxRQUFRO0NBcUJwQjtBQXJCRCw0QkFxQkM7QUFFRCxNQUFhLFlBQVk7Q0FrQnhCO0FBbEJELG9DQWtCQztBQUVELE1BQWEsV0FBVztDQVV2QjtBQVZELGtDQVVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTdGF0dXNFZmZlY3R9IGZyb20gJy4uL2NvbXBvbmVudC9zdGF0dXMuZWZmZWN0JztcbmltcG9ydCB7RHJpdmUsIExpZmUsIFNwaXJpdH0gZnJvbSAnLi4vY29tcG9uZW50L2dhdWdlcyc7XG5pbXBvcnQge1N0YXRzfSBmcm9tICcuLi9jb21wb25lbnQvc3RhdHMnO1xuaW1wb3J0IHtFZmZlY3QsIE9wZXJhdG9yLCBUcmFpdH0gZnJvbSAnLi4vY29tcG9uZW50L3RyYWl0JztcbmltcG9ydCB7VG9rZW59IGZyb20gJy4uL2NvbXBvbmVudC90b2tlbi5nZWFyJztcbmltcG9ydCB7XG4gIEFzc2Fzc2luLFxuICBCYXNlRGlzY2lwbGluZSxcbiAgQ2hlZXJsZWFkZXIsXG4gIENvbW1hbmRlcixcbiAgQ29vayxcbiAgR2F1cmQsXG4gIEhlYWxlcixcbiAgSGVybyxcbiAgSGlzdG9yaWFuLFxuICBLbmlnaHQsXG4gIE1hZ2ksXG4gIE1hZ2lCbGFjayxcbiAgTWFnaUJsdWUsXG4gIE1hZ2lCcm93bixcbiAgTWFnaUdyZWVuLFxuICBNYWdpUGluayxcbiAgTWFnaVB1cnBsZSxcbiAgTWFnaVdoaXRlLFxuICBNYWdpWWVsbG93LFxuICBNZWNoYW5pYyxcbiAgUm91Z2UsXG4gIFJveWFsdHksXG4gIFNjb3V0LFxuICBTb2xpZGVyLFxuICBTdW1tb25lcixcbiAgVGhpZWYsXG4gIFdhcnJpb3IsXG4gIFhTb2xpZGVyLFxufSBmcm9tICcuLi9jb21wb25lbnQvZGlzY2lwbGluZSc7XG5pbXBvcnQge1xuICBPZmZpY2Vyc1VuaWZvcm0sXG4gIE91dGZpdCxcbiAgVFNoaXJ0QW5kSmVhbnMsXG59IGZyb20gJy4uL2NvbXBvbmVudC9vdXRmaXQuZ2Vhcic7XG5pbXBvcnQge0dlYXJTbG90fSBmcm9tICcuLi9jb21wb25lbnQvZ2Vhcic7XG5pbXBvcnQge0lBcmNoZXR5cGV9IGZyb20gJy4vYXJjaGV0eXBlLmludGVyZmFjZSc7XG5pbXBvcnQge0VmZmVjdFRhZ30gZnJvbSAnLi4vY29tcG9uZW50L3RhZy5lZmZlY3QnO1xuXG4vKipcbiAqIEEgY2hhcmFjdGVyIHRoYXQgY2FuIGJlIHBsYXllZFxuICogdmFsdWVzIGFyZSByZWxhdGl2ZSB0byBwbGF5ZXIgaW5zdGFuY2VcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQbGF5ZXJDaGFyYWN0ZXIgZXh0ZW5kcyBJQXJjaGV0eXBlIHtcbiAgZmlyc3ROYW1lOiBzdHJpbmc7XG4gIGxhc3ROYW1lOiBzdHJpbmc7XG4gIGJhY2tzdG9yeTogc3RyaW5nO1xuICBleHBlcmllbmNlPzogbnVtYmVyO1xuXG4gIC8vIHRoZXNlIHNlZW0gbW9yZSBsaWtlIHRoZXkgbG9hZGVkIG9yIGRldGVybWluZWQgZm9yIHBsYXllciBjaGFyYWN0ZXJzXG4gIGxpZmU/OiBMaWZlO1xuICBkcml2ZT86IERyaXZlO1xuICBzcGlyaXQ/OiBTcGlyaXQ7XG4gIHN0YXRzPzogU3RhdHM7XG5cbiAgdHJhaXRzPzogVHJhaXRbXTtcbiAgc3RhdHVzRWZmZWN0cz86IFN0YXR1c0VmZmVjdFtdO1xuICB0b2tlbj86IFRva2VuO1xuICBwb3RlbnRpYWxEaXNjaXBsaW5lcz86IEFycmF5PEJhc2VEaXNjaXBsaW5lPjtcbiAgcG90ZW50aWFsT3V0Zml0cz86IEFycmF5PE91dGZpdD47XG4gIHBvdGVudGlhbEdlYXRTbG90cz86IEFycmF5PEdlYXJTbG90Pjtcbn1cblxuZXhwb3J0IGNsYXNzIEFyaW5vdGhEaXlhdGggaW1wbGVtZW50cyBQbGF5ZXJDaGFyYWN0ZXIge1xuICBmaXJzdE5hbWU6ICdBcmlub3RoJztcbiAgbGFzdE5hbWU6ICdEaXlhdGgnO1xuICBiYWNrc3Rvcnk6ICcnO1xuICBwb3RlbnRpYWxEaXNjaXBsaW5lczogW107XG59XG5cbmV4cG9ydCBjbGFzcyBGYXllSW1hZ28gaW1wbGVtZW50cyBQbGF5ZXJDaGFyYWN0ZXIge1xuICBmaXJzdE5hbWU6ICdGYXllJztcbiAgbGFzdE5hbWU6ICdJbWFnbyc7XG4gIGJhY2tzdG9yeTogJ0EgeW91bmcgZ2lybCB3aG8gd2VpbGRzIG1hZ2ljIGFuZCBzdHVkaWVzIGhpc3RvcnknO1xuICBwb3RlbnRpYWxEaXNjaXBsaW5lczogW1xuICAgIC8vIFdpemFyZCxcbiAgICBIaXN0b3JpYW4sXG4gICAgTWFnaSxcbiAgICBNYWdpQmxhY2ssXG4gICAgTWFnaUJsdWUsXG4gICAgTWFnaUJyb3duLFxuICAgIE1hZ2lHcmVlbixcbiAgICBNYWdpUGluayxcbiAgICBNYWdpUHVycGxlLFxuICAgIE1hZ2lXaGl0ZSxcbiAgICBNYWdpWWVsbG93LFxuICBdO1xufVxuXG5leHBvcnQgY2xhc3MgR2FhbGlSdWluIGltcGxlbWVudHMgUGxheWVyQ2hhcmFjdGVyIHtcbiAgZmlyc3ROYW1lOiAnR2FhbGknO1xuICBsYXN0TmFtZTogJ1J1aW4nO1xuICBiYWNrc3Rvcnk6ICdBIHByaW5jZSB3aXRoIGxpdHRsZSBpbnRlcmVzdCBpbiBiZWNvbWluZyBraW5nLiBJbnN0ZWFkLCBoZSBsaXZlcyBmb3IgdGVzdGluZyBoaXMgc3dvcmQgaW4gcmF3IGRhbmdlci4nO1xuICBwb3RlbnRpYWxEaXNjaXBsaW5lczogW1xuICAgIC8vIEJhcmQsXG4gICAgLy8gRHVlbGlzdCxcbiAgICBLbmlnaHQsXG4gICAgLy8gUnVuZUtpbmcsXG4gICAgUm95YWx0eSxcbiAgICAvLyAtIE5vYmVsXG4gICAgLy8gLSBEdWtlXG4gICAgLy8gLSBLaW5nXG4gICAgLy8gSGVyb1xuICAgIC8vIEtpbmdcbiAgICBXYXJyaW9yLFxuICBdO1xuICB0cmFpdHM6IFtcbiAgICB7XG4gICAgICAvLyBpbm5hdGUgcHJvY2llbmN5IHdpdGggc3dvcmRcbiAgICAgIHRhZzogRWZmZWN0VGFnLlNXT1JEO1xuICAgICAgbW9kaWZpZXI6IEVmZmVjdC5SRVNJU1Q7XG4gICAgICBxdWFudGl0eTogMC41O1xuICAgICAgb3BlcmF0b3I6IE9wZXJhdG9yLkRJVklERTtcbiAgICB9LFxuICBdO1xufVxuXG5leHBvcnQgY2xhc3MgR3VudGVyU3RvbmV3ZWxsIGltcGxlbWVudHMgUGxheWVyQ2hhcmFjdGVyIHtcbiAgZmlyc3ROYW1lOiAnR3VudGVyJztcbiAgbGFzdE5hbWU6ICdTdG9uZXdlbGwnO1xuICBiYWNrc3Rvcnk6ICdBIHNvbGlkZXIgZm9yIGxpZmUnO1xuICBwb3RlbnRpYWxEaXNjaXBsaW5lczogW1xuICAgIEdhdXJkLFxuICAgIC8vICBCb2R5QnVpbGRlcixcbiAgICBDb21tYW5kZXIsXG4gIF07XG59XG5cbmV4cG9ydCBjbGFzcyBMb29tZWVBbmdvcmEgaW1wbGVtZW50cyBQbGF5ZXJDaGFyYWN0ZXIge1xuICBmaXJzdE5hbWU6ICdMb29tZWUnO1xuICBsYXN0TmFtZTogJ0FuZ29yYSc7XG4gIGJhY2tzdG9yeTogJ0EgZ2lybCBjcmVhdGVkIHdoZW4gdGhlIFNvbmcgTWFpZGVuIGxlZnQgaGVyIHBvc3QgdG8gYmVjb21lIGh1bWFuLic7XG4gIHN5bWJvbGl6ZXM6ICdUaGUgS2VlcGVyIG9mIEhlYXJ0JztcbiAgYWZmaWxpYXRpb246IFsnVGhlIEtlZXBlciddO1xuICBwb3RlbnRpYWxEaXNjaXBsaW5lczogW1xuICAgIENoZWVybGVhZGVyLFxuICAgIC8vIE1haWRlbixcbiAgICAvLyBLZWVwZXIsXG4gICAgQ29vayxcbiAgICBIZWFsZXIsXG4gICAgLy8gU2FnZSxcbiAgICAvLyBHdWFyZGlhbicgLy8gb21lZ2EgY2xhc3NcbiAgXTtcbn1cblxuLyoqXG4gKiBNYWxhY2VcbiAqL1xuZXhwb3J0IGNsYXNzIE1hbGFjZVRzaWEgaW1wbGVtZW50cyBQbGF5ZXJDaGFyYWN0ZXIge1xuICBmaXJzdE5hbWU6ICdNYWxhY2UnO1xuICBsYXN0TmFtZTogJ1RzaWEnO1xuICBiYWNrc3Rvcnk6ICd3YXMgdXNlZCBhcyBhIHNjYXJpZmljZSBmb3IgaGlzIHBlb3BsZSB0byBob2xkIGRlbW9ucyBieSBzZXdpbmcgdGhlbSB0byBoaXMgc2tpbic7XG4gIHBvdGVudGlhbERpc2NpcGxpbmVzOiBbXG4gICAgLy8gR3ltbmFzdCxcbiAgICAvLyBQb3NzZXNzZWQsXG4gICAgU2NvdXQsXG4gICAgLy8gT3Vyb2Jvcm9zLFxuICAgIFN1bW1vbmVyLFxuICAgIFJvdWdlLFxuICBdO1xuICB0cmFpdHM6IFtcbiAgICB7XG4gICAgICAvLyBDYW4gc2luZ2xlIGhhbmRlZGx5IGNhcnJ5IHBhcnR5IHRocm91Z2ggZm9lcyBvZiBkYXJrbmVzcyBkdWUgdG8gaGlzIGRhcmtuZXNzIGhlYWxpbmcgdHJhaXQuXG4gICAgICB0YWc6IEVmZmVjdFRhZy5EQVJLTkVTUztcbiAgICAgIG1vZGlmaWVyOiBFZmZlY3QuSEVBTDtcbiAgICAgIHBlcmNlbnQ6IDgwO1xuICAgIH0sXG4gIF07XG4gIHBvdGVudGlhbE91dGZpdHM6IFtPZmZpY2Vyc1VuaWZvcm1dO1xufVxuXG5leHBvcnQgY2xhc3MgTWVla3VPbmkgaW1wbGVtZW50cyBQbGF5ZXJDaGFyYWN0ZXIge1xuICBmaXJzdE5hbWU6ICdNZWVrdSc7XG4gIGxhc3ROYW1lOiAnT25pJztcbiAgYmFja3N0b3J5OiAnJztcbiAgcG90ZW50aWFsRGlzY2lwbGluZXM6IFtcbiAgICBTb2xpZGVyLFxuICAgIFhTb2xpZGVyLFxuICAgIC8vIEJlcnNlcmtlcixcbiAgICAvLyBPbmksXG4gICAgSGVybyxcbiAgXTtcbiAgdHJhaXRzOiBbXG4gICAge1xuICAgICAgLy8gbGVhcm5zIHF1aWNrbHlcbiAgICAgIHRhZzogRWZmZWN0VGFnLkVYUEVSSUVOQ0U7XG4gICAgICBtb2RpZmllcjogRWZmZWN0LldFQUs7XG4gICAgICBxdWFudGl0eTogMS4yO1xuICAgICAgb3BlcmF0b3I6IE9wZXJhdG9yLk1VTFRJUExZO1xuICAgIH0sXG4gIF07XG4gIHBvdGVudGlhbE91dGZpdHM6IFtUU2hpcnRBbmRKZWFuc107XG59XG5cbmV4cG9ydCBjbGFzcyBQZW5ueUtpYmJ1dHogaW1wbGVtZW50cyBQbGF5ZXJDaGFyYWN0ZXIge1xuICBmaXJzdE5hbWU6ICdQZW5ueSc7XG4gIGxhc3ROYW1lOiAnS2liYnV0eic7XG4gIGJhY2tzdG9yeTogJyc7XG4gIHBvdGVudGlhbERpc2NpcGxpbmVzOiBbXG4gICAgLy8gTmluamEsXG4gICAgQXNzYXNzaW4sXG4gICAgLy8gQW1iZXJBc3Nhc3NpbixcbiAgICAvLyBFbGl0ZUFzc2FzaW4sXG4gICAgVGhpZWYsXG4gIF07XG4gIHRyYWl0czogW1xuICAgIHtcbiAgICAgIC8vIGhhcyBidWlsdCB1cCB0b2xlcmFuY2UgdG8gcG9pc29uc1xuICAgICAgdGFnOiBFZmZlY3RUYWcuUE9JU09OO1xuICAgICAgbW9kaWZpZXI6IEVmZmVjdC5JTU1VTkU7XG4gICAgfSxcbiAgXTtcbn1cblxuZXhwb3J0IGNsYXNzIFRyYWV6VXRoc2hhIGltcGxlbWVudHMgUGxheWVyQ2hhcmFjdGVyIHtcbiAgZmlyc3ROYW1lOiAnVHJhZXonO1xuICBsYXN0TmFtZTogJ1V0aHNoYSc7XG4gIGJhY2tzdG9yeTogJyc7XG4gIHBvdGVudGlhbERpc2NpcGxpbmVzOiBbXG4gICAgLy8gRW5naW5lZXIsXG4gICAgTWVjaGFuaWMsXG4gICAgLy8gTGlnaHRlbmluZ1dhcnJpb3IsXG4gICAgLy8gUmViZWwsXG4gIF07XG59XG4iXX0=