"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Drain = exports.Leech = exports.Absorb = exports.Frost = exports.Charm = exports.Chill = exports.Haste = exports.Slow = exports.Stop = exports.Darkness = exports.Desolate = exports.Light = exports.Telepathy = exports.Meteor = exports.Flare = exports.Reflect = exports.Boom = exports.Barrier = exports.Cure = exports.Revive = exports.Heal = exports.Aqua = exports.Tsunami = exports.Cyclone = exports.Gale = exports.Gust = exports.Twister = exports.Inferno = exports.Fireball = exports.Blizzard = exports.Landslide = exports.Quake = exports.Shock = exports.Gravity = exports.SpellSkill = exports.SpellSkillList = void 0;
/**
 * Spells are actions that are casted by magic users.
 * Spells feature a prefix that differs based on skill level.
 * This indicates to astute players the magic rankings of their adversary
 *
 * | min | max | rank   | example        |
 * | --  | --  | --     | --             |
 * |  0  |   3 | Normal | Fireball       |
 * |  3  |   6 | Mega   | Mega Fireball  |
 * |  6  |   9 | Giga   | Giga Fireball  |
 * |  9  |  12 | Tera   | Tera Fireball  |
 * | 12  |  15 | Omega  | Omega Fireball |
 */
var SpellSkillList;
(function (SpellSkillList) {
    SpellSkillList[SpellSkillList["Gravity"] = 0] = "Gravity";
    SpellSkillList[SpellSkillList["Shock"] = 1] = "Shock";
    SpellSkillList[SpellSkillList["Quake"] = 2] = "Quake";
    SpellSkillList[SpellSkillList["Landslide"] = 3] = "Landslide";
    SpellSkillList[SpellSkillList["Blizzard"] = 4] = "Blizzard";
    // todo add all
})(SpellSkillList = exports.SpellSkillList || (exports.SpellSkillList = {}));
class SpellSkill {
}
exports.SpellSkill = SpellSkill;
class Gravity extends SpellSkill {
}
exports.Gravity = Gravity;
class Shock extends SpellSkill {
}
exports.Shock = Shock;
class Quake extends SpellSkill {
}
exports.Quake = Quake;
class Landslide extends SpellSkill {
}
exports.Landslide = Landslide;
class Blizzard extends SpellSkill {
}
exports.Blizzard = Blizzard;
class Fireball extends SpellSkill {
}
exports.Fireball = Fireball;
class Inferno extends SpellSkill {
}
exports.Inferno = Inferno;
class Twister extends SpellSkill {
}
exports.Twister = Twister;
class Gust extends SpellSkill {
}
exports.Gust = Gust;
class Gale extends SpellSkill {
}
exports.Gale = Gale;
class Cyclone extends SpellSkill {
}
exports.Cyclone = Cyclone;
class Tsunami extends SpellSkill {
}
exports.Tsunami = Tsunami;
class Aqua extends SpellSkill {
}
exports.Aqua = Aqua;
class Heal extends SpellSkill {
}
exports.Heal = Heal;
class Revive extends SpellSkill {
}
exports.Revive = Revive;
class Cure extends SpellSkill {
}
exports.Cure = Cure;
class Barrier extends SpellSkill {
}
exports.Barrier = Barrier;
class Boom extends SpellSkill {
}
exports.Boom = Boom;
class Reflect extends SpellSkill {
}
exports.Reflect = Reflect;
class Flare extends SpellSkill {
}
exports.Flare = Flare;
class Meteor extends SpellSkill {
}
exports.Meteor = Meteor;
class Telepathy extends SpellSkill {
}
exports.Telepathy = Telepathy;
class Light extends SpellSkill {
}
exports.Light = Light;
class Desolate extends SpellSkill {
}
exports.Desolate = Desolate;
class Darkness extends SpellSkill {
}
exports.Darkness = Darkness;
class Stop extends SpellSkill {
}
exports.Stop = Stop;
class Slow extends SpellSkill {
}
exports.Slow = Slow;
class Haste extends SpellSkill {
}
exports.Haste = Haste;
class Chill extends SpellSkill {
}
exports.Chill = Chill;
class Charm extends SpellSkill {
}
exports.Charm = Charm;
class Frost extends SpellSkill {
}
exports.Frost = Frost;
class Absorb extends SpellSkill {
}
exports.Absorb = Absorb;
class Leech extends SpellSkill {
}
exports.Leech = Leech;
class Drain extends SpellSkill {
}
exports.Drain = Drain;
//# sourceMappingURL=data:application/json;base64,