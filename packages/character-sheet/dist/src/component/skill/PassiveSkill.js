"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Catcher = exports.GluttonousDesire = exports.EnviousOfCombat = exports.BloodLust = exports.SlothComposure = exports.GreedyIntent = exports.SenseBluff = exports.Bluff = exports.Concentration = exports.Intimidate = exports.EscapeArtist = exports.DualWeld = exports.PassiveSkillList = void 0;
var PassiveSkillList;
(function (PassiveSkillList) {
    PassiveSkillList["DUAL_WELD"] = "Dual Weld";
    PassiveSkillList["ESCAPE_ARTIST"] = "Escape Artist";
    PassiveSkillList["INTIMIDATE"] = "Intimidate";
    PassiveSkillList["CONCENTRATION"] = "Concentration";
    PassiveSkillList["BLUFF"] = "Bluff";
    PassiveSkillList["SENSE_BLUFF"] = "Sense Bluff";
    PassiveSkillList["GREEDY_INTENT"] = "Greedy Intent";
    PassiveSkillList["SLOTH_COMPOSURE"] = "Sloth Composure";
    PassiveSkillList["BLOOD_LUST"] = "Blood Lust";
    PassiveSkillList["ENVIOUS_OF_COMBAT"] = "Envious of Combat";
    PassiveSkillList["GLUTTONOUS_DESIRE"] = "Gluttonous Desire";
    PassiveSkillList["CATCHER"] = "Catcher";
})(PassiveSkillList = exports.PassiveSkillList || (exports.PassiveSkillList = {}));
class DualWeld {
}
exports.DualWeld = DualWeld;
class EscapeArtist {
}
exports.EscapeArtist = EscapeArtist;
class Intimidate {
}
exports.Intimidate = Intimidate;
class Concentration {
}
exports.Concentration = Concentration;
class Bluff {
}
exports.Bluff = Bluff;
class SenseBluff {
}
exports.SenseBluff = SenseBluff;
class GreedyIntent {
}
exports.GreedyIntent = GreedyIntent;
class SlothComposure {
}
exports.SlothComposure = SlothComposure;
class BloodLust {
}
exports.BloodLust = BloodLust;
class EnviousOfCombat {
}
exports.EnviousOfCombat = EnviousOfCombat;
class GluttonousDesire {
}
exports.GluttonousDesire = GluttonousDesire;
class Catcher {
}
exports.Catcher = Catcher;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFzc2l2ZVNraWxsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudC9za2lsbC9QYXNzaXZlU2tpbGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsSUFBWSxnQkFhWDtBQWJELFdBQVksZ0JBQWdCO0lBQzFCLDJDQUF1QixDQUFBO0lBQ3ZCLG1EQUErQixDQUFBO0lBQy9CLDZDQUF5QixDQUFBO0lBQ3pCLG1EQUErQixDQUFBO0lBQy9CLG1DQUFlLENBQUE7SUFDZiwrQ0FBMkIsQ0FBQTtJQUMzQixtREFBK0IsQ0FBQTtJQUMvQix1REFBbUMsQ0FBQTtJQUNuQyw2Q0FBeUIsQ0FBQTtJQUN6QiwyREFBdUMsQ0FBQTtJQUN2QywyREFBdUMsQ0FBQTtJQUN2Qyx1Q0FBbUIsQ0FBQTtBQUNyQixDQUFDLEVBYlcsZ0JBQWdCLEdBQWhCLHdCQUFnQixLQUFoQix3QkFBZ0IsUUFhM0I7QUFRRCxNQUFhLFFBQVE7Q0FJcEI7QUFKRCw0QkFJQztBQUVELE1BQWEsWUFBWTtDQUd4QjtBQUhELG9DQUdDO0FBRUQsTUFBYSxVQUFVO0NBR3RCO0FBSEQsZ0NBR0M7QUFFRCxNQUFhLGFBQWE7Q0FHekI7QUFIRCxzQ0FHQztBQUVELE1BQWEsS0FBSztDQUdqQjtBQUhELHNCQUdDO0FBRUQsTUFBYSxVQUFVO0NBSXRCO0FBSkQsZ0NBSUM7QUFFRCxNQUFhLFlBQVk7Q0FJeEI7QUFKRCxvQ0FJQztBQUVELE1BQWEsY0FBYztDQUkxQjtBQUpELHdDQUlDO0FBRUQsTUFBYSxTQUFTO0NBSXJCO0FBSkQsOEJBSUM7QUFFRCxNQUFhLGVBQWU7Q0FJM0I7QUFKRCwwQ0FJQztBQUVELE1BQWEsZ0JBQWdCO0NBSTVCO0FBSkQsNENBSUM7QUFFRCxNQUFhLE9BQU87Q0FHbkI7QUFIRCwwQkFHQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QmFzZVNraWxsfSBmcm9tICcuL0Jhc2VTa2lsbCc7XG5cbmV4cG9ydCBlbnVtIFBhc3NpdmVTa2lsbExpc3Qge1xuICBEVUFMX1dFTEQgPSAnRHVhbCBXZWxkJyxcbiAgRVNDQVBFX0FSVElTVCA9ICdFc2NhcGUgQXJ0aXN0JyxcbiAgSU5USU1JREFURSA9ICdJbnRpbWlkYXRlJyxcbiAgQ09OQ0VOVFJBVElPTiA9ICdDb25jZW50cmF0aW9uJyxcbiAgQkxVRkYgPSAnQmx1ZmYnLFxuICBTRU5TRV9CTFVGRiA9ICdTZW5zZSBCbHVmZicsXG4gIEdSRUVEWV9JTlRFTlQgPSAnR3JlZWR5IEludGVudCcsXG4gIFNMT1RIX0NPTVBPU1VSRSA9ICdTbG90aCBDb21wb3N1cmUnLFxuICBCTE9PRF9MVVNUID0gJ0Jsb29kIEx1c3QnLFxuICBFTlZJT1VTX09GX0NPTUJBVCA9ICdFbnZpb3VzIG9mIENvbWJhdCcsXG4gIEdMVVRUT05PVVNfREVTSVJFID0gJ0dsdXR0b25vdXMgRGVzaXJlJyxcbiAgQ0FUQ0hFUiA9ICdDYXRjaGVyJyxcbn1cblxuLyoqXG4gKiBQYXNzaXZlU2tpbGwgYXJlIGFiaWxpdGllcyB0aGF0IGFyZSBub3QgYWN0aW9uc1xuICogVGhleSBhcmUga2luZCBvZiBsaWtlIG5hdHVyYWwgYWN0aW9ucyBhcyB0aGV5IGRvIG5vdCBuZWVkIHRvIGJlIGNhbGxlZCB0byBiZSB1c2VkLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFBhc3NpdmVTa2lsbCBleHRlbmRzIEJhc2VTa2lsbCB7fVxuXG5leHBvcnQgY2xhc3MgRHVhbFdlbGQgaW1wbGVtZW50cyBQYXNzaXZlU2tpbGwge1xuICBuYW1lOiBQYXNzaXZlU2tpbGxMaXN0LkRVQUxfV0VMRDtcbiAgZGVzY3JpcHRpb246ICdDYW4gdXNlIHR3byBvbmUgaGFuZGVkIHdlYXBvbnMgYXQgb25jZS4nO1xuICAvLyBcIiBCb3RoIG1hbGFjZSBhbmQgcGVubnkgY2FuIGxlYXJuIHRoaXMuXG59XG5cbmV4cG9ydCBjbGFzcyBFc2NhcGVBcnRpc3QgaW1wbGVtZW50cyBQYXNzaXZlU2tpbGwge1xuICBuYW1lOiBQYXNzaXZlU2tpbGxMaXN0LkVTQ0FQRV9BUlRJU1Q7XG4gIGRlc2NyaXB0aW9uOiAnTWFrZXMgaXQgZWFzaWVyIHRvIHJ1biBhd2F5IGZyb20gYWdncmVzaXZlIHRhcmdldHMnO1xufVxuXG5leHBvcnQgY2xhc3MgSW50aW1pZGF0ZSBpbXBsZW1lbnRzIFBhc3NpdmVTa2lsbCB7XG4gIG5hbWU6IFBhc3NpdmVTa2lsbExpc3QuSU5USU1JREFURTtcbiAgZGVzY3JpcHRpb246ICdDYXVzZXMgZmVhciBpbiBlbmVteSc7XG59XG5cbmV4cG9ydCBjbGFzcyBDb25jZW50cmF0aW9uIGltcGxlbWVudHMgUGFzc2l2ZVNraWxsIHtcbiAgbmFtZTogUGFzc2l2ZVNraWxsTGlzdC5DT05DRU5UUkFUSU9OO1xuICBkZXNjcmlwdGlvbjogJ1N0YXkgZm9jdXNlZCc7XG59XG5cbmV4cG9ydCBjbGFzcyBCbHVmZiBpbXBsZW1lbnRzIFBhc3NpdmVTa2lsbCB7XG4gIG5hbWU6IFBhc3NpdmVTa2lsbExpc3QuQkxVRkY7XG4gIGRlc2NyaXB0aW9uOiAnVGVsbCBhIGxpZSB3aXRob3V0IGJlaW5nIGNhdWdodCc7XG59XG5cbmV4cG9ydCBjbGFzcyBTZW5zZUJsdWZmIGltcGxlbWVudHMgUGFzc2l2ZVNraWxsIHtcbiAgbmFtZTogUGFzc2l2ZVNraWxsTGlzdC5TRU5TRV9CTFVGRjtcbiAgZGVzY3JpcHRpb246ICdEZXRlY3QgaWYgYSBsaWUgaXMgYmVpbmcgdG9sZCc7XG4gIC8vIGlmIGNoYXJhY3RlciBiZWF0cyBibHVmZiBjaGVjaywgYSBsaXR0bGUgaWNvbiBvbiB0aGUgc2NyZWVuIHdpbGwgdGVsbCBpZiBzb21lb25lIGlzIHRyeWluZyB0byBibHVmZiBwYXJ0eVxufVxuXG5leHBvcnQgY2xhc3MgR3JlZWR5SW50ZW50IGltcGxlbWVudHMgUGFzc2l2ZVNraWxsIHtcbiAgbmFtZTogUGFzc2l2ZVNraWxsTGlzdC5HUkVFRFlfSU5URU5UO1xuICBkZXNjcmlwdGlvbjogJ0dhaW4gNSUgbW9yZSBleHBlcmllbmNlIHRoYW4gcGFydHknO1xuICAvLyBlYXJuZWQgZnJvbSBkZWZlYXRpbmcgR3JlZWRcbn1cblxuZXhwb3J0IGNsYXNzIFNsb3RoQ29tcG9zdXJlIGltcGxlbWVudHMgUGFzc2l2ZVNraWxsIHtcbiAgbmFtZTogUGFzc2l2ZVNraWxsTGlzdC5TTE9USF9DT01QT1NVUkU7XG4gIGRlc2NyaXB0aW9uOiAnQmxvd3MgdGFrZW4gd2hlbiBub3QgZG9pbmcgYWN0aW9uIGFyZSBoYWx2ZWQnO1xuICAvLyBlYXJuZWQgZnJvbSBkZWZlYXRpbmcgTGF3em9uXG59XG5cbmV4cG9ydCBjbGFzcyBCbG9vZEx1c3QgaW1wbGVtZW50cyBQYXNzaXZlU2tpbGwge1xuICBuYW1lOiBQYXNzaXZlU2tpbGxMaXN0LkJMT09EX0xVU1Q7XG4gIGRlc2NyaXB0aW9uOiAnU3BlZWQgaW4gYmF0dGxlIGluY3JlYXNlZCc7XG4gIC8vIGVhcm5lZCBmcm9tIGRlZmVhdGluZyBMdXN0XG59XG5cbmV4cG9ydCBjbGFzcyBFbnZpb3VzT2ZDb21iYXQgaW1wbGVtZW50cyBQYXNzaXZlU2tpbGwge1xuICBuYW1lOiBQYXNzaXZlU2tpbGxMaXN0LkVOVklPVVNfT0ZfQ09NQkFUO1xuICBkZXNjcmlwdGlvbjogJ0dhaW4gcmFnZSBmcm9tIHdhdGNoaW5nIGNvbWJhdCc7XG4gIC8vIGVhcm5lZCBmcm9tIGRlZmVhdGluZyBFbnZ5XG59XG5cbmV4cG9ydCBjbGFzcyBHbHV0dG9ub3VzRGVzaXJlIGltcGxlbWVudHMgUGFzc2l2ZVNraWxsIHtcbiAgbmFtZTogUGFzc2l2ZVNraWxsTGlzdC5HTFVUVE9OT1VTX0RFU0lSRTtcbiAgZGVzY3JpcHRpb246ICdDb21zdW1lciBmb29kIGl0ZW1zIHR3aWNlIGFzIGZhc3QnO1xuICAvLyBlYXJuZWQgZnJvbSBkZWZlYXRpbmcgR2x1dG9ueVxufVxuXG5leHBvcnQgY2xhc3MgQ2F0Y2hlciBpbXBsZW1lbnRzIFBhc3NpdmVTa2lsbCB7XG4gIG5hbWU6IFBhc3NpdmVTa2lsbExpc3QuQ0FUQ0hFUjtcbiAgZGVzY3JpcHRpb246ICdSZWNlaXZlIGJvbnVzIHdoZW4gY2F0Y2hpbmcgaXRlbXMnO1xufVxuIl19