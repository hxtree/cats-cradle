"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Drain = exports.Leech = exports.Absorb = exports.Frost = exports.Charm = exports.Chill = exports.Haste = exports.Slow = exports.Stop = exports.Darkness = exports.Desolate = exports.Light = exports.Telepathy = exports.Meteor = exports.Flare = exports.Reflect = exports.Boom = exports.Barrier = exports.Cure = exports.Revive = exports.Heal = exports.Aqua = exports.Tsunami = exports.Cyclone = exports.Gale = exports.Gust = exports.Twister = exports.Inferno = exports.Fireball = exports.Blizzard = exports.Landslide = exports.Quake = exports.Shock = exports.Gravity = exports.SpellSkill = exports.SpellSkillList = void 0;
/**
 * Spells are actions that are casted by magic users.
 * Spells feature a prefix that differs based on skill level.
 * This indicates to astute players the magic rankings of their adversary
 *
 * | min | max | rank   | example        |
 * | --  | --  | --     | --             |
 * |  0  |   3 | Normal | Fireball       |
 * |  3  |   6 | Mega   | Mega Fireball  |
 * |  6  |   9 | Giga   | Giga Fireball  |
 * |  9  |  12 | Tera   | Tera Fireball  |
 * | 12  |  15 | Omega  | Omega Fireball |
 */
var SpellSkillList;
(function (SpellSkillList) {
    SpellSkillList[SpellSkillList["Gravity"] = 0] = "Gravity";
    SpellSkillList[SpellSkillList["Shock"] = 1] = "Shock";
    SpellSkillList[SpellSkillList["Quake"] = 2] = "Quake";
    SpellSkillList[SpellSkillList["Landslide"] = 3] = "Landslide";
    SpellSkillList[SpellSkillList["Blizzard"] = 4] = "Blizzard";
    // todo add all
})(SpellSkillList = exports.SpellSkillList || (exports.SpellSkillList = {}));
class SpellSkill {
}
exports.SpellSkill = SpellSkill;
class Gravity extends SpellSkill {
}
exports.Gravity = Gravity;
class Shock extends SpellSkill {
}
exports.Shock = Shock;
class Quake extends SpellSkill {
}
exports.Quake = Quake;
class Landslide extends SpellSkill {
}
exports.Landslide = Landslide;
class Blizzard extends SpellSkill {
}
exports.Blizzard = Blizzard;
class Fireball extends SpellSkill {
}
exports.Fireball = Fireball;
class Inferno extends SpellSkill {
}
exports.Inferno = Inferno;
class Twister extends SpellSkill {
}
exports.Twister = Twister;
class Gust extends SpellSkill {
}
exports.Gust = Gust;
class Gale extends SpellSkill {
}
exports.Gale = Gale;
class Cyclone extends SpellSkill {
}
exports.Cyclone = Cyclone;
class Tsunami extends SpellSkill {
}
exports.Tsunami = Tsunami;
class Aqua extends SpellSkill {
}
exports.Aqua = Aqua;
class Heal extends SpellSkill {
}
exports.Heal = Heal;
class Revive extends SpellSkill {
}
exports.Revive = Revive;
class Cure extends SpellSkill {
}
exports.Cure = Cure;
class Barrier extends SpellSkill {
}
exports.Barrier = Barrier;
class Boom extends SpellSkill {
}
exports.Boom = Boom;
class Reflect extends SpellSkill {
}
exports.Reflect = Reflect;
class Flare extends SpellSkill {
}
exports.Flare = Flare;
class Meteor extends SpellSkill {
}
exports.Meteor = Meteor;
class Telepathy extends SpellSkill {
}
exports.Telepathy = Telepathy;
class Light extends SpellSkill {
}
exports.Light = Light;
class Desolate extends SpellSkill {
}
exports.Desolate = Desolate;
class Darkness extends SpellSkill {
}
exports.Darkness = Darkness;
class Stop extends SpellSkill {
}
exports.Stop = Stop;
class Slow extends SpellSkill {
}
exports.Slow = Slow;
class Haste extends SpellSkill {
}
exports.Haste = Haste;
class Chill extends SpellSkill {
}
exports.Chill = Chill;
class Charm extends SpellSkill {
}
exports.Charm = Charm;
class Frost extends SpellSkill {
}
exports.Frost = Frost;
class Absorb extends SpellSkill {
}
exports.Absorb = Absorb;
class Leech extends SpellSkill {
}
exports.Leech = Leech;
class Drain extends SpellSkill {
}
exports.Drain = Drain;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3BlbGxTa2lsbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnQvc2tpbGwvU3BlbGxTa2lsbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFNQTs7Ozs7Ozs7Ozs7O0dBWUc7QUFFSCxJQUFZLGNBT1g7QUFQRCxXQUFZLGNBQWM7SUFDeEIseURBQVMsQ0FBQTtJQUNULHFEQUFPLENBQUE7SUFDUCxxREFBTyxDQUFBO0lBQ1AsNkRBQVcsQ0FBQTtJQUNYLDJEQUFVLENBQUE7SUFDVixlQUFlO0FBQ2pCLENBQUMsRUFQVyxjQUFjLEdBQWQsc0JBQWMsS0FBZCxzQkFBYyxRQU96QjtBQUVELE1BQXNCLFVBQVU7Q0FLL0I7QUFMRCxnQ0FLQztBQUVELE1BQWEsT0FBUSxTQUFRLFVBQVU7Q0FXdEM7QUFYRCwwQkFXQztBQUVELE1BQWEsS0FBTSxTQUFRLFVBQVU7Q0FRcEM7QUFSRCxzQkFRQztBQUVELE1BQWEsS0FBTSxTQUFRLFVBQVU7Q0FZcEM7QUFaRCxzQkFZQztBQUVELE1BQWEsU0FBVSxTQUFRLFVBQVU7Q0FTeEM7QUFURCw4QkFTQztBQUVELE1BQWEsUUFBUyxTQUFRLFVBQVU7Q0FxQnZDO0FBckJELDRCQXFCQztBQUVELE1BQWEsUUFBUyxTQUFRLFVBQVU7Q0FRdkM7QUFSRCw0QkFRQztBQUVELE1BQWEsT0FBUSxTQUFRLFVBQVU7Q0FRdEM7QUFSRCwwQkFRQztBQUVELE1BQWEsT0FBUSxTQUFRLFVBQVU7Q0FZdEM7QUFaRCwwQkFZQztBQUVELE1BQWEsSUFBSyxTQUFRLFVBQVU7Q0FZbkM7QUFaRCxvQkFZQztBQUVELE1BQWEsSUFBSyxTQUFRLFVBQVU7Q0FZbkM7QUFaRCxvQkFZQztBQUVELE1BQWEsT0FBUSxTQUFRLFVBQVU7Q0FZdEM7QUFaRCwwQkFZQztBQUVELE1BQWEsT0FBUSxTQUFRLFVBQVU7Q0FZdEM7QUFaRCwwQkFZQztBQUVELE1BQWEsSUFBSyxTQUFRLFVBQVU7Q0FZbkM7QUFaRCxvQkFZQztBQUVELE1BQWEsSUFBSyxTQUFRLFVBQVU7Q0FLbkM7QUFMRCxvQkFLQztBQUVELE1BQWEsTUFBTyxTQUFRLFVBQVU7Q0FLckM7QUFMRCx3QkFLQztBQUVELE1BQWEsSUFBSyxTQUFRLFVBQVU7Q0FVbkM7QUFWRCxvQkFVQztBQUVELE1BQWEsT0FBUSxTQUFRLFVBQVU7Q0FLdEM7QUFMRCwwQkFLQztBQUVELE1BQWEsSUFBSyxTQUFRLFVBQVU7Q0FPbkM7QUFQRCxvQkFPQztBQUVELE1BQWEsT0FBUSxTQUFRLFVBQVU7Q0FLdEM7QUFMRCwwQkFLQztBQUVELE1BQWEsS0FBTSxTQUFRLFVBQVU7Q0FRcEM7QUFSRCxzQkFRQztBQUVELE1BQWEsTUFBTyxTQUFRLFVBQVU7Q0FRckM7QUFSRCx3QkFRQztBQUVELE1BQWEsU0FBVSxTQUFRLFVBQVU7Q0FXeEM7QUFYRCw4QkFXQztBQUVELE1BQWEsS0FBTSxTQUFRLFVBQVU7Q0FPcEM7QUFQRCxzQkFPQztBQUVELE1BQWEsUUFBUyxTQUFRLFVBQVU7Q0FZdkM7QUFaRCw0QkFZQztBQUVELE1BQWEsUUFBUyxTQUFRLFVBQVU7Q0FXdkM7QUFYRCw0QkFXQztBQUVELE1BQWEsSUFBSyxTQUFRLFVBQVU7Q0FVbkM7QUFWRCxvQkFVQztBQUVELE1BQWEsSUFBSyxTQUFRLFVBQVU7Q0FVbkM7QUFWRCxvQkFVQztBQUVELE1BQWEsS0FBTSxTQUFRLFVBQVU7Q0FVcEM7QUFWRCxzQkFVQztBQUVELE1BQWEsS0FBTSxTQUFRLFVBQVU7Q0FJcEM7QUFKRCxzQkFJQztBQUVELE1BQWEsS0FBTSxTQUFRLFVBQVU7Q0FJcEM7QUFKRCxzQkFJQztBQUVELE1BQWEsS0FBTSxTQUFRLFVBQVU7Q0FJcEM7QUFKRCxzQkFJQztBQUVELE1BQWEsTUFBTyxTQUFRLFVBQVU7Q0FJckM7QUFKRCx3QkFJQztBQUVELE1BQWEsS0FBTSxTQUFRLFVBQVU7Q0FJcEM7QUFKRCxzQkFJQztBQUVELE1BQWEsS0FBTSxTQUFRLFVBQVU7Q0FJcEM7QUFKRCxzQkFJQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QmFzZVNraWxsLCBTa2lsbENhdGVnb3J5fSBmcm9tICcuL0Jhc2VTa2lsbCc7XG5pbXBvcnQge0F0dHJpYnV0ZX0gZnJvbSAnLi4vY2hhcmFjdGVyL0F0dHJpYnV0ZSc7XG5pbXBvcnQge0VmZmVjdFRhZ30gZnJvbSAnLi4vZWZmZWN0L0VmZmVjdFRhZyc7XG5pbXBvcnQge1N0YXR1c0VmZmVjdH0gZnJvbSAnLi4vZWZmZWN0L1N0YXR1c0VmZmVjdCc7XG5pbXBvcnQge01lbnVTbG90fSBmcm9tICcuLi9jaGFyYWN0ZXIvTWVudVNsb3QnO1xuXG4vKipcbiAqIFNwZWxscyBhcmUgYWN0aW9ucyB0aGF0IGFyZSBjYXN0ZWQgYnkgbWFnaWMgdXNlcnMuXG4gKiBTcGVsbHMgZmVhdHVyZSBhIHByZWZpeCB0aGF0IGRpZmZlcnMgYmFzZWQgb24gc2tpbGwgbGV2ZWwuXG4gKiBUaGlzIGluZGljYXRlcyB0byBhc3R1dGUgcGxheWVycyB0aGUgbWFnaWMgcmFua2luZ3Mgb2YgdGhlaXIgYWR2ZXJzYXJ5XG4gKlxuICogfCBtaW4gfCBtYXggfCByYW5rICAgfCBleGFtcGxlICAgICAgICB8XG4gKiB8IC0tICB8IC0tICB8IC0tICAgICB8IC0tICAgICAgICAgICAgIHxcbiAqIHwgIDAgIHwgICAzIHwgTm9ybWFsIHwgRmlyZWJhbGwgICAgICAgfFxuICogfCAgMyAgfCAgIDYgfCBNZWdhICAgfCBNZWdhIEZpcmViYWxsICB8XG4gKiB8ICA2ICB8ICAgOSB8IEdpZ2EgICB8IEdpZ2EgRmlyZWJhbGwgIHxcbiAqIHwgIDkgIHwgIDEyIHwgVGVyYSAgIHwgVGVyYSBGaXJlYmFsbCAgfFxuICogfCAxMiAgfCAgMTUgfCBPbWVnYSAgfCBPbWVnYSBGaXJlYmFsbCB8XG4gKi9cblxuZXhwb3J0IGVudW0gU3BlbGxTa2lsbExpc3Qge1xuICAnR3Jhdml0eScsXG4gICdTaG9jaycsXG4gICdRdWFrZScsXG4gICdMYW5kc2xpZGUnLFxuICAnQmxpenphcmQnLFxuICAvLyB0b2RvIGFkZCBhbGxcbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFNwZWxsU2tpbGwgaW1wbGVtZW50cyBCYXNlU2tpbGwge1xuICBhYnN0cmFjdCBuYW1lOiBzdHJpbmc7XG4gIGFic3RyYWN0IGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIG1lbnVTbG90OiBNZW51U2xvdC5GaXJzdDtcbiAgY2F0ZWdvcnk6IFNraWxsQ2F0ZWdvcnkuQ0xBU1M7XG59XG5cbmV4cG9ydCBjbGFzcyBHcmF2aXR5IGV4dGVuZHMgU3BlbGxTa2lsbCB7XG4gIG5hbWU6ICdHcmF2aXR5JztcbiAgZGVzY3JpcHRpb246ICdDb2FsZXNjZSBncmF2aXR5IGFyb3VuZCB0YXJnZXQuIENhdXNlcyBmbHlpbmcgdGFyZ2V0cyB0byBoaXQgZ3JvdW5kJztcbiAgdGFyZ2V0czogMTtcbiAgZWZmZWN0OiBbXG4gICAge1xuICAgICAgcmVtb3ZlOiBBdHRyaWJ1dGUuTElGRTtcbiAgICAgIHF1YW5pdHk6ICcxZDYrMic7XG4gICAgICB0YWdzOiBbRWZmZWN0VGFnLlBIWVNJQ0FMLCBFZmZlY3RUYWcuQUVSSUFMXTtcbiAgICB9LFxuICBdO1xufVxuXG5leHBvcnQgY2xhc3MgU2hvY2sgZXh0ZW5kcyBTcGVsbFNraWxsIHtcbiAgbmFtZTogJ1Nob2NrJztcbiAgZGVzY3JpcHRpb246ICdFbGVjdHJvY3V0ZXMgdGFyZ2V0JztcbiAgdGFyZ2V0czogMTtcbiAgZWZmZWN0OiBbXG4gICAge3JlbW92ZTogQXR0cmlidXRlLkxJRkU7IHF1YW5pdHk6ICcxZDYrMic7IHRhZ3M6IFtFZmZlY3RUYWcuRUxFQ1RSSUNdfSxcbiAgICB7YWRkOiBTdGF0dXNFZmZlY3QuU1RVTk5FRDsgY2hhbmNlOiAwLjI7IHRhZ3M6IFtFZmZlY3RUYWcuRUxFQ1RSSUNdfSxcbiAgXTtcbn1cblxuZXhwb3J0IGNsYXNzIFF1YWtlIGV4dGVuZHMgU3BlbGxTa2lsbCB7XG4gIG5hbWU6ICdRdWFrZSc7XG4gIGRlc2NyaXB0aW9uOiAnU2hha2VzIGVhcnRoIHN1cnJvdW5kaW5nIHRhcmdldCc7XG4gIHRhcmdldHM6IDE7IC8vIEFPRT9cbiAgZWZmZWN0OiBbXG4gICAge3JlbW92ZTogQXR0cmlidXRlLkxJRkU7IHF1YW5pdHk6ICcxZDYrMic7IHRhZ3M6IFtFZmZlY3RUYWcuRUFSVEhdfSxcbiAgICB7XG4gICAgICBhZGQ6IFN0YXR1c0VmZmVjdC5ET1dOO1xuICAgICAgY2hhbmNlOiAwLjI7XG4gICAgICB0YWdzOiBbRWZmZWN0VGFnLkVBUlRILCBFZmZlY3RUYWcuR1JPVU5ETEVWRUxdO1xuICAgIH0sXG4gIF07XG59XG5cbmV4cG9ydCBjbGFzcyBMYW5kc2xpZGUgZXh0ZW5kcyBTcGVsbFNraWxsIHtcbiAgbmFtZTogJ0xhbmRzbGlkZSc7XG4gIGRlc2NyaXB0aW9uOiAnQ3JlYXRlcyBhIGxhbmRzbGlkZSc7XG4gIHRhcmdldHM6IDE7XG4gIGVmZmVjdDogW1xuICAgIHtyZW1vdmU6IEF0dHJpYnV0ZS5MSUZFOyBxdWFuaXR5OiAnMWQ2KzInOyB0YWdzOiBbRWZmZWN0VGFnLkVBUlRIXX0sXG4gICAge2FkZDogU3RhdHVzRWZmZWN0LkRPV047IGNoYW5jZTogMC4yOyB0YWdzOiBbRWZmZWN0VGFnLkVBUlRIXX0sXG4gICAge2FkZDogU3RhdHVzRWZmZWN0LkVYSUxFRDsgY2hhbmNlOiAwLjM7IHRhZ3M6IFtFZmZlY3RUYWcuRUFSVEhdfSxcbiAgXTtcbn1cblxuZXhwb3J0IGNsYXNzIEJsaXp6YXJkIGV4dGVuZHMgU3BlbGxTa2lsbCB7XG4gIG5hbWU6ICdCbGl6emFyZCc7XG4gIGRlc2NyaXB0aW9uOiAnQ3JlYXRlcyBhIEJsaXp6YXJkJztcbiAgdGFyZ2V0czogMTtcbiAgZWZmZWN0OiBbXG4gICAge1xuICAgICAgcmVtb3ZlOiBBdHRyaWJ1dGUuTElGRTtcbiAgICAgIHF1YW5pdHk6ICcxZDYrMic7XG4gICAgICB0YWdzOiBbRWZmZWN0VGFnLldBVEVSLCBFZmZlY3RUYWcuQUlSXTtcbiAgICB9LFxuICAgIHtcbiAgICAgIGFkZDogU3RhdHVzRWZmZWN0LkNPTEQ7XG4gICAgICBjaGFuY2U6IDAuMjtcbiAgICAgIHRhZ3M6IFtFZmZlY3RUYWcuV0FURVIsIEVmZmVjdFRhZy5BSVJdO1xuICAgIH0sXG4gICAge1xuICAgICAgYWRkOiBTdGF0dXNFZmZlY3QuRVhJTEVEO1xuICAgICAgY2hhbmNlOiAwLjM7XG4gICAgICB0YWdzOiBbRWZmZWN0VGFnLldBVEVSLCBFZmZlY3RUYWcuQUlSXTtcbiAgICB9LFxuICBdO1xufVxuXG5leHBvcnQgY2xhc3MgRmlyZWJhbGwgZXh0ZW5kcyBTcGVsbFNraWxsIHtcbiAgbmFtZTogJ0ZpcmViYWxsJztcbiAgZGVzY3JpcHRpb246ICdTaG9vdCBhIGZpcmViYWxsIGF0IHRhcmdldCc7XG4gIHRhcmdldHM6IDE7XG4gIGVmZmVjdDogW1xuICAgIHtyZW1vdmU6IEF0dHJpYnV0ZS5MSUZFOyBxdWFuaXR5OiAnMWQ2KzInOyB0YWdzOiBbRWZmZWN0VGFnLkZJUkVdfSxcbiAgICB7YWRkOiBTdGF0dXNFZmZlY3QuQlVSTkVEOyBjaGFuY2U6IDAuMjsgdGFnczogW0VmZmVjdFRhZy5GSVJFXX0sXG4gIF07XG59XG5cbmV4cG9ydCBjbGFzcyBJbmZlcm5vIGV4dGVuZHMgU3BlbGxTa2lsbCB7XG4gIG5hbWU6ICdJbmZlcm5vJztcbiAgZGVzY3JpcHRpb246ICdDcmVhdGVzIGEgSW5mZXJubyc7XG4gIHRhcmdldHM6IDE7XG4gIGVmZmVjdDogW1xuICAgIHtyZW1vdmU6IEF0dHJpYnV0ZS5MSUZFOyBxdWFuaXR5OiAnMWQ2KzInOyB0YWdzOiBbRWZmZWN0VGFnLkZJUkVdfSxcbiAgICB7YWRkOiBTdGF0dXNFZmZlY3QuQlVSTkVEOyBjaGFuY2U6IDAuMjsgdGFnczogW0VmZmVjdFRhZy5GSVJFXX0sXG4gIF07XG59XG5cbmV4cG9ydCBjbGFzcyBUd2lzdGVyIGV4dGVuZHMgU3BlbGxTa2lsbCB7XG4gIG5hbWU6ICdUd2lzdGVyJztcbiAgZGVzY3JpcHRpb246ICdDcmVhdGVzIGEgVHdpc3Rlcic7XG4gIHRhcmdldHM6IDE7XG4gIGVmZmVjdDogW1xuICAgIHtyZW1vdmU6IEF0dHJpYnV0ZS5MSUZFOyBxdWFuaXR5OiAnMWQ2KzInOyB0YWdzOiBbRWZmZWN0VGFnLkFJUl19LFxuICAgIHtcbiAgICAgIGFkZDogU3RhdHVzRWZmZWN0LkJVUk5FRDtcbiAgICAgIGNoYW5jZTogMC4yO1xuICAgICAgdGFnczogW0VmZmVjdFRhZy5BSVIsIEVmZmVjdFRhZy5BRVJJQUxdO1xuICAgIH0sXG4gIF07XG59XG5cbmV4cG9ydCBjbGFzcyBHdXN0IGV4dGVuZHMgU3BlbGxTa2lsbCB7XG4gIG5hbWU6ICdHdXN0JztcbiAgZGVzY3JpcHRpb246ICdDcmVhdGVzIGEgR3VzdCc7XG4gIHRhcmdldHM6IDE7XG4gIGVmZmVjdDogW1xuICAgIHtyZW1vdmU6IEF0dHJpYnV0ZS5MSUZFOyBxdWFuaXR5OiAnMWQ2KzInOyB0YWdzOiBbRWZmZWN0VGFnLkFJUl19LFxuICAgIHtcbiAgICAgIGFkZDogU3RhdHVzRWZmZWN0LkVYSUxFRDtcbiAgICAgIGNoYW5jZTogMC4yO1xuICAgICAgdGFnczogW0VmZmVjdFRhZy5BSVIsIEVmZmVjdFRhZy5BRVJJQUxdO1xuICAgIH0sXG4gIF07XG59XG5cbmV4cG9ydCBjbGFzcyBHYWxlIGV4dGVuZHMgU3BlbGxTa2lsbCB7XG4gIG5hbWU6ICdHYWxlJztcbiAgZGVzY3JpcHRpb246ICdDcmVhdGVzIEdhbGUnO1xuICB0YXJnZXRzOiAxO1xuICBlZmZlY3Q6IFtcbiAgICB7cmVtb3ZlOiBBdHRyaWJ1dGUuTElGRTsgcXVhbml0eTogJzFkNisyJzsgdGFnczogW0VmZmVjdFRhZy5BSVJdfSxcbiAgICB7XG4gICAgICBhZGQ6IFN0YXR1c0VmZmVjdC5FWElMRUQ7XG4gICAgICBjaGFuY2U6IDAuMjtcbiAgICAgIHRhZ3M6IFtFZmZlY3RUYWcuQUlSLCBFZmZlY3RUYWcuQUVSSUFMXTtcbiAgICB9LFxuICBdO1xufVxuXG5leHBvcnQgY2xhc3MgQ3ljbG9uZSBleHRlbmRzIFNwZWxsU2tpbGwge1xuICBuYW1lOiAnQ3ljbG9uZSc7XG4gIGRlc2NyaXB0aW9uOiAnQ3JlYXRlcyBDeWNsb25lJztcbiAgdGFyZ2V0czogMTtcbiAgZWZmZWN0OiBbXG4gICAge3JlbW92ZTogQXR0cmlidXRlLkxJRkU7IHF1YW5pdHk6ICcxZDYrMic7IHRhZ3M6IFtFZmZlY3RUYWcuQUlSXX0sXG4gICAge1xuICAgICAgYWRkOiBTdGF0dXNFZmZlY3QuRVhJTEVEO1xuICAgICAgY2hhbmNlOiAwLjI7XG4gICAgICB0YWdzOiBbRWZmZWN0VGFnLkFJUiwgRWZmZWN0VGFnLkFFUklBTF07XG4gICAgfSxcbiAgXTtcbn1cblxuZXhwb3J0IGNsYXNzIFRzdW5hbWkgZXh0ZW5kcyBTcGVsbFNraWxsIHtcbiAgbmFtZTogJ1RzdW5hbWknO1xuICBkZXNjcmlwdGlvbjogJ0Egd2F0ZXItYmFzZWQgYXR0YWNrIHRoYXQgY3JlYXRlcyBUc3VuYW1pJztcbiAgdGFyZ2V0czogMTtcbiAgZWZmZWN0OiBbXG4gICAge3JlbW92ZTogQXR0cmlidXRlLkxJRkU7IHF1YW5pdHk6ICcxZDYrMic7IHRhZ3M6IFtFZmZlY3RUYWcuV0FURVJdfSxcbiAgICB7XG4gICAgICBhZGQ6IFN0YXR1c0VmZmVjdC5FWElMRUQ7XG4gICAgICBjaGFuY2U6IDAuMjtcbiAgICAgIHRhZ3M6IFtFZmZlY3RUYWcuV0FURVIsIEVmZmVjdFRhZy5HUk9VTkRMRVZFTF07XG4gICAgfSxcbiAgXTtcbn1cblxuZXhwb3J0IGNsYXNzIEFxdWEgZXh0ZW5kcyBTcGVsbFNraWxsIHtcbiAgbmFtZTogJ0FxdWEnO1xuICBkZXNjcmlwdGlvbjogJ0NyZWF0ZXMgQXF1YSc7XG4gIHRhcmdldHM6IDE7XG4gIGVmZmVjdDogW1xuICAgIHtyZW1vdmU6IEF0dHJpYnV0ZS5MSUZFOyBxdWFuaXR5OiAnMWQ2KzInOyB0YWdzOiBbRWZmZWN0VGFnLldBVEVSXX0sXG4gICAge1xuICAgICAgYWRkOiBTdGF0dXNFZmZlY3QuRVhJTEVEO1xuICAgICAgY2hhbmNlOiAwLjI7XG4gICAgICB0YWdzOiBbRWZmZWN0VGFnLldBVEVSLCBFZmZlY3RUYWcuR1JPVU5ETEVWRUxdO1xuICAgIH0sXG4gIF07XG59XG5cbmV4cG9ydCBjbGFzcyBIZWFsIGV4dGVuZHMgU3BlbGxTa2lsbCB7XG4gIG5hbWU6ICdIZWFsJztcbiAgZGVzY3JpcHRpb246ICdIZWFsIHRhcmdldCc7XG4gIHRhcmdldHM6IDE7XG4gIGVmZmVjdDogW3thZGQ6IEF0dHJpYnV0ZS5MSUZFOyBxdWFuaXR5OiAnMWQ2KzInOyB0YWdzOiBbRWZmZWN0VGFnLldBVEVSXX1dO1xufVxuXG5leHBvcnQgY2xhc3MgUmV2aXZlIGV4dGVuZHMgU3BlbGxTa2lsbCB7XG4gIG5hbWU6ICdSZXZpdmUnO1xuICBkZXNjcmlwdGlvbjogJ1Jlc3RvcmUgbGlmZSB0byB0YXJnZXQnO1xuICB0YXJnZXRzOiAxO1xuICBlZmZlY3Q6IFt7cmVtb3ZlOiBTdGF0dXNFZmZlY3QuTElGRUxFU1M7IGNoYW5jZTogMC45OyB0YWdzOiBbXX1dO1xufVxuXG5leHBvcnQgY2xhc3MgQ3VyZSBleHRlbmRzIFNwZWxsU2tpbGwge1xuICBuYW1lOiAnQ3VyZSc7XG4gIGRlc2NyaXB0aW9uOiAnQ3VyZXMgU3RhdHVzRWZmZWN0cyc7XG4gIHRhcmdldHM6IDE7XG4gIGVmZmVjdDogW1xuICAgIHtyZW1vdmU6IFN0YXR1c0VmZmVjdC5DT0xEOyBjaGFuY2U6IDF9LFxuICAgIHtyZW1vdmU6IFN0YXR1c0VmZmVjdC5ET09NRUQ7IGNoYW5jZTogMX0sXG4gICAge3JlbW92ZTogU3RhdHVzRWZmZWN0LklORkVDVElPTjsgY2hhbmNlOiAxfSxcbiAgICB7cmVtb3ZlOiBTdGF0dXNFZmZlY3QuU0lMRU5DRTsgY2hhbmNlOiAxfSxcbiAgXTtcbn1cblxuZXhwb3J0IGNsYXNzIEJhcnJpZXIgZXh0ZW5kcyBTcGVsbFNraWxsIHtcbiAgbmFtZTogJ0JhcnJpZXInO1xuICBkZXNjcmlwdGlvbjogJ0JhcnJpZXIgU3RhdHVzRWZmZWN0cyc7XG4gIHRhcmdldHM6IDE7XG4gIGVmZmVjdDogW3thZGQ6IFN0YXR1c0VmZmVjdC5CQVJSSUVSOyBjaGFuY2U6IDE7IHRhZ3M6IFtFZmZlY3RUYWcuQUlSXX1dO1xufVxuXG5leHBvcnQgY2xhc3MgQm9vbSBleHRlbmRzIFNwZWxsU2tpbGwge1xuICBuYW1lOiAnQm9vbSc7XG4gIGRlc2NyaXB0aW9uOiAnQ2FzdCBCb29tIG9uIHRhcmdldCc7XG4gIHRhcmdldHM6IDE7XG4gIGVmZmVjdDogW1xuICAgIHtyZW1vdmU6IFN0YXR1c0VmZmVjdC5MSUZFTEVTUzsgcXVhbml0eTogJzFkNis0JzsgdGFnczogW0VmZmVjdFRhZy5GSVJFXX0sXG4gIF07XG59XG5cbmV4cG9ydCBjbGFzcyBSZWZsZWN0IGV4dGVuZHMgU3BlbGxTa2lsbCB7XG4gIG5hbWU6ICdSZWZsZWN0JztcbiAgZGVzY3JpcHRpb246ICdDYXN0IFJlZmxlY3Qgb24gdGFyZ2V0JztcbiAgdGFyZ2V0czogMTtcbiAgZWZmZWN0OiBbe2FkZDogU3RhdHVzRWZmZWN0LlJFRkxFQ1Q7IGNoYW5jZTogMX1dO1xufVxuXG5leHBvcnQgY2xhc3MgRmxhcmUgZXh0ZW5kcyBTcGVsbFNraWxsIHtcbiAgbmFtZTogJ0ZsYXJlJztcbiAgZGVzY3JpcHRpb246ICdDYXN0IEZsYXJlIG9uIHRhcmdldCc7XG4gIHRhcmdldHM6IDE7XG4gIGVmZmVjdDogW1xuICAgIHtyZW1vdmU6IFN0YXR1c0VmZmVjdC5MSUZFTEVTUzsgcXVhbml0eTogJzFkNis0JzsgdGFnczogW0VmZmVjdFRhZy5GSVJFXX0sXG4gICAge3JlbW92ZTogU3RhdHVzRWZmZWN0LkxJRkVMRVNTOyBxdWFuaXR5OiAnMWQ2KzQnOyB0YWdzOiBbRWZmZWN0VGFnLkxJR0hUXX0sXG4gIF07XG59XG5cbmV4cG9ydCBjbGFzcyBNZXRlb3IgZXh0ZW5kcyBTcGVsbFNraWxsIHtcbiAgbmFtZTogJ01ldGVvcic7XG4gIGRlc2NyaXB0aW9uOiAnQ2FzdCBNZXRlb3Igb24gdGFyZ2V0JztcbiAgdGFyZ2V0czogMTtcbiAgZWZmZWN0OiBbXG4gICAge3JlbW92ZTogU3RhdHVzRWZmZWN0LkxJRkVMRVNTOyBxdWFuaXR5OiAnMWQ2KzQnOyB0YWdzOiBbRWZmZWN0VGFnLkZJUkVdfSxcbiAgICB7cmVtb3ZlOiBTdGF0dXNFZmZlY3QuTElGRUxFU1M7IHF1YW5pdHk6ICcxZDYrNCc7IHRhZ3M6IFtFZmZlY3RUYWcuRUFSVEhdfSxcbiAgXTtcbn1cblxuZXhwb3J0IGNsYXNzIFRlbGVwYXRoeSBleHRlbmRzIFNwZWxsU2tpbGwge1xuICBuYW1lOiAnVGVsZXBhdGh5JztcbiAgZGVzY3JpcHRpb246ICdDYXN0IFRlbGVwYXRoeSBvbiB0YXJnZXQnO1xuICB0YXJnZXRzOiAxO1xuICBlZmZlY3Q6IFtcbiAgICB7XG4gICAgICByZW1vdmU6IFN0YXR1c0VmZmVjdC5MSUZFTEVTUztcbiAgICAgIHF1YW5pdHk6ICcxZDYrNCc7XG4gICAgICB0YWdzOiBbRWZmZWN0VGFnLlBTWUNISUNdO1xuICAgIH0sXG4gIF07XG59XG5cbmV4cG9ydCBjbGFzcyBMaWdodCBleHRlbmRzIFNwZWxsU2tpbGwge1xuICBuYW1lOiAnTGlnaHQnO1xuICBkZXNjcmlwdGlvbjogJ0Nhc3QgbGlnaHQgb24gdGFyZ2V0JztcbiAgdGFyZ2V0czogMTtcbiAgZWZmZWN0OiBbXG4gICAge3JlbW92ZTogU3RhdHVzRWZmZWN0LkxJRkVMRVNTOyBxdWFuaXR5OiAnMWQ2KzQnOyB0YWdzOiBbRWZmZWN0VGFnLkxJR0hUXX0sXG4gIF07XG59XG5cbmV4cG9ydCBjbGFzcyBEZXNvbGF0ZSBleHRlbmRzIFNwZWxsU2tpbGwge1xuICBuYW1lOiAnRGVzb2xhdGUnO1xuICBkZXNjcmlwdGlvbjogJ1RvIG1ha2UgYW4gYXJlYSBlbXB0eSBvciBiYXJlLic7XG4gIHRhcmdldHM6IDE7XG4gIGVmZmVjdDogW1xuICAgIHtyZW1vdmU6IEF0dHJpYnV0ZS5MSUZFOyBxdWFuaXR5OiAnMWQ2KzQnOyB0YWdzOiBbRWZmZWN0VGFnLkRBUktORVNTXX0sXG4gICAge1xuICAgICAgcmVtb3ZlOiBTdGF0dXNFZmZlY3QuTElGRUxFU1M7XG4gICAgICBxdWFuaXR5OiAnMWQ2KzQnO1xuICAgICAgdGFnczogW0VmZmVjdFRhZy5EQVJLTkVTU107XG4gICAgfSxcbiAgXTtcbn1cblxuZXhwb3J0IGNsYXNzIERhcmtuZXNzIGV4dGVuZHMgU3BlbGxTa2lsbCB7XG4gIG5hbWU6ICdEYXJrbmVzcyc7XG4gIGRlc2NyaXB0aW9uOiAnRGVjcmVhc2UgdGhlIGFyZWEgdGhhdCB5b3VyIG9wcG9uZW50IGNhbiBzZWUnO1xuICB0YXJnZXRzOiAxO1xuICBlZmZlY3Q6IFtcbiAgICB7XG4gICAgICByZW1vdmU6IFN0YXR1c0VmZmVjdC5MSUZFTEVTUztcbiAgICAgIHF1YW5pdHk6ICcxZDYrNCc7XG4gICAgICB0YWdzOiBbRWZmZWN0VGFnLkRBUktORVNTXTtcbiAgICB9LFxuICBdO1xufVxuXG5leHBvcnQgY2xhc3MgU3RvcCBleHRlbmRzIFNwZWxsU2tpbGwge1xuICBuYW1lOiAnU3RvcCc7XG4gIGRlc2NyaXB0aW9uOiAnRnJlZXplcyBhIGNocmFjdGVyIGluIHRpbWUnO1xuICB0YXJnZXRzOiAxO1xuICBlZmZlY3Q6IFtcbiAgICB7XG4gICAgICBhZGQ6IFN0YXR1c0VmZmVjdC5TVE9QO1xuICAgICAgdGFnczogW0VmZmVjdFRhZy5USU1FXTtcbiAgICB9LFxuICBdO1xufVxuXG5leHBvcnQgY2xhc3MgU2xvdyBleHRlbmRzIFNwZWxsU2tpbGwge1xuICBuYW1lOiAnU2xvdyc7XG4gIGRlc2NyaXB0aW9uOiAnU2xvdyBkb3duIGFuIG9wcG9uZW50JztcbiAgdGFyZ2V0czogMTtcbiAgZWZmZWN0OiBbXG4gICAge1xuICAgICAgYWRkOiBTdGF0dXNFZmZlY3QuU0xPVztcbiAgICAgIHRhZ3M6IFtFZmZlY3RUYWcuVElNRV07XG4gICAgfSxcbiAgXTtcbn1cblxuZXhwb3J0IGNsYXNzIEhhc3RlIGV4dGVuZHMgU3BlbGxTa2lsbCB7XG4gIG5hbWU6ICdIYXN0ZSc7XG4gIGRlc2NyaXB0aW9uOiAnU3BlZWQgdXAgYSBjaGFyYWN0ZXInO1xuICB0YXJnZXRzOiAxOyAvLyBzZWxmXG4gIGVmZmVjdDogW1xuICAgIHtcbiAgICAgIGFkZDogU3RhdHVzRWZmZWN0LkhBU1RFO1xuICAgICAgdGFnczogW0VmZmVjdFRhZy5USU1FXTtcbiAgICB9LFxuICBdO1xufVxuXG5leHBvcnQgY2xhc3MgQ2hpbGwgZXh0ZW5kcyBTcGVsbFNraWxsIHtcbiAgbmFtZTogJ0NoaWxsJztcbiAgZGVzY3JpcHRpb246ICcnO1xuICB0YXJnZXRzOiAxO1xufVxuXG5leHBvcnQgY2xhc3MgQ2hhcm0gZXh0ZW5kcyBTcGVsbFNraWxsIHtcbiAgbmFtZTogJ0NoYXJtJztcbiAgZGVzY3JpcHRpb246ICcnO1xuICB0YXJnZXRzOiAxO1xufVxuXG5leHBvcnQgY2xhc3MgRnJvc3QgZXh0ZW5kcyBTcGVsbFNraWxsIHtcbiAgbmFtZTogJ0Zyb3N0JztcbiAgZGVzY3JpcHRpb246ICcnO1xuICB0YXJnZXRzOiAxO1xufVxuXG5leHBvcnQgY2xhc3MgQWJzb3JiIGV4dGVuZHMgU3BlbGxTa2lsbCB7XG4gIG5hbWU6ICdGcm9zdCc7XG4gIGRlc2NyaXB0aW9uOiAnJztcbiAgdGFyZ2V0czogMTtcbn1cblxuZXhwb3J0IGNsYXNzIExlZWNoIGV4dGVuZHMgU3BlbGxTa2lsbCB7XG4gIG5hbWU6ICdMZWVjaCc7XG4gIGRlc2NyaXB0aW9uOiAnJztcbiAgdGFyZ2V0czogMTtcbn1cblxuZXhwb3J0IGNsYXNzIERyYWluIGV4dGVuZHMgU3BlbGxTa2lsbCB7XG4gIG5hbWU6ICdEcmFpbic7XG4gIGRlc2NyaXB0aW9uOiAnJztcbiAgdGFyZ2V0czogMTtcbn1cbiJdfQ==