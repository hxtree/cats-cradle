"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rage = exports.Light = exports.Protection = exports.Reflect = exports.Steal = exports.Search = exports.Mock = exports.Protect = exports.Sacrifice = exports.Ward = exports.Lullaby = exports.Seal = exports.Pickpocket = exports.Mimic = exports.Scout = exports.Inspire = exports.Hope = exports.Support = exports.Cheer = exports.Scan = exports.Hide = exports.Grapple = exports.Focus = exports.Dismiss = exports.Disguise = exports.Boast = exports.Barrier = exports.ClassSkill = exports.ClassSkillList = exports.Focusable = void 0;
// fuel?
// Whether when performing move if character can hold action to put more effort into action
var Focusable;
(function (Focusable) {
    Focusable["STAMINA"] = "Stamina";
    Focusable["TRUE"] = "True";
    Focusable["FALSE"] = "False";
})(Focusable = exports.Focusable || (exports.Focusable = {}));
var ClassSkillList;
(function (ClassSkillList) {
    ClassSkillList["BARRIER"] = "Barrier";
    ClassSkillList["BOAST"] = "Boast";
    ClassSkillList["DISGUISE"] = "Disguise";
    ClassSkillList["FOCUS"] = "Focus";
    ClassSkillList["GRAPPLE"] = "Grapple";
    ClassSkillList["HIDE"] = "Hide";
    ClassSkillList["SCAN"] = "Scan";
    ClassSkillList["CHEER"] = "Cheer";
    ClassSkillList["SUPPORT"] = "Support";
    ClassSkillList["HOPE"] = "Hope";
    ClassSkillList["INSPIRE"] = "Inspire";
    ClassSkillList["SCOUT"] = "Scout";
    ClassSkillList["MIMIC"] = "Mimic";
    ClassSkillList["PICKPOCKET"] = "Pickpocket";
    ClassSkillList["SEAL"] = "Seal";
    ClassSkillList["LULLABY"] = "Lullaby";
    ClassSkillList["WARD"] = "Ward";
    ClassSkillList["SACRIFICE"] = "Sacrifice";
    ClassSkillList["PROTECT"] = "Protect";
    ClassSkillList["MOCK"] = "Mock";
    ClassSkillList["SEARCH"] = "Search";
    ClassSkillList["STEAL"] = "Steal";
    ClassSkillList["PROTECTION"] = "Protection";
    ClassSkillList["LIGHT"] = "Light";
    ClassSkillList["REFLECT"] = "Reflect";
    ClassSkillList["RAGE"] = "Rage";
    ClassSkillList["DISMISS"] = "Dismiss";
})(ClassSkillList = exports.ClassSkillList || (exports.ClassSkillList = {}));
// todo really what makes something a class skill is whether it can be earned via class? decouple
/**
 * Class Skills are motor programs that a character learns to preform.
 * Each skill can be acquired via items, etc. but often
 * progression is determined by class.
 */
class ClassSkill {
}
exports.ClassSkill = ClassSkill;
class Barrier extends ClassSkill {
}
exports.Barrier = Barrier;
class Boast extends ClassSkill {
}
exports.Boast = Boast;
class Disguise extends ClassSkill {
}
exports.Disguise = Disguise;
class Dismiss extends ClassSkill {
}
exports.Dismiss = Dismiss;
class Focus extends ClassSkill {
}
exports.Focus = Focus;
class Grapple extends ClassSkill {
}
exports.Grapple = Grapple;
class Hide extends ClassSkill {
}
exports.Hide = Hide;
class Scan extends ClassSkill {
}
exports.Scan = Scan;
class Cheer extends ClassSkill {
}
exports.Cheer = Cheer;
class Support extends ClassSkill {
}
exports.Support = Support;
class Hope extends ClassSkill {
}
exports.Hope = Hope;
class Inspire extends ClassSkill {
}
exports.Inspire = Inspire;
class Scout extends ClassSkill {
}
exports.Scout = Scout;
class Mimic extends ClassSkill {
}
exports.Mimic = Mimic;
class Pickpocket extends ClassSkill {
}
exports.Pickpocket = Pickpocket;
class Seal extends ClassSkill {
}
exports.Seal = Seal;
class Lullaby extends ClassSkill {
}
exports.Lullaby = Lullaby;
class Ward extends ClassSkill {
}
exports.Ward = Ward;
class Sacrifice extends ClassSkill {
}
exports.Sacrifice = Sacrifice;
class Protect extends ClassSkill {
}
exports.Protect = Protect;
class Mock extends ClassSkill {
}
exports.Mock = Mock;
class Search extends ClassSkill {
}
exports.Search = Search;
class Steal extends ClassSkill {
}
exports.Steal = Steal;
class Reflect extends ClassSkill {
}
exports.Reflect = Reflect;
class Protection extends ClassSkill {
}
exports.Protection = Protection;
class Light extends ClassSkill {
}
exports.Light = Light;
class Rage extends ClassSkill {
}
exports.Rage = Rage;
// "12","Boast/Rally/Inspire","Increase allies determination","10",,"10"
//# sourceMappingURL=data:application/json;base64,