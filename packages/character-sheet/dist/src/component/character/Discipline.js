"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Healer = exports.Assassin = exports.XSolider = exports.Warrior = exports.Thief = exports.Summoner = exports.Solider = exports.Scout = exports.Rebel = exports.Royalty = exports.Rouge = exports.Mechanic = exports.Knight = exports.Hero = exports.Gaurdian = exports.Gaurd = exports.MagiYellow = exports.MagiWhite = exports.MagiPurple = exports.MagiPink = exports.MagiGreen = exports.MagiBrown = exports.MagiBlue = exports.MagiBlack = exports.Magi = exports.Commander = exports.Cheerleader = exports.Cook = exports.BodyBuilder = exports.Historian = exports.Wizard = exports.Gymnast = exports.BaseDiscipline = exports.Discipline = exports.DisciplineCategory = void 0;
var DisciplineCategory;
(function (DisciplineCategory) {
    DisciplineCategory["PROFESSION"] = "Profession";
    DisciplineCategory["ARCHETYPE"] = "Archetype";
    // Combat Classes
    // Specialty Classes
    // Drive Classes
    // Omega Classes
    //  | Spirit Class | Drive Class | Omega Class
})(DisciplineCategory = exports.DisciplineCategory || (exports.DisciplineCategory = {}));
var Discipline;
(function (Discipline) {
    Discipline["AMBER_ASSASSIN"] = "Amber Assassin";
    Discipline["ASSASSIN"] = "Assassin";
    Discipline["BARD"] = "Bard";
    Discipline["BERSERKER"] = "Berserker";
    Discipline["BODY_BUILDER"] = "Body Builder";
    Discipline["CHEERLEADER"] = "Cheerleader";
    Discipline["COMMANDER"] = "Commander";
    Discipline["COOK"] = "Cook";
    Discipline["DUELIST"] = "Duelist";
    Discipline["ELITE_ASSASIN"] = "Elite Assasin";
    Discipline["ENGINEER"] = "Engineer";
    Discipline["GAURD"] = "Gaurd";
    Discipline["GUARDIAN"] = "Guardian";
    Discipline["GYMNAST"] = "Gymnast";
    Discipline["HEALER"] = "Healer";
    Discipline["HERO"] = "Hero";
    Discipline["HISTORIAN"] = "Historian";
    Discipline["KEEPER"] = "Keeper";
    Discipline["KNIGHT"] = "Knight";
    Discipline["LIGHTENING_WARRIOR"] = "Lightening Warrior";
    Discipline["MADIEN"] = "Madien";
    Discipline["MAGI"] = "Magi";
    Discipline["MAGI_BLACK"] = "Magi Black";
    Discipline["MAGI_BLUE"] = "Magi Blue";
    Discipline["MAGI_BROWN"] = "Magi Brown";
    Discipline["MAGI_GREEN"] = "Magi Green";
    Discipline["MAGI_PINK"] = "Magi Pink";
    Discipline["MAGI_PURPLE"] = "Magi Purple";
    Discipline["MAGI_WHITE"] = "Magi White";
    Discipline["MAGI_YELLOW"] = "Magi Yellow";
    Discipline["MECHANIC"] = "Mechanic";
    Discipline["NINJA"] = "Ninja";
    Discipline["ONI"] = "Oni";
    Discipline["OUROBOROS"] = "Ouroboros";
    Discipline["POSSESSED"] = "Possessed";
    Discipline["REBEL"] = "Rebel";
    Discipline["ROUGE"] = "Rouge";
    Discipline["ROYALTY"] = "Royalty";
    Discipline["RUNE_KING"] = "Rune King";
    Discipline["SAGE"] = "Sage";
    Discipline["SCOUT"] = "Scout";
    Discipline["SOLIDER"] = "Solider";
    Discipline["SUMMONER"] = "Summoner";
    Discipline["THIEF"] = "Thief";
    Discipline["WARRIOR"] = "Warrior";
    Discipline["WIZARD"] = "Wizard";
    Discipline["XSOLIDER"] = "XSolider";
})(Discipline = exports.Discipline || (exports.Discipline = {}));
class BaseDiscipline {
    constructor(experience = 0) {
        this._experience = experience;
    }
    get level() {
        return Math.floor(Math.sqrt(this._experience / 100));
    }
    get nextLevel() {
        return this._experience - ((this.level * (this.level - 1)) / 2) * 100;
    }
    get experienceToNextLevel() {
        return this.nextLevel - this._experience;
    }
    get experienceToNextLevelPercentage() {
        return this.experienceToNextLevel / this.nextLevel;
    }
    // todo load from Class
    get effects() {
        return [];
    }
}
exports.BaseDiscipline = BaseDiscipline;
// TODO add
// Bard,
// Duelist,
// Knight,
// RuneKing,
// Maiden,
// Keeper,
// Sage,
// Guardian'
// Possessed,
// Ouroboros,?
// Berserker,
// Ninja,
// AmberAssassin,
// EliteAssasin,
// Engineer,
// LighteningWarrior,
class Gymnast extends BaseDiscipline {
}
exports.Gymnast = Gymnast;
class Wizard extends BaseDiscipline {
}
exports.Wizard = Wizard;
class Historian extends BaseDiscipline {
}
exports.Historian = Historian;
class BodyBuilder extends BaseDiscipline {
}
exports.BodyBuilder = BodyBuilder;
// may be anyone can become a cook?>
class Cook extends BaseDiscipline {
}
exports.Cook = Cook;
class Cheerleader extends BaseDiscipline {
}
exports.Cheerleader = Cheerleader;
class Commander extends BaseDiscipline {
}
exports.Commander = Commander;
class Magi extends BaseDiscipline {
}
exports.Magi = Magi;
class MagiBlack extends BaseDiscipline {
}
exports.MagiBlack = MagiBlack;
class MagiBlue extends BaseDiscipline {
}
exports.MagiBlue = MagiBlue;
class MagiBrown extends BaseDiscipline {
}
exports.MagiBrown = MagiBrown;
class MagiGreen extends BaseDiscipline {
}
exports.MagiGreen = MagiGreen;
class MagiPink extends BaseDiscipline {
}
exports.MagiPink = MagiPink;
class MagiPurple extends BaseDiscipline {
}
exports.MagiPurple = MagiPurple;
class MagiWhite extends BaseDiscipline {
}
exports.MagiWhite = MagiWhite;
class MagiYellow extends BaseDiscipline {
}
exports.MagiYellow = MagiYellow;
class Gaurd extends BaseDiscipline {
}
exports.Gaurd = Gaurd;
class Gaurdian extends BaseDiscipline {
}
exports.Gaurdian = Gaurdian;
class Hero extends BaseDiscipline {
}
exports.Hero = Hero;
class Knight extends BaseDiscipline {
}
exports.Knight = Knight;
class Mechanic extends BaseDiscipline {
}
exports.Mechanic = Mechanic;
class Rouge extends BaseDiscipline {
}
exports.Rouge = Rouge;
class Royalty extends BaseDiscipline {
}
exports.Royalty = Royalty;
class Rebel extends BaseDiscipline {
}
exports.Rebel = Rebel;
class Scout extends BaseDiscipline {
}
exports.Scout = Scout;
class Solider extends BaseDiscipline {
}
exports.Solider = Solider;
class Summoner extends BaseDiscipline {
}
exports.Summoner = Summoner;
class Thief extends BaseDiscipline {
}
exports.Thief = Thief;
class Warrior extends BaseDiscipline {
}
exports.Warrior = Warrior;
class XSolider extends BaseDiscipline {
}
exports.XSolider = XSolider;
class Assassin extends BaseDiscipline {
}
exports.Assassin = Assassin;
class Healer extends BaseDiscipline {
}
exports.Healer = Healer;
//# sourceMappingURL=data:application/json;base64,