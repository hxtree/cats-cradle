"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rage = exports.Light = exports.Protection = exports.Reflect = exports.Steal = exports.Search = exports.Mock = exports.Protect = exports.Sacrifice = exports.Ward = exports.Lullaby = exports.Seal = exports.Pickpocket = exports.Mimic = exports.Scout = exports.Inspire = exports.Hope = exports.Support = exports.Cheer = exports.Scan = exports.Hide = exports.Grapple = exports.Focus = exports.Dismiss = exports.Disguise = exports.Boast = exports.Barrier = exports.ClassSkill = exports.ClassSkillList = exports.Focusable = void 0;
// fuel?
// Whether when performing move if character can hold action to put more effort into action
var Focusable;
(function (Focusable) {
    Focusable["STAMINA"] = "Stamina";
    Focusable["TRUE"] = "True";
    Focusable["FALSE"] = "False";
})(Focusable = exports.Focusable || (exports.Focusable = {}));
var ClassSkillList;
(function (ClassSkillList) {
    ClassSkillList["BARRIER"] = "Barrier";
    ClassSkillList["BOAST"] = "Boast";
    ClassSkillList["DISGUISE"] = "Disguise";
    ClassSkillList["FOCUS"] = "Focus";
    ClassSkillList["GRAPPLE"] = "Grapple";
    ClassSkillList["HIDE"] = "Hide";
    ClassSkillList["SCAN"] = "Scan";
    ClassSkillList["CHEER"] = "Cheer";
    ClassSkillList["SUPPORT"] = "Support";
    ClassSkillList["HOPE"] = "Hope";
    ClassSkillList["INSPIRE"] = "Inspire";
    ClassSkillList["SCOUT"] = "Scout";
    ClassSkillList["MIMIC"] = "Mimic";
    ClassSkillList["PICKPOCKET"] = "Pickpocket";
    ClassSkillList["SEAL"] = "Seal";
    ClassSkillList["LULLABY"] = "Lullaby";
    ClassSkillList["WARD"] = "Ward";
    ClassSkillList["SACRIFICE"] = "Sacrifice";
    ClassSkillList["PROTECT"] = "Protect";
    ClassSkillList["MOCK"] = "Mock";
    ClassSkillList["SEARCH"] = "Search";
    ClassSkillList["STEAL"] = "Steal";
    ClassSkillList["PROTECTION"] = "Protection";
    ClassSkillList["LIGHT"] = "Light";
    ClassSkillList["REFLECT"] = "Reflect";
    ClassSkillList["RAGE"] = "Rage";
    ClassSkillList["DISMISS"] = "Dismiss";
})(ClassSkillList = exports.ClassSkillList || (exports.ClassSkillList = {}));
// todo really what makes something a class skill is whether it can be earned via class? decouple
/**
 * Class Skills are motor programs that a character learns to preform.
 * Each skill can be acquired via items, etc. but often
 * progression is determined by class.
 */
class ClassSkill {
}
exports.ClassSkill = ClassSkill;
class Barrier extends ClassSkill {
}
exports.Barrier = Barrier;
class Boast extends ClassSkill {
}
exports.Boast = Boast;
class Disguise extends ClassSkill {
}
exports.Disguise = Disguise;
class Dismiss extends ClassSkill {
}
exports.Dismiss = Dismiss;
class Focus extends ClassSkill {
}
exports.Focus = Focus;
class Grapple extends ClassSkill {
}
exports.Grapple = Grapple;
class Hide extends ClassSkill {
}
exports.Hide = Hide;
class Scan extends ClassSkill {
}
exports.Scan = Scan;
class Cheer extends ClassSkill {
}
exports.Cheer = Cheer;
class Support extends ClassSkill {
}
exports.Support = Support;
class Hope extends ClassSkill {
}
exports.Hope = Hope;
class Inspire extends ClassSkill {
}
exports.Inspire = Inspire;
class Scout extends ClassSkill {
}
exports.Scout = Scout;
class Mimic extends ClassSkill {
}
exports.Mimic = Mimic;
class Pickpocket extends ClassSkill {
}
exports.Pickpocket = Pickpocket;
class Seal extends ClassSkill {
}
exports.Seal = Seal;
class Lullaby extends ClassSkill {
}
exports.Lullaby = Lullaby;
class Ward extends ClassSkill {
}
exports.Ward = Ward;
class Sacrifice extends ClassSkill {
}
exports.Sacrifice = Sacrifice;
class Protect extends ClassSkill {
}
exports.Protect = Protect;
class Mock extends ClassSkill {
}
exports.Mock = Mock;
class Search extends ClassSkill {
}
exports.Search = Search;
class Steal extends ClassSkill {
}
exports.Steal = Steal;
class Reflect extends ClassSkill {
}
exports.Reflect = Reflect;
class Protection extends ClassSkill {
}
exports.Protection = Protection;
class Light extends ClassSkill {
}
exports.Light = Light;
class Rage extends ClassSkill {
}
exports.Rage = Rage;
// "12","Boast/Rally/Inspire","Increase allies determination","10",,"10"
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xhc3Muc2tpbGwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9uZW50L2NsYXNzLnNraWxsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUlBLFFBQVE7QUFDUiwyRkFBMkY7QUFDM0YsSUFBWSxTQUlYO0FBSkQsV0FBWSxTQUFTO0lBQ25CLGdDQUFtQixDQUFBO0lBQ25CLDBCQUFhLENBQUE7SUFDYiw0QkFBZSxDQUFBO0FBQ2pCLENBQUMsRUFKVyxTQUFTLEdBQVQsaUJBQVMsS0FBVCxpQkFBUyxRQUlwQjtBQUVELElBQVksY0E0Qlg7QUE1QkQsV0FBWSxjQUFjO0lBQ3hCLHFDQUFtQixDQUFBO0lBQ25CLGlDQUFlLENBQUE7SUFDZix1Q0FBcUIsQ0FBQTtJQUNyQixpQ0FBZSxDQUFBO0lBQ2YscUNBQW1CLENBQUE7SUFDbkIsK0JBQWEsQ0FBQTtJQUNiLCtCQUFhLENBQUE7SUFDYixpQ0FBZSxDQUFBO0lBQ2YscUNBQW1CLENBQUE7SUFDbkIsK0JBQWEsQ0FBQTtJQUNiLHFDQUFtQixDQUFBO0lBQ25CLGlDQUFlLENBQUE7SUFDZixpQ0FBZSxDQUFBO0lBQ2YsMkNBQXlCLENBQUE7SUFDekIsK0JBQWEsQ0FBQTtJQUNiLHFDQUFtQixDQUFBO0lBQ25CLCtCQUFhLENBQUE7SUFDYix5Q0FBdUIsQ0FBQTtJQUN2QixxQ0FBbUIsQ0FBQTtJQUNuQiwrQkFBYSxDQUFBO0lBQ2IsbUNBQWlCLENBQUE7SUFDakIsaUNBQWUsQ0FBQTtJQUNmLDJDQUF5QixDQUFBO0lBQ3pCLGlDQUFlLENBQUE7SUFDZixxQ0FBbUIsQ0FBQTtJQUNuQiwrQkFBYSxDQUFBO0lBQ2IscUNBQW1CLENBQUE7QUFDckIsQ0FBQyxFQTVCVyxjQUFjLEdBQWQsc0JBQWMsS0FBZCxzQkFBYyxRQTRCekI7QUFFRCxpR0FBaUc7QUFFakc7Ozs7R0FJRztBQUNILE1BQXNCLFVBQVU7Q0FLL0I7QUFMRCxnQ0FLQztBQUVELE1BQWEsT0FBUSxTQUFRLFVBQVU7Q0FJdEM7QUFKRCwwQkFJQztBQUVELE1BQWEsS0FBTSxTQUFRLFVBQVU7Q0FJcEM7QUFKRCxzQkFJQztBQUVELE1BQWEsUUFBUyxTQUFRLFVBQVU7Q0FLdkM7QUFMRCw0QkFLQztBQUVELE1BQWEsT0FBUSxTQUFRLFVBQVU7Q0FJdEM7QUFKRCwwQkFJQztBQUVELE1BQWEsS0FBTSxTQUFRLFVBQVU7Q0FJcEM7QUFKRCxzQkFJQztBQUVELE1BQWEsT0FBUSxTQUFRLFVBQVU7Q0FJdEM7QUFKRCwwQkFJQztBQUVELE1BQWEsSUFBSyxTQUFRLFVBQVU7Q0FLbkM7QUFMRCxvQkFLQztBQUVELE1BQWEsSUFBSyxTQUFRLFVBQVU7Q0FJbkM7QUFKRCxvQkFJQztBQUVELE1BQWEsS0FBTSxTQUFRLFVBQVU7Q0FJcEM7QUFKRCxzQkFJQztBQUVELE1BQWEsT0FBUSxTQUFRLFVBQVU7Q0FJdEM7QUFKRCwwQkFJQztBQUVELE1BQWEsSUFBSyxTQUFRLFVBQVU7Q0FJbkM7QUFKRCxvQkFJQztBQUVELE1BQWEsT0FBUSxTQUFRLFVBQVU7Q0FJdEM7QUFKRCwwQkFJQztBQUVELE1BQWEsS0FBTSxTQUFRLFVBQVU7Q0FLcEM7QUFMRCxzQkFLQztBQUVELE1BQWEsS0FBTSxTQUFRLFVBQVU7Q0FJcEM7QUFKRCxzQkFJQztBQUVELE1BQWEsVUFBVyxTQUFRLFVBQVU7Q0FLekM7QUFMRCxnQ0FLQztBQUVELE1BQWEsSUFBSyxTQUFRLFVBQVU7Q0FLbkM7QUFMRCxvQkFLQztBQUVELE1BQWEsT0FBUSxTQUFRLFVBQVU7Q0FJdEM7QUFKRCwwQkFJQztBQUVELE1BQWEsSUFBSyxTQUFRLFVBQVU7Q0FLbkM7QUFMRCxvQkFLQztBQUVELE1BQWEsU0FBVSxTQUFRLFVBQVU7Q0FJeEM7QUFKRCw4QkFJQztBQUVELE1BQWEsT0FBUSxTQUFRLFVBQVU7Q0FLdEM7QUFMRCwwQkFLQztBQUVELE1BQWEsSUFBSyxTQUFRLFVBQVU7Q0FLbkM7QUFMRCxvQkFLQztBQUVELE1BQWEsTUFBTyxTQUFRLFVBQVU7Q0FJckM7QUFKRCx3QkFJQztBQUVELE1BQWEsS0FBTSxTQUFRLFVBQVU7Q0FLcEM7QUFMRCxzQkFLQztBQUVELE1BQWEsT0FBUSxTQUFRLFVBQVU7Q0FJdEM7QUFKRCwwQkFJQztBQUVELE1BQWEsVUFBVyxTQUFRLFVBQVU7Q0FJekM7QUFKRCxnQ0FJQztBQUNELE1BQWEsS0FBTSxTQUFRLFVBQVU7Q0FJcEM7QUFKRCxzQkFJQztBQUVELE1BQWEsSUFBSyxTQUFRLFVBQVU7Q0FJbkM7QUFKRCxvQkFJQztBQUVELHdFQUF3RSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RWZmZWN0VGFibGV9IGZyb20gJy4vdGFibGUuZWZmZWN0JztcbmltcG9ydCB7TWVudVNsb3R9IGZyb20gJy4vbWVudS1zbG90JztcbmltcG9ydCB7QmFzZVNraWxsfSBmcm9tICcuL2Jhc2Uuc2tpbGwnO1xuXG4vLyBmdWVsP1xuLy8gV2hldGhlciB3aGVuIHBlcmZvcm1pbmcgbW92ZSBpZiBjaGFyYWN0ZXIgY2FuIGhvbGQgYWN0aW9uIHRvIHB1dCBtb3JlIGVmZm9ydCBpbnRvIGFjdGlvblxuZXhwb3J0IGVudW0gRm9jdXNhYmxlIHtcbiAgU1RBTUlOQSA9ICdTdGFtaW5hJyxcbiAgVFJVRSA9ICdUcnVlJyxcbiAgRkFMU0UgPSAnRmFsc2UnLFxufVxuXG5leHBvcnQgZW51bSBDbGFzc1NraWxsTGlzdCB7XG4gIEJBUlJJRVIgPSAnQmFycmllcicsXG4gIEJPQVNUID0gJ0JvYXN0JyxcbiAgRElTR1VJU0UgPSAnRGlzZ3Vpc2UnLFxuICBGT0NVUyA9ICdGb2N1cycsXG4gIEdSQVBQTEUgPSAnR3JhcHBsZScsXG4gIEhJREUgPSAnSGlkZScsXG4gIFNDQU4gPSAnU2NhbicsXG4gIENIRUVSID0gJ0NoZWVyJyxcbiAgU1VQUE9SVCA9ICdTdXBwb3J0JyxcbiAgSE9QRSA9ICdIb3BlJyxcbiAgSU5TUElSRSA9ICdJbnNwaXJlJyxcbiAgU0NPVVQgPSAnU2NvdXQnLFxuICBNSU1JQyA9ICdNaW1pYycsXG4gIFBJQ0tQT0NLRVQgPSAnUGlja3BvY2tldCcsXG4gIFNFQUwgPSAnU2VhbCcsXG4gIExVTExBQlkgPSAnTHVsbGFieScsXG4gIFdBUkQgPSAnV2FyZCcsXG4gIFNBQ1JJRklDRSA9ICdTYWNyaWZpY2UnLFxuICBQUk9URUNUID0gJ1Byb3RlY3QnLFxuICBNT0NLID0gJ01vY2snLFxuICBTRUFSQ0ggPSAnU2VhcmNoJyxcbiAgU1RFQUwgPSAnU3RlYWwnLFxuICBQUk9URUNUSU9OID0gJ1Byb3RlY3Rpb24nLFxuICBMSUdIVCA9ICdMaWdodCcsXG4gIFJFRkxFQ1QgPSAnUmVmbGVjdCcsXG4gIFJBR0UgPSAnUmFnZScsXG4gIERJU01JU1MgPSAnRGlzbWlzcycsXG59XG5cbi8vIHRvZG8gcmVhbGx5IHdoYXQgbWFrZXMgc29tZXRoaW5nIGEgY2xhc3Mgc2tpbGwgaXMgd2hldGhlciBpdCBjYW4gYmUgZWFybmVkIHZpYSBjbGFzcz8gZGVjb3VwbGVcblxuLyoqXG4gKiBDbGFzcyBTa2lsbHMgYXJlIG1vdG9yIHByb2dyYW1zIHRoYXQgYSBjaGFyYWN0ZXIgbGVhcm5zIHRvIHByZWZvcm0uXG4gKiBFYWNoIHNraWxsIGNhbiBiZSBhY3F1aXJlZCB2aWEgaXRlbXMsIGV0Yy4gYnV0IG9mdGVuXG4gKiBwcm9ncmVzc2lvbiBpcyBkZXRlcm1pbmVkIGJ5IGNsYXNzLlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ2xhc3NTa2lsbCBpbXBsZW1lbnRzIEJhc2VTa2lsbCB7XG4gIGFic3RyYWN0IG5hbWU6IHN0cmluZztcbiAgYWJzdHJhY3QgZGVzY3JpcHRpb246IHN0cmluZztcbiAgYWJzdHJhY3QgZWZmZWN0OiBFZmZlY3RUYWJsZTtcbiAgbWVudVNsb3Q6IE1lbnVTbG90LkZpcnN0O1xufVxuXG5leHBvcnQgY2xhc3MgQmFycmllciBleHRlbmRzIENsYXNzU2tpbGwge1xuICBuYW1lOiBDbGFzc1NraWxsTGlzdC5CQVJSSUVSO1xuICBkZXNjcmlwdGlvbjogJyc7XG4gIGVmZmVjdDogW107XG59XG5cbmV4cG9ydCBjbGFzcyBCb2FzdCBleHRlbmRzIENsYXNzU2tpbGwge1xuICBuYW1lOiBDbGFzc1NraWxsTGlzdC5CT0FTVDtcbiAgZGVzY3JpcHRpb246ICdpbmNyZWFzZSBwYXJ0eeKAmXMgbW9yYWwnO1xuICBlZmZlY3Q6IFtdO1xufVxuXG5leHBvcnQgY2xhc3MgRGlzZ3Vpc2UgZXh0ZW5kcyBDbGFzc1NraWxsIHtcbiAgbmFtZTogQ2xhc3NTa2lsbExpc3QuRElTR1VJU0U7XG4gIGRlc2NyaXB0aW9uOiAnQ2hhbmdlcyBhcHBlYXJhbmNlIGFuZCBkaXNhYmxlcyBjb21tYW5kIG1lbnUgdW50aWwgY2FuY2VsZWQuJztcbiAgZWZmZWN0OiBbXTtcbiAgLy8gc3RhbWluYVxufVxuXG5leHBvcnQgY2xhc3MgRGlzbWlzcyBleHRlbmRzIENsYXNzU2tpbGwge1xuICBuYW1lOiBDbGFzc1NraWxsTGlzdC5ESVNNSVNTO1xuICBkZXNjcmlwdGlvbjogJ1JlbGVhc2UgYSBzdW1tb24uJztcbiAgZWZmZWN0OiBbXTtcbn1cblxuZXhwb3J0IGNsYXNzIEZvY3VzIGV4dGVuZHMgQ2xhc3NTa2lsbCB7XG4gIG5hbWU6IENsYXNzU2tpbGxMaXN0LkZPQ1VTO1xuICBkZXNjcmlwdGlvbjogJ3JhaXNlIGF0dGFjayBhbmQgYXR0YWNrIHBlcmNlbnQgZm9yIGZvbGxvd2luZyBtb3ZlLic7XG4gIGVmZmVjdDogW107XG59XG5cbmV4cG9ydCBjbGFzcyBHcmFwcGxlIGV4dGVuZHMgQ2xhc3NTa2lsbCB7XG4gIG5hbWU6IENsYXNzU2tpbGxMaXN0LkdSQVBQTEU7XG4gIGRlc2NyaXB0aW9uOiAnTG93ZXJzIGNoYXJhY3RlciBhbmQgb3Bwb25lbnRzIGxpZmUuJztcbiAgZWZmZWN0OiBbXTtcbn1cblxuZXhwb3J0IGNsYXNzIEhpZGUgZXh0ZW5kcyBDbGFzc1NraWxsIHtcbiAgbmFtZTogQ2xhc3NTa2lsbExpc3QuSElERTtcbiAgZGVzY3JpcHRpb246ICdFbmVteSBjYW5ub3Qgc2VlIHlvdSc7XG4gIGVmZmVjdDogW107XG4gIC8vIFtzdGFtaW5hXVxufVxuXG5leHBvcnQgY2xhc3MgU2NhbiBleHRlbmRzIENsYXNzU2tpbGwge1xuICBuYW1lOiBDbGFzc1NraWxsTGlzdC5TQ0FOO1xuICBkZXNjcmlwdGlvbjogJ1JlYWQgZW5lbWllcyBzdGF0cy4nO1xuICBlZmZlY3Q6IFtdO1xufVxuXG5leHBvcnQgY2xhc3MgQ2hlZXIgZXh0ZW5kcyBDbGFzc1NraWxsIHtcbiAgbmFtZTogQ2xhc3NTa2lsbExpc3QuQ0hFRVI7XG4gIGRlc2NyaXB0aW9uOiAnVGFyZ2V0cyBTcGlyaXQgaW5jcmVhc2VzIGJ5IDEwJSBmb3IgYSBkdXJhdGlvbic7XG4gIGVmZmVjdDogW107XG59XG5cbmV4cG9ydCBjbGFzcyBTdXBwb3J0IGV4dGVuZHMgQ2xhc3NTa2lsbCB7XG4gIG5hbWU6IENsYXNzU2tpbGxMaXN0LlNVUFBPUlQ7XG4gIGRlc2NyaXB0aW9uOiAnUmVhZCBlbmVtaWVzIHN0YXRzLic7XG4gIGVmZmVjdDogW107XG59XG5cbmV4cG9ydCBjbGFzcyBIb3BlIGV4dGVuZHMgQ2xhc3NTa2lsbCB7XG4gIG5hbWU6IENsYXNzU2tpbGxMaXN0LkhPUEU7XG4gIGRlc2NyaXB0aW9uOiAnVGhlIG1vc3QgcG93ZXJmdWwgc3RhdHVzIGJvbnVzJztcbiAgZWZmZWN0OiBbXTtcbn1cblxuZXhwb3J0IGNsYXNzIEluc3BpcmUgZXh0ZW5kcyBDbGFzc1NraWxsIHtcbiAgbmFtZTogQ2xhc3NTa2lsbExpc3QuSU5TUElSRTtcbiAgZGVzY3JpcHRpb246ICdJbmNyZWFzZXMgdGFyZ2V0IERyaXZlIGdhdWdlJztcbiAgZWZmZWN0OiBbXTtcbn1cblxuZXhwb3J0IGNsYXNzIFNjb3V0IGV4dGVuZHMgQ2xhc3NTa2lsbCB7XG4gIG5hbWU6IENsYXNzU2tpbGxMaXN0LlNDT1VUO1xuICBkZXNjcmlwdGlvbjogJ01vdmUgYWhlYWQgb2YgcGFydHkuJztcbiAgZWZmZWN0OiBbXTtcbiAgLy8gY29uc3RhbnRseSBjb25zdW1lcyBzdGFtaW5hXG59XG5cbmV4cG9ydCBjbGFzcyBNaW1pYyBleHRlbmRzIENsYXNzU2tpbGwge1xuICBuYW1lOiBDbGFzc1NraWxsTGlzdC5NSU1JQztcbiAgZGVzY3JpcHRpb246ICdVc2UgdGhlIHNhbWUgbW92ZSB0aGF0IHdhcyB1c2VkIG9uIHlvdSBvbiB0aGUgZW5lbXkuJztcbiAgZWZmZWN0OiBbXTtcbn1cblxuZXhwb3J0IGNsYXNzIFBpY2twb2NrZXQgZXh0ZW5kcyBDbGFzc1NraWxsIHtcbiAgbmFtZTogQ2xhc3NTa2lsbExpc3QuUElDS1BPQ0tFVDtcbiAgZGVzY3JpcHRpb246ICdTdGVhbCBmcm9tIGVuZW15Lic7XG4gIGVmZmVjdDogW107XG4gIC8vIGNvc3QgW3N0YW1pbmFdXG59XG5cbmV4cG9ydCBjbGFzcyBTZWFsIGV4dGVuZHMgQ2xhc3NTa2lsbCB7XG4gIG5hbWU6IENsYXNzU2tpbGxMaXN0LlNFQUw7XG4gIGRlc2NyaXB0aW9uOiAnS2VlcCBlbmVtaWVzIGZyb20gZ2V0dGluZyBjbG9zZS4nOyAvL2hvbGQgYW4gZW5lbXkgb2ZmXG4gIC8vICAoR29vZCBmb3Igd2hlbiBwYXJ0eSBpcyBwb3dlcmluZyB1cClcbiAgZWZmZWN0OiBbXTtcbn1cblxuZXhwb3J0IGNsYXNzIEx1bGxhYnkgZXh0ZW5kcyBDbGFzc1NraWxsIHtcbiAgbmFtZTogQ2xhc3NTa2lsbExpc3QuTFVMTEFCWTtcbiAgZGVzY3JpcHRpb246ICdTZW5kIGVuZW1pZXMgbW92ZXMgYmFjayBhdCB0aGVtJztcbiAgZWZmZWN0OiBbXTtcbn1cblxuZXhwb3J0IGNsYXNzIFdhcmQgZXh0ZW5kcyBDbGFzc1NraWxsIHtcbiAgbmFtZTogQ2xhc3NTa2lsbExpc3QuV0FSRDtcbiAgZGVzY3JpcHRpb246ICdcIktlZXAgZW5lbWllcyBmcm9tIGdldHRpbmcgY2xvc2UuJztcbiAgLy8gIChHb29kIGZvciB3aGVuIHBhcnR5IGlzIHBvd2VyaW5nIHVwKVxuICBlZmZlY3Q6IFtdO1xufVxuXG5leHBvcnQgY2xhc3MgU2FjcmlmaWNlIGV4dGVuZHMgQ2xhc3NTa2lsbCB7XG4gIG5hbWU6IENsYXNzU2tpbGxMaXN0LlNBQ1JJRklDRTtcbiAgZGVzY3JpcHRpb246ICcnO1xuICBlZmZlY3Q6IFtdO1xufVxuXG5leHBvcnQgY2xhc3MgUHJvdGVjdCBleHRlbmRzIENsYXNzU2tpbGwge1xuICBuYW1lOiBDbGFzc1NraWxsTGlzdC5QUk9URUNUO1xuICBkZXNjcmlwdGlvbjogJ2d1YXJkIHBhcnR5IG1lbWJlcnMgYmVoaW5kIHlvdS4nO1xuICAvLyBbc3RhbWluYV1cbiAgZWZmZWN0OiBbXTtcbn1cblxuZXhwb3J0IGNsYXNzIE1vY2sgZXh0ZW5kcyBDbGFzc1NraWxsIHtcbiAgbmFtZTogQ2xhc3NTa2lsbExpc3QuTU9DSztcbiAgZGVzY3JpcHRpb246ICdtYWtlIGEgbW9ja2luZyBhY3Rpb24gdG8gY2F1c2UgQmVyc2VyayBvbiB0aGUgb3Bwb25lbnQnO1xuICAvLyBzdGFtaW5hXVxuICBlZmZlY3Q6IFtdO1xufVxuXG5leHBvcnQgY2xhc3MgU2VhcmNoIGV4dGVuZHMgQ2xhc3NTa2lsbCB7XG4gIG5hbWU6IENsYXNzU2tpbGxMaXN0LlNFQVJDSDtcbiAgZGVzY3JpcHRpb246ICdzY2FuIG5lYXJieSBhcmVhIGZvciBnb29kcy4nO1xuICBlZmZlY3Q6IFtdO1xufVxuXG5leHBvcnQgY2xhc3MgU3RlYWwgZXh0ZW5kcyBDbGFzc1NraWxsIHtcbiAgbmFtZTogQ2xhc3NTa2lsbExpc3QuU1RFQUw7XG4gIGRlc2NyaXB0aW9uOiAnVGFrZSBpdGVtIGZyb20gb3Bwb25lbnQnO1xuICAvLyBbc3RhbWluYV1cbiAgZWZmZWN0OiBbXTtcbn1cblxuZXhwb3J0IGNsYXNzIFJlZmxlY3QgZXh0ZW5kcyBDbGFzc1NraWxsIHtcbiAgbmFtZTogQ2xhc3NTa2lsbExpc3QuUkVGTEVDVDtcbiAgZGVzY3JpcHRpb246ICdTZW5kIGVuZW1pZXMgbW92ZXMgYmFjayBhdCB0aGVtLic7XG4gIGVmZmVjdDogW107XG59XG5cbmV4cG9ydCBjbGFzcyBQcm90ZWN0aW9uIGV4dGVuZHMgQ2xhc3NTa2lsbCB7XG4gIG5hbWU6IENsYXNzU2tpbGxMaXN0LlBST1RFQ1RJT047XG4gIGRlc2NyaXB0aW9uOiAnQ3JlYXRlIGEgYmFycmllciBhcm91bmQgYSBhbGx5JztcbiAgZWZmZWN0OiBbXTtcbn1cbmV4cG9ydCBjbGFzcyBMaWdodCBleHRlbmRzIENsYXNzU2tpbGwge1xuICBuYW1lOiBDbGFzc1NraWxsTGlzdC5MSUdIVDtcbiAgZGVzY3JpcHRpb246ICdLZWVwIGVuZW1pZXMgZnJvbSBtb3ZpbmcgZm9yIGEgZHVyYXRpb24gb2YgdGltZS4gQ2hhbmNlIFB1dHMgZW5lbXkgdG8gc2xlZXAuIFN0b3BzIHJhZ2UnO1xuICBlZmZlY3Q6IFtdO1xufVxuXG5leHBvcnQgY2xhc3MgUmFnZSBleHRlbmRzIENsYXNzU2tpbGwge1xuICBuYW1lOiBDbGFzc1NraWxsTGlzdC5SQUdFO1xuICBkZXNjcmlwdGlvbjogJ0luY3JlYXNlIHBvd2VyIGRlY3JlYXNlIHdpc2RvbSc7XG4gIGVmZmVjdDogW107XG59XG5cbi8vIFwiMTJcIixcIkJvYXN0L1JhbGx5L0luc3BpcmVcIixcIkluY3JlYXNlIGFsbGllcyBkZXRlcm1pbmF0aW9uXCIsXCIxMFwiLCxcIjEwXCJcbiJdfQ==