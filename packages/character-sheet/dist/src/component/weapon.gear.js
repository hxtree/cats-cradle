"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Weapons = exports.Weapon = exports.WeaponCategory = void 0;
/**
 * Weapon is a tag applied to a weapon class and is used to determine the damage type of the weapon.
 * It is used to determine equability, weakness and resistance.
 * For example, a character may be immune to unarmed attacks therefore boxing gloves would deal no damage.
 */
var WeaponCategory;
(function (WeaponCategory) {
    WeaponCategory["ARROW"] = "Arrow";
    WeaponCategory["BOW"] = "Bow";
    WeaponCategory["BLADE"] = "Blade";
    WeaponCategory["BOOMERANG"] = "Boomerange";
    WeaponCategory["BROAD_SWORD"] = "Broadsword";
    WeaponCategory["BLUNT"] = "Blunt";
    WeaponCategory["CLAW"] = "Claw";
    WeaponCategory["CROSSBOW"] = "Crossbow";
    WeaponCategory["DAGGER"] = "Dagger";
    WeaponCategory["DART"] = "Dart";
    WeaponCategory["FLAIL"] = "Flail";
    WeaponCategory["HAMMER"] = "Hammer";
    WeaponCategory["HAND_AXE"] = "Hand Axe";
    WeaponCategory["HAND_SWORD"] = "Hand Sword";
    WeaponCategory["HATCHET"] = "Hatchet";
    WeaponCategory["KNIFE"] = "Knife";
    WeaponCategory["MACE"] = "Mace";
    WeaponCategory["POLEARM"] = "Polearm";
    WeaponCategory["SHIELD"] = "Shield";
    WeaponCategory["STAFF"] = "Staff";
    WeaponCategory["SWORD"] = "Sword";
    WeaponCategory["SHIELD_SWORD"] = "Shield Sword";
    WeaponCategory["RAPIER"] = "Rapiers";
    WeaponCategory["TOME"] = "Tome";
    WeaponCategory["TWO_HANDED_AXE"] = "Two-handed Axe";
    WeaponCategory["WAND"] = "Wand";
    WeaponCategory["UNARMED"] = "Unarmed";
    WeaponCategory["UNKNOWN"] = "Unknown";
    WeaponCategory["PENDANT"] = "Pendant";
    WeaponCategory["DUAL_KYOKETSU_SHOGE"] = "Dual Kyoketsu Shoge";
})(WeaponCategory = exports.WeaponCategory || (exports.WeaponCategory = {}));
class Weapon {
}
exports.Weapon = Weapon;
var Weapons;
(function (Weapons) {
    Weapons["ASMINS_AXE"] = "Asmin's Axe";
    Weapons["GREAT_WAIL"] = "Great Wail";
    Weapons["JUSTICE"] = "Justice";
    Weapons["KEYSTONE"] = "Keystone";
    Weapons["ASSUALTER"] = "Assaulter";
    Weapons["STRIKER"] = "Striker";
    Weapons["ENERGY_BREAKER"] = "Energy Breaker";
    Weapons["STONE_BREAKER"] = "Stone Breaker";
    Weapons["THE_MAN_SLAYER"] = "The Man Slayer";
    Weapons["HEROS_BLADE"] = "Hero's Blade";
    Weapons["SWORD_OF_LAWZON"] = "Sword of Lawzon";
    Weapons["TINY_TIMBER"] = "Tiny Timber";
    Weapons["CADUCEUS"] = "Caduceus";
    Weapons["ANTEDILUVIAN"] = "Antediluvian";
    Weapons["ETERNAL_FOLD"] = "Eternal Fold";
    Weapons["GOLD_RUSH"] = "Gold Rush";
    Weapons["KINGS_BLADE"] = "Kings Blade";
    Weapons["RUSTY_RAPIER"] = "Rusty Rapier";
    Weapons["MYSTERIOUS_PENDANT"] = "Mysterious Pendant";
    Weapons["PEACEKEEPER"] = "PeaceKeeper";
    Weapons["TROUBLE_MAKER"] = "Trouble Maker";
    Weapons["STANDARD_ISSUE"] = "Standard Issue";
    Weapons["GREED"] = "Greed";
    Weapons["LIBERTY"] = "Liberty";
    Weapons["MONARCH"] = "Monarch";
    Weapons["REGRET"] = "Regret";
    Weapons["VICEROY"] = "Viceroy";
    Weapons["VIOLATED"] = "Violated";
})(Weapons = exports.Weapons || (exports.Weapons = {}));
/**
 * Axes
 * Axes are an extremely powerful branch of weapons that take a fierce amount of strength to wield but the damage provided by them is usually worth it.
 * Gear Slots – Right Hand AND Left Hand
 * Can be used by: Gunter
 */
class AsminsAze {
}
class GreatWail {
}
class Justice {
}
class Keystone {
}
/**
 * Boomerangs
 * Boomerangs – Boomerangs provide both a melee (slash) and a ranged (throw) attack.
 * If a boomerang is thrown make sure that it is not going to be caught or else you will be left without a weapon. If the weapon is caught then it maybe retrieved by defeating the enemy who caught it.
 * Gear Slots – Right Hand AND Left Hand
 * Can be used by: Traez
 */
class Assaulter {
}
class Striker {
}
/**
 * Shieldsword
 * They can also be used as a shield (Guard).
 *
 * Gear Slots – Right Hand AND Left Hand
 */
class EnergyBreaker {
    constructor() {
        this.description = 'An extremely large and heavy weapon that absorbs and releases energy.';
        // SPEED_DECREASE 1d5
        // FIRE 2d5
    }
}
class StoneBreaker {
}
class TheManSlayer {
}
/**
 * Broadsword
 * A heavy sword with a wide blade
 * They require two hands to wield, and difficult to maneuver yet have a strong attack.
 *
 * Gear Slots – Right Hand AND Left Hand
 */
class HerosBlade {
}
class SwordOfLawzon {
}
/**
 * Staff
 * Staffs are weapons designed as a focusing point for magical users to amplify and release their spells.
 * They can also be used to deal melee damage.
 */
class TinyTimber {
}
class Caduceus {
}
class Antediluvian {
}
/**
 * Rapiers
 * Rapiers are tremendously well crafted swords that have a narrow width.
 * Gear Slots – Right Hand OR Left Hand (only equipped one at a time)
 * Can be used by: Gaali
 */
class EternalFold {
}
class GoldRush {
}
class KingsBlade {
}
class RustyRapier {
}
/**
 * Pendants
 * Pendants – Pendants are Magical amplifiers that often increase the user’s stats and grants them new actions.
 * It takes two hands to be able to harness the power of the pendant.
 * Gear Slots – Necklace AND DISABLED (Right Hand AND Left Hand)
 * Can be used by: Loomee
 */
class MysteriousPendant {
}
class PeaceKeeper {
}
class TroubleMaker {
}
/**
 * Dual Kyoketsu Shoge
 * A weapon that can reach ranged targets.
 */
class StandardIssue {
}
/**
 * Knives
 * knives are small one handed weapons that are extremely quick to maneuver and deadly.
 * Gear Slots – Right Hand OR Left Hand
 * Can be used by: Malace
 */
// which one is Wisp’s Knife?
class Greed {
    constructor() {
        this.description = 'A intricate, powerful weapon that is capable of stealing the life from its target.';
        this.history = 'This weapon belonged to Wisp';
    }
}
class Liberty {
}
class Monarch {
}
class Regret {
}
class Viceroy {
}
class Violated {
}
/**
 * Shields
 */
// Buckler
//# sourceMappingURL=data:application/json;base64,