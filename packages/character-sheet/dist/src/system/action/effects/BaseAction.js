"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseAction = exports.ActionCategory = void 0;
var ActionCategory;
(function (ActionCategory) {
    ActionCategory["MOVEMENT"] = "Movement";
    ActionCategory["MENU"] = "Menu";
    ActionCategory["COMBO"] = "Combo";
    ActionCategory["INTERACTION"] = "Interaction";
    ActionCategory["WEAPON"] = "Weapon";
    ActionCategory["CLASS"] = "Class";
    ActionCategory["DRIVE"] = "Drive";
    ActionCategory["PARTY"] = "Party";
    ActionCategory["GEAR"] = "Gear";
    ActionCategory["NATURAL"] = "Natural";
})(ActionCategory = exports.ActionCategory || (exports.ActionCategory = {}));
/**
 * Actions are decoupled from the actor and target.
 * Each action SHOULD scale in computation based on actors and target stats.
 * Two vastly different skilled actors performing the same action may foresably yield vastly different effects.
 */
class BaseAction {
    constructor(actors, targets) {
        this._actors = actors;
        this._targets = targets;
    }
    get name() {
        return this._name;
    }
    get description() {
        return this._description;
    }
    /**
     * Every action can be represented by the time it takes to peform various stages of the action.
     * Although it's possble the time to perform an action is null, most user based action will take time to perform.
     * Each stage may be a different method depending on the action.
     * The duration and effects change character to character.
     */
    get totalDuration() {
        return this.perpareTime + this.executionTime + this.recoveryTime;
    }
}
exports.BaseAction = BaseAction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmFzZUFjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9zeXN0ZW0vYWN0aW9uL2VmZmVjdHMvQmFzZUFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFRQSxJQUFZLGNBV1g7QUFYRCxXQUFZLGNBQWM7SUFDdEIsdUNBQXFCLENBQUE7SUFDckIsK0JBQWEsQ0FBQTtJQUNiLGlDQUFlLENBQUE7SUFDZiw2Q0FBMkIsQ0FBQTtJQUMzQixtQ0FBaUIsQ0FBQTtJQUNqQixpQ0FBZSxDQUFBO0lBQ2YsaUNBQWUsQ0FBQTtJQUNmLGlDQUFlLENBQUE7SUFDZiwrQkFBYSxDQUFBO0lBQ2IscUNBQW1CLENBQUE7QUFDdkIsQ0FBQyxFQVhXLGNBQWMsR0FBZCxzQkFBYyxLQUFkLHNCQUFjLFFBV3pCO0FBRUQ7Ozs7R0FJRztBQUNILE1BQXNCLFVBQVU7SUFVNUIsWUFBWSxNQUF3QixFQUFFLE9BQXlCO1FBQzNELElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO0lBQzVCLENBQUM7SUFJRCxJQUFXLElBQUk7UUFDWCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUVELElBQVcsV0FBVztRQUNsQixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDN0IsQ0FBQztJQWlDRDs7Ozs7T0FLRztJQUNILElBQVcsYUFBYTtRQUNwQixPQUFPLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQ3JFLENBQUM7Q0FDSjtBQWpFRCxnQ0FpRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUaGluZyB9IGZyb20gJy4uL1dJUC9jb250cmFjdHMvVGhpbmcnO1xuaW1wb3J0IHsgQ2hhcmFjdGVyIH0gZnJvbSAnLi4vZW50aXR5L0NoYXJhY3Rlcic7XG5pbXBvcnQgeyBBdHRyaWJ1dGUgfSBmcm9tICcuLi9XSVAvQXR0cmlidXRlJztcbmltcG9ydCB7IEVmZmVjdHMgfSBmcm9tICcuLi9XSVAvRWZmZWN0cyc7XG5cbnR5cGUgRmFjdG9yID0gW0F0dHJpYnV0ZSwgbnVtYmVyLCBzdHJpbmcsIHN0cmluZ107XG50eXBlIFRyYWl0ID0gRmFjdG9yO1xuXG5leHBvcnQgZW51bSBBY3Rpb25DYXRlZ29yeSB7XG4gICAgTU9WRU1FTlQgPSAnTW92ZW1lbnQnLCAvLyBjaGFuZ2VzIHBvc2l0aW9uXG4gICAgTUVOVSA9ICdNZW51JywgLy8gYWN0aXZhdGVkIHZpYSBtZW51XG4gICAgQ09NQk8gPSAnQ29tYm8nLCAvLyBhY3RpdmF0ZWQgdmlhIGNvbWJvXG4gICAgSU5URVJBQ1RJT04gPSAnSW50ZXJhY3Rpb24nLFxuICAgIFdFQVBPTiA9ICdXZWFwb24nLFxuICAgIENMQVNTID0gJ0NsYXNzJyxcbiAgICBEUklWRSA9ICdEcml2ZScsXG4gICAgUEFSVFkgPSAnUGFydHknLFxuICAgIEdFQVIgPSAnR2VhcicsIC8vIGFyZSByZWxhdGVkIHRvIHRoZSB1c2Ugb2YgZ2VhclxuICAgIE5BVFVSQUwgPSAnTmF0dXJhbCcsIC8vICBhY3Rpb25zIHRoYXQgZG8gbm90IG5lZWQgdG8gYmUgY2FsbGVkIHRvIGJlIHVzZWRcbn1cblxuLyoqXG4gKiBBY3Rpb25zIGFyZSBkZWNvdXBsZWQgZnJvbSB0aGUgYWN0b3IgYW5kIHRhcmdldC4gXG4gKiBFYWNoIGFjdGlvbiBTSE9VTEQgc2NhbGUgaW4gY29tcHV0YXRpb24gYmFzZWQgb24gYWN0b3JzIGFuZCB0YXJnZXQgc3RhdHMuXG4gKiBUd28gdmFzdGx5IGRpZmZlcmVudCBza2lsbGVkIGFjdG9ycyBwZXJmb3JtaW5nIHRoZSBzYW1lIGFjdGlvbiBtYXkgZm9yZXNhYmx5IHlpZWxkIHZhc3RseSBkaWZmZXJlbnQgZWZmZWN0cy5cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VBY3Rpb24ge1xuICAgIFxuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBfaWQ6IG51bWJlcjtcbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgX25hbWU6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgX2Rlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IF9jYXRlZ29yeTogQWN0aW9uQ2F0ZWdvcnk7XG4gICAgXG4gICAgcHJvdGVjdGVkIF9hY3RvcnM6IEFycmF5PENoYXJhY3Rlcj47ICAgIFxuICAgIHByb3RlY3RlZCBfdGFyZ2V0czogQXJyYXk8Q2hhcmFjdGVyPjtcblxuICAgIGNvbnN0cnVjdG9yKGFjdG9yczogQXJyYXk8Q2hhcmFjdGVyPiwgdGFyZ2V0czogQXJyYXk8Q2hhcmFjdGVyPikge1xuICAgICAgICB0aGlzLl9hY3RvcnMgPSBhY3RvcnM7XG4gICAgICAgIHRoaXMuX3RhcmdldHMgPSB0YXJnZXRzO1xuICAgIH1cblxuICAgIGFic3RyYWN0IGV4ZWN1dGUoYWN0b3JzOiBBcnJheTxUaGluZz4sIHRhcmdldHM6IEFycmF5PFRoaW5nPik6IEVmZmVjdHM7XG5cbiAgICBwdWJsaWMgZ2V0IG5hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX25hbWU7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBkZXNjcmlwdGlvbigpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVzY3JpcHRpb247XG4gICAgfVxuXG4gICAgLy8gaW50ZXJ1cHRzP1xuICAgIC8vIHNob3VsZCB0aGVzZSBiZSBhY3R1YWwgRGF0ZSB0aW1lcz9cblxuICAgIC8qKiBcbiAgICAgKiBUaGUgdGltZSBzcGVudCBiZWZvcmUgYW4gYWN0aW9uIGNhbiBiZSB0YWtlbi5cbiAgICAgKiBCZWluZyBpbiB0aGUgYWN0IG9mIHByZXBhcmluZyBtYXkgY2hhbmdlIG9uZSdzIGRlZmVuc2UsIGV0Yy5cbiAgICAgKiBCZWZvcmUgYSBwcmVwYXJlVGltZSBhIGNoYXJhY3RlciBtdXN0IGJlIGlkbGUuXG4gICAgICovXG4gICAgYWJzdHJhY3QgZ2V0IHBlcnBhcmVUaW1lKCkgOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiB0aGUgYW1vdW50IG9mIHRpbWUgYW4gYWN0aW9uIHRha2VzIHRvIGV4ZWN1dGVcbiAgICAgKi9cbiAgICBhYnN0cmFjdCBnZXQgZXhlY3V0aW9uVGltZSgpIDogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHJlY292ZXJ5IHN0YWdlIHJlcHJlc2VudHMgdGhlIHRpbWUgc3BlbnQgdG8gcmVjb3ZlciBmcm9tIGFuIGFjdGlvbi4gXG4gICAgICogUmVjb3Zlcnkgc3RhZ2UgbWF5IHZhcnkgZ3JlYXRseSBkZXBlbmRpbmcgb24gdGhlIG5hdHVyZSBvZiB0aGUgYWN0aW9ucy4gXG4gICAgICogU29tZSBhY3Rpb25zIG1heSBjYXVzZSBpbW1vYmxpemF0aW9uLCBldGMuIGR1cmluZyB0aGUgcmVjb3Zlcnkgc3RhZ2UuIFxuICAgICAqIE90aGVycyBtYXkgc2ltcGx5IHByZXZlbnQgcmV1c2UgZm9yIGEgZHVyYXRpb24uIFxuICAgICAqIFJlY292ZXJpZXMgbWF5IHN0YWNrIGFuZCB0aGVzZSBzdGFja3MgbWF5IGhhdmUgaGF2ZSBwaHlzaWNsb2dpY2FsIHN5bXB0b21zLCBcbiAgICAgKiBzdWNoIGFzIGFmZmxpY3Rpb25zLCBidXQgb2Z0ZW4gYXJlIG5vdCB2aXNpYmxlLlxuICAgICAqIEFmdGVyIGEgcmVjb3ZlcnkgdGltZSB0aGUgY2hhcmFjdGVyIHJldHVybnMgdG8gYSBpZGxlIHN0YXRlLlxuICAgICAqL1xuICAgIGFic3RyYWN0IGdldCByZWNvdmVyeVRpbWUoKSA6IG51bWJlcjtcblxuICAgICAvKipcbiAgICAgKiB0aGUgYW1vdW50IG9mIHRpbWUgYmVmb3JlIHRoZSBhY3Rpb24gY2FuIGJlIGV4ZWN1dGVkIGFnYWluXG4gICAgICovXG4gICAgYWJzdHJhY3QgZ2V0IGNvb2xkb3duVGltZSgpIDogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogRXZlcnkgYWN0aW9uIGNhbiBiZSByZXByZXNlbnRlZCBieSB0aGUgdGltZSBpdCB0YWtlcyB0byBwZWZvcm0gdmFyaW91cyBzdGFnZXMgb2YgdGhlIGFjdGlvbi5cbiAgICAgKiBBbHRob3VnaCBpdCdzIHBvc3NibGUgdGhlIHRpbWUgdG8gcGVyZm9ybSBhbiBhY3Rpb24gaXMgbnVsbCwgbW9zdCB1c2VyIGJhc2VkIGFjdGlvbiB3aWxsIHRha2UgdGltZSB0byBwZXJmb3JtLlxuICAgICAqIEVhY2ggc3RhZ2UgbWF5IGJlIGEgZGlmZmVyZW50IG1ldGhvZCBkZXBlbmRpbmcgb24gdGhlIGFjdGlvbi5cbiAgICAgKiBUaGUgZHVyYXRpb24gYW5kIGVmZmVjdHMgY2hhbmdlIGNoYXJhY3RlciB0byBjaGFyYWN0ZXIuXG4gICAgICovXG4gICAgcHVibGljIGdldCB0b3RhbER1cmF0aW9uKCkgOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5wZXJwYXJlVGltZSArIHRoaXMuZXhlY3V0aW9uVGltZSArIHRoaXMucmVjb3ZlcnlUaW1lO1xuICAgIH1cbn1cblxuXG4iXX0=