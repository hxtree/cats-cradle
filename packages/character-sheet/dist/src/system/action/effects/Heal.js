"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseAction_1 = require("./BaseAction");
const Effects_1 = require("../WIP/Effects");
const Attribute_1 = require("../WIP/Attribute");
class HealAction extends BaseAction_1.BaseAction {
    /* {@inheritDoc} */
    get waitTime() {
        let avgSpeed = 0;
        this._targets.forEach(target => {
            avgSpeed += target.speed;
        });
        return Date.now() + (avgSpeed * this._targets.length);
    }
    /* {@inheritDoc} */
    get executionTime() {
        let avgSpeed = 0;
        this._targets.forEach(target => {
            avgSpeed += target.speed;
        });
        return Date.now() + (avgSpeed * this._targets.length);
    }
    /* {@inheritDoc} */
    get recoveryTime() {
        let avgSpeed = 0;
        this._targets.forEach(target => {
            avgSpeed += target.speed;
        });
        return Date.now() + (avgSpeed * this._targets.length);
    }
    /* {@inheritDoc} */
    get cooldownTime() {
        let avgSpeed = 0;
        this._targets.forEach(target => {
            avgSpeed += target.speed;
        });
        return Date.now() + (avgSpeed * this._targets.length);
    }
    /* {@inheritDoc} */
    execute(actors, targets) {
        let effects = [];
        for (let target of targets) {
            let amount = Math.floor(Math.random() * 10);
            effects.push(new Effects_1.Effect(target.id, Attribute_1.Attribute.Life, amount));
        }
        return effects;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSGVhbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9zeXN0ZW0vYWN0aW9uL2VmZmVjdHMvSGVhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZDQUEwRDtBQUUxRCw0Q0FBc0M7QUFDdEMsZ0RBQTJDO0FBRTNDLE1BQU0sVUFBVyxTQUFRLHVCQUFVO0lBTy9CLG1CQUFtQjtJQUNuQixJQUFXLFFBQVE7UUFDZixJQUFJLFFBQVEsR0FBRyxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDM0IsUUFBUSxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDN0IsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFRCxtQkFBbUI7SUFDbkIsSUFBVyxhQUFhO1FBQ3BCLElBQUksUUFBUSxHQUFHLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUMzQixRQUFRLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQztRQUM3QixDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVELG1CQUFtQjtJQUNuQixJQUFXLFlBQVk7UUFDbkIsSUFBSSxRQUFRLEdBQUcsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQzNCLFFBQVEsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDO1FBQzdCLENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBRUQsbUJBQW1CO0lBQ25CLElBQVcsWUFBWTtRQUNuQixJQUFJLFFBQVEsR0FBRyxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDM0IsUUFBUSxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDN0IsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFRCxtQkFBbUI7SUFDbkIsT0FBTyxDQUFDLE1BQW9CLEVBQUUsT0FBcUI7UUFDL0MsSUFBSSxPQUFPLEdBQWtCLEVBQUUsQ0FBQztRQUNoQyxLQUFLLElBQUksTUFBTSxJQUFJLE9BQU8sRUFBRTtZQUN4QixJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUM1QyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksZ0JBQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLHFCQUFTLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7U0FDL0Q7UUFDRCxPQUFPLE9BQU8sQ0FBQztJQUNuQixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlQWN0aW9uLCBBY3Rpb25DYXRlZ29yeSB9IGZyb20gXCIuL0Jhc2VBY3Rpb25cIjtcbmltcG9ydCB7VGhpbmd9IGZyb20gXCIuLi9jaGFyYWN0ZXIvVGhpbmdcIjtcbmltcG9ydCB7RWZmZWN0fSBmcm9tIFwiLi4vV0lQL0VmZmVjdHNcIjtcbmltcG9ydCB7QXR0cmlidXRlfSBmcm9tIFwiLi4vV0lQL0F0dHJpYnV0ZVwiO1xuXG5jbGFzcyBIZWFsQWN0aW9uIGV4dGVuZHMgQmFzZUFjdGlvbiB7XG5cbiAgICBwcm90ZWN0ZWQgX2lkOiAwO1xuICAgIHByb3RlY3RlZCBfbmFtZTogXCJIZWFsXCI7XG4gICAgcHJvdGVjdGVkIF9kZXNjcmlwdGlvbjogXCJIZWFsIGEgdGFyZ2V0XCI7XG4gICAgcHJvdGVjdGVkIF9jYXRlZ29yeTogQWN0aW9uQ2F0ZWdvcnkuTUVOVTtcbiAgICAgIFxuICAgIC8qIHtAaW5oZXJpdERvY30gKi9cbiAgICBwdWJsaWMgZ2V0IHdhaXRUaW1lKCkgOiBudW1iZXIge1xuICAgICAgICBsZXQgYXZnU3BlZWQgPSAwO1xuICAgICAgICB0aGlzLl90YXJnZXRzLmZvckVhY2godGFyZ2V0ID0+IHsgXG4gICAgICAgICAgICBhdmdTcGVlZCArPSB0YXJnZXQuc3BlZWQ7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gRGF0ZS5ub3coKSArIChhdmdTcGVlZCAqIHRoaXMuX3RhcmdldHMubGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKiB7QGluaGVyaXREb2N9ICovXG4gICAgcHVibGljIGdldCBleGVjdXRpb25UaW1lKCkgOiBudW1iZXIge1xuICAgICAgICBsZXQgYXZnU3BlZWQgPSAwO1xuICAgICAgICB0aGlzLl90YXJnZXRzLmZvckVhY2godGFyZ2V0ID0+IHsgXG4gICAgICAgICAgICBhdmdTcGVlZCArPSB0YXJnZXQuc3BlZWQ7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gRGF0ZS5ub3coKSArIChhdmdTcGVlZCAqIHRoaXMuX3RhcmdldHMubGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKiB7QGluaGVyaXREb2N9ICovXG4gICAgcHVibGljIGdldCByZWNvdmVyeVRpbWUoKSA6IG51bWJlciB7XG4gICAgICAgIGxldCBhdmdTcGVlZCA9IDA7XG4gICAgICAgIHRoaXMuX3RhcmdldHMuZm9yRWFjaCh0YXJnZXQgPT4geyBcbiAgICAgICAgICAgIGF2Z1NwZWVkICs9IHRhcmdldC5zcGVlZDtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBEYXRlLm5vdygpICsgKGF2Z1NwZWVkICogdGhpcy5fdGFyZ2V0cy5sZW5ndGgpO1xuICAgIH1cblxuICAgIC8qIHtAaW5oZXJpdERvY30gKi9cbiAgICBwdWJsaWMgZ2V0IGNvb2xkb3duVGltZSgpIDogbnVtYmVyIHtcbiAgICAgICAgbGV0IGF2Z1NwZWVkID0gMDtcbiAgICAgICAgdGhpcy5fdGFyZ2V0cy5mb3JFYWNoKHRhcmdldCA9PiB7IFxuICAgICAgICAgICAgYXZnU3BlZWQgKz0gdGFyZ2V0LnNwZWVkO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIERhdGUubm93KCkgKyAoYXZnU3BlZWQgKiB0aGlzLl90YXJnZXRzLmxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoge0Bpbmhlcml0RG9jfSAqL1xuICAgIGV4ZWN1dGUoYWN0b3JzOiBBcnJheTxUaGluZz4sIHRhcmdldHM6IEFycmF5PFRoaW5nPikge1xuICAgICAgICBsZXQgZWZmZWN0czogQXJyYXk8RWZmZWN0PiA9IFtdO1xuICAgICAgICBmb3IgKGxldCB0YXJnZXQgb2YgdGFyZ2V0cykge1xuICAgICAgICAgICAgbGV0IGFtb3VudCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKTsgXG4gICAgICAgICAgICBlZmZlY3RzLnB1c2gobmV3IEVmZmVjdCh0YXJnZXQuaWQsIEF0dHJpYnV0ZS5MaWZlLCBhbW91bnQpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZWZmZWN0cztcbiAgICB9XG59XG4iXX0=