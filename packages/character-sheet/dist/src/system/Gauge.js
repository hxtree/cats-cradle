"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Gauge = void 0;
/**
 * Gauge
 * A gauge is a value that can go up and down but never go below zero.
 */
class Gauge {
    constructor(current, max, min = 0) {
        this._current = current;
        this._max = max;
        this._min = min;
    }
    toString() {
        return `${this._current}/${this._max}`;
    }
    add(amount) {
        this._current += amount;
        if (this._current > this._max) {
            this._current = this._max;
        }
        if (this._current < this._min) {
            this._current = this._min;
        }
    }
    sub(amount) {
        this.add(-amount);
    }
    get max() {
        return this._max;
    }
    set max(max) {
        this._max = max;
    }
    get min() {
        return this._min;
    }
    set min(min) {
        this._min = min;
    }
    get current() {
        return this._current;
    }
    set current(current) {
        this._current = current;
    }
    toJSON() {
        return {
            min: this._min,
            max: this._max,
            current: this._current,
        };
    }
}
exports.Gauge = Gauge;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2F1Z2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3lzdGVtL0dhdWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBOzs7R0FHRztBQUNILE1BQWEsS0FBSztJQUtkLFlBQVksT0FBZSxFQUFFLEdBQVcsRUFBRSxNQUFjLENBQUM7UUFDckQsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7UUFDeEIsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7UUFDaEIsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7SUFDcEIsQ0FBQztJQUVNLFFBQVE7UUFDWCxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDM0MsQ0FBQztJQUVPLEdBQUcsQ0FBQyxNQUFjO1FBQ3RCLElBQUksQ0FBQyxRQUFRLElBQUksTUFBTSxDQUFDO1FBQ3hCLElBQUksSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQzNCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztTQUM3QjtRQUNELElBQUksSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQzNCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztTQUM3QjtJQUNMLENBQUM7SUFFTSxHQUFHLENBQUMsTUFBYztRQUNyQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUVELElBQVcsR0FBRztRQUNWLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNyQixDQUFDO0lBRUQsSUFBVyxHQUFHLENBQUMsR0FBVztRQUN0QixJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztJQUNwQixDQUFDO0lBRUQsSUFBVyxHQUFHO1FBQ1YsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxJQUFXLEdBQUcsQ0FBQyxHQUFXO1FBQ3RCLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO0lBQ3BCLENBQUM7SUFFRCxJQUFXLE9BQU87UUFDZCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDekIsQ0FBQztJQUVELElBQVcsT0FBTyxDQUFDLE9BQWU7UUFDOUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7SUFDNUIsQ0FBQztJQUdNLE1BQU07UUFDVCxPQUFPO1lBQ0gsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ2QsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ2QsT0FBTyxFQUFFLElBQUksQ0FBQyxRQUFRO1NBQ3pCLENBQUM7SUFDTixDQUFDO0NBQ0o7QUE3REQsc0JBNkRDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBHYXVnZVxuICogQSBnYXVnZSBpcyBhIHZhbHVlIHRoYXQgY2FuIGdvIHVwIGFuZCBkb3duIGJ1dCBuZXZlciBnbyBiZWxvdyB6ZXJvLlxuICovXG5leHBvcnQgY2xhc3MgR2F1Z2Uge1xuICAgIHByaXZhdGUgX21pbjogbnVtYmVyO1xuICAgIHByaXZhdGUgX2N1cnJlbnQ6IG51bWJlcjtcbiAgICBwcml2YXRlIF9tYXg6IG51bWJlcjtcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihjdXJyZW50OiBudW1iZXIsIG1heDogbnVtYmVyLCBtaW46IG51bWJlciA9IDApIHtcbiAgICAgICAgdGhpcy5fY3VycmVudCA9IGN1cnJlbnQ7XG4gICAgICAgIHRoaXMuX21heCA9IG1heDtcbiAgICAgICAgdGhpcy5fbWluID0gbWluO1xuICAgIH1cblxuICAgIHB1YmxpYyB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5fY3VycmVudH0vJHt0aGlzLl9tYXh9YDtcbiAgICB9XG4gICAgXG4gICAgcHJpdmF0ZSBhZGQoYW1vdW50OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5fY3VycmVudCArPSBhbW91bnQ7XG4gICAgICAgIGlmICh0aGlzLl9jdXJyZW50ID4gdGhpcy5fbWF4KSB7XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50ID0gdGhpcy5fbWF4O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9jdXJyZW50IDwgdGhpcy5fbWluKSB7XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50ID0gdGhpcy5fbWluO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHN1YihhbW91bnQ6IG51bWJlcikge1xuICAgICAgICB0aGlzLmFkZCgtYW1vdW50KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IG1heCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWF4O1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXQgbWF4KG1heDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuX21heCA9IG1heDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IG1pbigpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWluO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXQgbWluKG1pbjogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuX21pbiA9IG1pbjtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGN1cnJlbnQoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2N1cnJlbnQ7XG4gICAgfVxuXG4gICAgcHVibGljIHNldCBjdXJyZW50KGN1cnJlbnQ6IG51bWJlcikge1xuICAgICAgICB0aGlzLl9jdXJyZW50ID0gY3VycmVudDtcbiAgICB9XG5cbiAgICBcbiAgICBwdWJsaWMgdG9KU09OKCk6IGFueSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtaW46IHRoaXMuX21pbixcbiAgICAgICAgICAgIG1heDogdGhpcy5fbWF4LFxuICAgICAgICAgICAgY3VycmVudDogdGhpcy5fY3VycmVudCxcbiAgICAgICAgfTtcbiAgICB9XG59Il19