"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseDiscipline = exports.Discipline = exports.DisciplineCategory = void 0;
var DisciplineCategory;
(function (DisciplineCategory) {
    DisciplineCategory["PROFESSION"] = "Profession";
    DisciplineCategory["ARCHETYPE"] = "Archetype";
})(DisciplineCategory = exports.DisciplineCategory || (exports.DisciplineCategory = {}));
// Combat Classes
// Specialty Classes
// Drive Classes
// Omega Classes
//  | Spirit Class | Drive Class | Omega Class
var Discipline;
(function (Discipline) {
    // penny 
    Discipline["NINJA"] = "Ninja";
    Discipline["AMBER_ASSASSIN"] = "Amber Assassin";
    Discipline["ELITE_ASSASIN"] = "Elite Assasin";
    Discipline["THIEF"] = "Thief";
    // loomee
    Discipline["CHEERLEADER"] = "Cheerleader";
    Discipline["MADIEN"] = "Madien";
    Discipline["KEEPER"] = "Keeper";
    // gaali
    Discipline["BARD"] = "Bard";
    Discipline["DUELIST"] = "Duelist";
    Discipline["KNIGHT"] = "Knight";
    Discipline["RUNE_KING"] = "Rune King";
    // gunter
    Discipline["GAURD"] = "Gaurd";
    Discipline["BODY_BUILDER"] = "Body Builder";
    Discipline["COMMANDER"] = "Commander";
    // traez
    Discipline["ENGINEER"] = "Engineer";
    Discipline["LIGHTENING_WARRIOR"] = "Lightening Warrior";
    Discipline["REBEL"] = "Rebel";
    // meeku
    Discipline["SOLIDER"] = "Solider";
    Discipline["XSOLIDER"] = "XSolider";
    Discipline["BERSERKER"] = "Berserker";
    Discipline["ONI"] = "Oni";
    // malace
    Discipline["GYMNAST"] = "Gymnast";
    Discipline["POSSESSED"] = "Possessed";
    Discipline["SCOUT"] = "Scout";
    Discipline["OUROBOROS"] = "Ouroboros";
    // faye
    Discipline["WIZARD"] = "Wizard";
    Discipline["HISTORIAN"] = "Historian";
    Discipline["MAGI"] = "Magi";
    // other
    Discipline["WARRIOR"] = "Warrior";
})(Discipline = exports.Discipline || (exports.Discipline = {}));
class BaseDiscipline {
    constructor(experience = 0) {
        this._experience = experience;
    }
    get level() {
        return Math.floor(Math.sqrt(this._experience / 100));
    }
    get nextLevel() {
        return (this._experience - (this.level * (this.level - 1) / 2) * 100);
    }
    get experienceToNextLevel() {
        return this.nextLevel - this._experience;
    }
    get experienceToNextLevelPercentage() {
        return this.experienceToNextLevel / this.nextLevel;
    }
    // todo load from Class
    get effects() {
        return [];
    }
}
exports.BaseDiscipline = BaseDiscipline;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmFzZURpc2NpcGxpbmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvZWNzL2NvbXBvbmVudC9jaGFyYWN0ZXIvZGlzY2lwbGluZS9CYXNlRGlzY2lwbGluZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxJQUFZLGtCQUdYO0FBSEQsV0FBWSxrQkFBa0I7SUFDMUIsK0NBQXlCLENBQUE7SUFDekIsNkNBQXVCLENBQUE7QUFDM0IsQ0FBQyxFQUhXLGtCQUFrQixHQUFsQiwwQkFBa0IsS0FBbEIsMEJBQWtCLFFBRzdCO0FBRUQsaUJBQWlCO0FBQ2pCLG9CQUFvQjtBQUNwQixnQkFBZ0I7QUFDaEIsZ0JBQWdCO0FBQ2hCLDhDQUE4QztBQUU5QyxJQUFZLFVBdUNYO0FBdkNELFdBQVksVUFBVTtJQUNsQixTQUFTO0lBQ1QsNkJBQWUsQ0FBQTtJQUNmLCtDQUFpQyxDQUFBO0lBQ2pDLDZDQUErQixDQUFBO0lBQy9CLDZCQUFlLENBQUE7SUFDZixTQUFTO0lBQ1QseUNBQTJCLENBQUE7SUFDM0IsK0JBQWlCLENBQUE7SUFDakIsK0JBQWlCLENBQUE7SUFDakIsUUFBUTtJQUNSLDJCQUFhLENBQUE7SUFDYixpQ0FBbUIsQ0FBQTtJQUNuQiwrQkFBaUIsQ0FBQTtJQUNqQixxQ0FBdUIsQ0FBQTtJQUN2QixTQUFTO0lBQ1QsNkJBQWUsQ0FBQTtJQUNmLDJDQUE2QixDQUFBO0lBQzdCLHFDQUF1QixDQUFBO0lBQ3ZCLFFBQVE7SUFDUixtQ0FBcUIsQ0FBQTtJQUNyQix1REFBeUMsQ0FBQTtJQUN6Qyw2QkFBZSxDQUFBO0lBQ2YsUUFBUTtJQUNSLGlDQUFtQixDQUFBO0lBQ25CLG1DQUFxQixDQUFBO0lBQ3JCLHFDQUF1QixDQUFBO0lBQ3ZCLHlCQUFXLENBQUE7SUFDWCxTQUFTO0lBQ1QsaUNBQW1CLENBQUE7SUFDbkIscUNBQXVCLENBQUE7SUFDdkIsNkJBQWUsQ0FBQTtJQUNmLHFDQUF1QixDQUFBO0lBQ3ZCLE9BQU87SUFDUCwrQkFBaUIsQ0FBQTtJQUNqQixxQ0FBdUIsQ0FBQTtJQUN2QiwyQkFBYSxDQUFBO0lBQ2IsUUFBUTtJQUNSLGlDQUFtQixDQUFBO0FBQ3ZCLENBQUMsRUF2Q1csVUFBVSxHQUFWLGtCQUFVLEtBQVYsa0JBQVUsUUF1Q3JCO0FBRUQsTUFBc0IsY0FBYztJQU9oQyxZQUFtQixhQUFxQixDQUFDO1FBQ3JDLElBQUksQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFDO0lBQ2xDLENBQUM7SUFFRCxJQUFXLEtBQUs7UUFDWixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVELElBQVcsU0FBUztRQUNoQixPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFFRCxJQUFXLHFCQUFxQjtRQUM1QixPQUFPLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUM3QyxDQUFDO0lBRUQsSUFBVywrQkFBK0I7UUFDdEMsT0FBTyxJQUFJLENBQUMscUJBQXFCLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN2RCxDQUFDO0lBRUQsdUJBQXVCO0lBQ3ZCLElBQVcsT0FBTztRQUNkLE9BQU8sRUFBRSxDQUFDO0lBQ2QsQ0FBQztDQUVKO0FBaENELHdDQWdDQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBlbnVtIERpc2NpcGxpbmVDYXRlZ29yeSB7XG4gICAgUFJPRkVTU0lPTiA9ICdQcm9mZXNzaW9uJyxcbiAgICBBUkNIRVRZUEUgPSAnQXJjaGV0eXBlJ1xufVxuXG4vLyBDb21iYXQgQ2xhc3Nlc1xuLy8gU3BlY2lhbHR5IENsYXNzZXNcbi8vIERyaXZlIENsYXNzZXNcbi8vIE9tZWdhIENsYXNzZXNcbi8vICB8IFNwaXJpdCBDbGFzcyB8IERyaXZlIENsYXNzIHwgT21lZ2EgQ2xhc3NcblxuZXhwb3J0IGVudW0gRGlzY2lwbGluZSB7XG4gICAgLy8gcGVubnkgXG4gICAgTklOSkEgPSAnTmluamEnLFxuICAgIEFNQkVSX0FTU0FTU0lOID0gJ0FtYmVyIEFzc2Fzc2luJyxcbiAgICBFTElURV9BU1NBU0lOID0gJ0VsaXRlIEFzc2FzaW4nLFxuICAgIFRISUVGID0gJ1RoaWVmJyxcbiAgICAvLyBsb29tZWVcbiAgICBDSEVFUkxFQURFUiA9ICdDaGVlcmxlYWRlcicsXG4gICAgTUFESUVOID0gJ01hZGllbicsXG4gICAgS0VFUEVSID0gJ0tlZXBlcicsXG4gICAgLy8gZ2FhbGlcbiAgICBCQVJEID0gJ0JhcmQnLFxuICAgIERVRUxJU1QgPSAnRHVlbGlzdCcsXG4gICAgS05JR0hUID0gJ0tuaWdodCcsXG4gICAgUlVORV9LSU5HID0gJ1J1bmUgS2luZycsXG4gICAgLy8gZ3VudGVyXG4gICAgR0FVUkQgPSAnR2F1cmQnLFxuICAgIEJPRFlfQlVJTERFUiA9ICdCb2R5IEJ1aWxkZXInLFxuICAgIENPTU1BTkRFUiA9ICdDb21tYW5kZXInLFxuICAgIC8vIHRyYWV6XG4gICAgRU5HSU5FRVIgPSAnRW5naW5lZXInLFxuICAgIExJR0hURU5JTkdfV0FSUklPUiA9ICdMaWdodGVuaW5nIFdhcnJpb3InLFxuICAgIFJFQkVMID0gJ1JlYmVsJyxcbiAgICAvLyBtZWVrdVxuICAgIFNPTElERVIgPSAnU29saWRlcicsXG4gICAgWFNPTElERVIgPSAnWFNvbGlkZXInLFxuICAgIEJFUlNFUktFUiA9ICdCZXJzZXJrZXInLFxuICAgIE9OSSA9ICdPbmknLFxuICAgIC8vIG1hbGFjZVxuICAgIEdZTU5BU1QgPSAnR3ltbmFzdCcsXG4gICAgUE9TU0VTU0VEID0gJ1Bvc3Nlc3NlZCcsXG4gICAgU0NPVVQgPSAnU2NvdXQnLFxuICAgIE9VUk9CT1JPUyA9ICdPdXJvYm9yb3MnLFxuICAgIC8vIGZheWVcbiAgICBXSVpBUkQgPSAnV2l6YXJkJyxcbiAgICBISVNUT1JJQU4gPSAnSGlzdG9yaWFuJyxcbiAgICBNQUdJID0gJ01hZ2knLFxuICAgIC8vIG90aGVyXG4gICAgV0FSUklPUiA9ICdXYXJyaW9yJyxcbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VEaXNjaXBsaW5lIHtcblxuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBfbmFtZTogc3RyaW5nO1xuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBfZGVzY3JpcHRpb246IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgX2NhdGVnb3J5OiBEaXNjaXBsaW5lQ2F0ZWdvcnk7XG4gICAgcHJvdGVjdGVkIF9leHBlcmllbmNlOiBudW1iZXI7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoZXhwZXJpZW5jZTogbnVtYmVyID0gMCkge1xuICAgICAgICB0aGlzLl9leHBlcmllbmNlID0gZXhwZXJpZW5jZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGxldmVsKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGguc3FydCh0aGlzLl9leHBlcmllbmNlIC8gMTAwKSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBuZXh0TGV2ZWwoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLl9leHBlcmllbmNlIC0gKHRoaXMubGV2ZWwgKiAodGhpcy5sZXZlbCAtIDEpIC8gMikgKiAxMDApO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgZXhwZXJpZW5jZVRvTmV4dExldmVsKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLm5leHRMZXZlbCAtIHRoaXMuX2V4cGVyaWVuY2U7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBleHBlcmllbmNlVG9OZXh0TGV2ZWxQZXJjZW50YWdlKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmV4cGVyaWVuY2VUb05leHRMZXZlbCAvIHRoaXMubmV4dExldmVsO1xuICAgIH1cblxuICAgIC8vIHRvZG8gbG9hZCBmcm9tIENsYXNzXG4gICAgcHVibGljIGdldCBlZmZlY3RzKCk6IEFycmF5PHN0cmluZz4ge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuXG59Il19