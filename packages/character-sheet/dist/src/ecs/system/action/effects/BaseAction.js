"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseAction = exports.ActionCategory = void 0;
var ActionCategory;
(function (ActionCategory) {
    ActionCategory["MOVEMENT"] = "Movement";
    ActionCategory["MENU"] = "Menu";
    ActionCategory["COMBO"] = "Combo";
    ActionCategory["INTERACTION"] = "Interaction";
    ActionCategory["WEAPON"] = "Weapon";
    ActionCategory["CLASS"] = "Class";
    ActionCategory["DRIVE"] = "Drive";
    ActionCategory["PARTY"] = "Party";
    ActionCategory["GEAR"] = "Gear";
    ActionCategory["NATURAL"] = "Natural";
})(ActionCategory = exports.ActionCategory || (exports.ActionCategory = {}));
/**
 * Actions are decoupled from the actor and target.
 * Each action SHOULD scale in computation based on actors and target stats.
 * Two vastly different skilled actors performing the same action may foresably yield vastly different effects.
 */
class BaseAction {
    constructor(actors, targets) {
        this._actors = actors;
        this._targets = targets;
    }
    get name() {
        return this._name;
    }
    get description() {
        return this._description;
    }
    /**
     * Every action can be represented by the time it takes to peform various stages of the action.
     * Although it's possble the time to perform an action is null, most user based action will take time to perform.
     * Each stage may be a different method depending on the action.
     * The duration and effects change character to character.
     */
    get totalDuration() {
        return this.perpareTime + this.executionTime + this.recoveryTime;
    }
}
exports.BaseAction = BaseAction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmFzZUFjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9lY3Mvc3lzdGVtL2FjdGlvbi9lZmZlY3RzL0Jhc2VBY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBUUEsSUFBWSxjQVdYO0FBWEQsV0FBWSxjQUFjO0lBQ3RCLHVDQUFxQixDQUFBO0lBQ3JCLCtCQUFhLENBQUE7SUFDYixpQ0FBZSxDQUFBO0lBQ2YsNkNBQTJCLENBQUE7SUFDM0IsbUNBQWlCLENBQUE7SUFDakIsaUNBQWUsQ0FBQTtJQUNmLGlDQUFlLENBQUE7SUFDZixpQ0FBZSxDQUFBO0lBQ2YsK0JBQWEsQ0FBQTtJQUNiLHFDQUFtQixDQUFBO0FBQ3ZCLENBQUMsRUFYVyxjQUFjLEdBQWQsc0JBQWMsS0FBZCxzQkFBYyxRQVd6QjtBQUVEOzs7O0dBSUc7QUFDSCxNQUFzQixVQUFVO0lBVTVCLFlBQVksTUFBd0IsRUFBRSxPQUF5QjtRQUMzRCxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUN0QixJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztJQUM1QixDQUFDO0lBSUQsSUFBVyxJQUFJO1FBQ1gsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxJQUFXLFdBQVc7UUFDbEIsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzdCLENBQUM7SUFpQ0Q7Ozs7O09BS0c7SUFDSCxJQUFXLGFBQWE7UUFDcEIsT0FBTyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztJQUNyRSxDQUFDO0NBQ0o7QUFqRUQsZ0NBaUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGhpbmcgfSBmcm9tICcuLi9XSVAvY29udHJhY3RzL1RoaW5nJztcbmltcG9ydCB7IENoYXJhY3RlciB9IGZyb20gJy4uL2VudGl0eS9DaGFyYWN0ZXInO1xuaW1wb3J0IHsgQXR0cmlidXRlIH0gZnJvbSAnLi4vV0lQL0F0dHJpYnV0ZSc7XG5pbXBvcnQgeyBFZmZlY3RzIH0gZnJvbSAnLi4vV0lQL0VmZmVjdHMnO1xuXG50eXBlIEZhY3RvciA9IFtBdHRyaWJ1dGUsIG51bWJlciwgc3RyaW5nLCBzdHJpbmddO1xudHlwZSBUcmFpdCA9IEZhY3RvcjtcblxuZXhwb3J0IGVudW0gQWN0aW9uQ2F0ZWdvcnkge1xuICAgIE1PVkVNRU5UID0gJ01vdmVtZW50JywgLy8gY2hhbmdlcyBwb3NpdGlvblxuICAgIE1FTlUgPSAnTWVudScsIC8vIGFjdGl2YXRlZCB2aWEgbWVudVxuICAgIENPTUJPID0gJ0NvbWJvJywgLy8gYWN0aXZhdGVkIHZpYSBjb21ib1xuICAgIElOVEVSQUNUSU9OID0gJ0ludGVyYWN0aW9uJyxcbiAgICBXRUFQT04gPSAnV2VhcG9uJyxcbiAgICBDTEFTUyA9ICdDbGFzcycsXG4gICAgRFJJVkUgPSAnRHJpdmUnLFxuICAgIFBBUlRZID0gJ1BhcnR5JyxcbiAgICBHRUFSID0gJ0dlYXInLCAvLyBhcmUgcmVsYXRlZCB0byB0aGUgdXNlIG9mIGdlYXJcbiAgICBOQVRVUkFMID0gJ05hdHVyYWwnLCAvLyAgYWN0aW9ucyB0aGF0IGRvIG5vdCBuZWVkIHRvIGJlIGNhbGxlZCB0byBiZSB1c2VkXG59XG5cbi8qKlxuICogQWN0aW9ucyBhcmUgZGVjb3VwbGVkIGZyb20gdGhlIGFjdG9yIGFuZCB0YXJnZXQuIFxuICogRWFjaCBhY3Rpb24gU0hPVUxEIHNjYWxlIGluIGNvbXB1dGF0aW9uIGJhc2VkIG9uIGFjdG9ycyBhbmQgdGFyZ2V0IHN0YXRzLlxuICogVHdvIHZhc3RseSBkaWZmZXJlbnQgc2tpbGxlZCBhY3RvcnMgcGVyZm9ybWluZyB0aGUgc2FtZSBhY3Rpb24gbWF5IGZvcmVzYWJseSB5aWVsZCB2YXN0bHkgZGlmZmVyZW50IGVmZmVjdHMuXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCYXNlQWN0aW9uIHtcbiAgICBcbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgX2lkOiBudW1iZXI7XG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IF9uYW1lOiBzdHJpbmc7XG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IF9kZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBfY2F0ZWdvcnk6IEFjdGlvbkNhdGVnb3J5O1xuICAgIFxuICAgIHByb3RlY3RlZCBfYWN0b3JzOiBBcnJheTxDaGFyYWN0ZXI+OyAgICBcbiAgICBwcm90ZWN0ZWQgX3RhcmdldHM6IEFycmF5PENoYXJhY3Rlcj47XG5cbiAgICBjb25zdHJ1Y3RvcihhY3RvcnM6IEFycmF5PENoYXJhY3Rlcj4sIHRhcmdldHM6IEFycmF5PENoYXJhY3Rlcj4pIHtcbiAgICAgICAgdGhpcy5fYWN0b3JzID0gYWN0b3JzO1xuICAgICAgICB0aGlzLl90YXJnZXRzID0gdGFyZ2V0cztcbiAgICB9XG5cbiAgICBhYnN0cmFjdCBleGVjdXRlKGFjdG9yczogQXJyYXk8VGhpbmc+LCB0YXJnZXRzOiBBcnJheTxUaGluZz4pOiBFZmZlY3RzO1xuXG4gICAgcHVibGljIGdldCBuYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9uYW1lO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgZGVzY3JpcHRpb24oKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Rlc2NyaXB0aW9uO1xuICAgIH1cblxuICAgIC8vIGludGVydXB0cz9cbiAgICAvLyBzaG91bGQgdGhlc2UgYmUgYWN0dWFsIERhdGUgdGltZXM/XG5cbiAgICAvKiogXG4gICAgICogVGhlIHRpbWUgc3BlbnQgYmVmb3JlIGFuIGFjdGlvbiBjYW4gYmUgdGFrZW4uXG4gICAgICogQmVpbmcgaW4gdGhlIGFjdCBvZiBwcmVwYXJpbmcgbWF5IGNoYW5nZSBvbmUncyBkZWZlbnNlLCBldGMuXG4gICAgICogQmVmb3JlIGEgcHJlcGFyZVRpbWUgYSBjaGFyYWN0ZXIgbXVzdCBiZSBpZGxlLlxuICAgICAqL1xuICAgIGFic3RyYWN0IGdldCBwZXJwYXJlVGltZSgpIDogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogdGhlIGFtb3VudCBvZiB0aW1lIGFuIGFjdGlvbiB0YWtlcyB0byBleGVjdXRlXG4gICAgICovXG4gICAgYWJzdHJhY3QgZ2V0IGV4ZWN1dGlvblRpbWUoKSA6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSByZWNvdmVyeSBzdGFnZSByZXByZXNlbnRzIHRoZSB0aW1lIHNwZW50IHRvIHJlY292ZXIgZnJvbSBhbiBhY3Rpb24uIFxuICAgICAqIFJlY292ZXJ5IHN0YWdlIG1heSB2YXJ5IGdyZWF0bHkgZGVwZW5kaW5nIG9uIHRoZSBuYXR1cmUgb2YgdGhlIGFjdGlvbnMuIFxuICAgICAqIFNvbWUgYWN0aW9ucyBtYXkgY2F1c2UgaW1tb2JsaXphdGlvbiwgZXRjLiBkdXJpbmcgdGhlIHJlY292ZXJ5IHN0YWdlLiBcbiAgICAgKiBPdGhlcnMgbWF5IHNpbXBseSBwcmV2ZW50IHJldXNlIGZvciBhIGR1cmF0aW9uLiBcbiAgICAgKiBSZWNvdmVyaWVzIG1heSBzdGFjayBhbmQgdGhlc2Ugc3RhY2tzIG1heSBoYXZlIGhhdmUgcGh5c2ljbG9naWNhbCBzeW1wdG9tcywgXG4gICAgICogc3VjaCBhcyBhZmZsaWN0aW9ucywgYnV0IG9mdGVuIGFyZSBub3QgdmlzaWJsZS5cbiAgICAgKiBBZnRlciBhIHJlY292ZXJ5IHRpbWUgdGhlIGNoYXJhY3RlciByZXR1cm5zIHRvIGEgaWRsZSBzdGF0ZS5cbiAgICAgKi9cbiAgICBhYnN0cmFjdCBnZXQgcmVjb3ZlcnlUaW1lKCkgOiBudW1iZXI7XG5cbiAgICAgLyoqXG4gICAgICogdGhlIGFtb3VudCBvZiB0aW1lIGJlZm9yZSB0aGUgYWN0aW9uIGNhbiBiZSBleGVjdXRlZCBhZ2FpblxuICAgICAqL1xuICAgIGFic3RyYWN0IGdldCBjb29sZG93blRpbWUoKSA6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIEV2ZXJ5IGFjdGlvbiBjYW4gYmUgcmVwcmVzZW50ZWQgYnkgdGhlIHRpbWUgaXQgdGFrZXMgdG8gcGVmb3JtIHZhcmlvdXMgc3RhZ2VzIG9mIHRoZSBhY3Rpb24uXG4gICAgICogQWx0aG91Z2ggaXQncyBwb3NzYmxlIHRoZSB0aW1lIHRvIHBlcmZvcm0gYW4gYWN0aW9uIGlzIG51bGwsIG1vc3QgdXNlciBiYXNlZCBhY3Rpb24gd2lsbCB0YWtlIHRpbWUgdG8gcGVyZm9ybS5cbiAgICAgKiBFYWNoIHN0YWdlIG1heSBiZSBhIGRpZmZlcmVudCBtZXRob2QgZGVwZW5kaW5nIG9uIHRoZSBhY3Rpb24uXG4gICAgICogVGhlIGR1cmF0aW9uIGFuZCBlZmZlY3RzIGNoYW5nZSBjaGFyYWN0ZXIgdG8gY2hhcmFjdGVyLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgdG90YWxEdXJhdGlvbigpIDogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGVycGFyZVRpbWUgKyB0aGlzLmV4ZWN1dGlvblRpbWUgKyB0aGlzLnJlY292ZXJ5VGltZTtcbiAgICB9XG59XG5cblxuIl19