"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require('aws-sdk');
const docClient = new AWS.DynamoDB.DocumentClient();
async function updateNote(note) {
    let params = {
        TableName: process.env.NOTES_TABLE,
        Key: {
            id: note.id
        },
        ExpressionAttributeValues: {},
        ExpressionAttributeNames: {},
        UpdateExpression: "",
        ReturnValues: "UPDATED_NEW"
    };
    let prefix = "set ";
    let attributes = Object.keys(note);
    for (let i = 0; i < attributes.length; i++) {
        let attribute = attributes[i];
        if (attribute !== "id") {
            params["UpdateExpression"] += prefix + "#" + attribute + " = :" + attribute;
            params["ExpressionAttributeValues"][":" + attribute] = note[attribute];
            params["ExpressionAttributeNames"]["#" + attribute] = attribute;
            prefix = ", ";
        }
    }
    console.log('params: ', params);
    try {
        await docClient.update(params).promise();
        return note;
    }
    catch (err) {
        console.log('DynamoDB error: ', err);
        return null;
    }
}
exports.default = updateNote;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlTm90ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9lY3Mvc3lzdGVtL3BsYWNlaG9sZGVyLW9sZC91cGRhdGVOb3RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQy9CLE1BQU0sU0FBUyxHQUFHLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQVdwRCxLQUFLLFVBQVUsVUFBVSxDQUFDLElBQVM7SUFDakMsSUFBSSxNQUFNLEdBQVk7UUFDcEIsU0FBUyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVztRQUNsQyxHQUFHLEVBQUU7WUFDSCxFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUU7U0FDWjtRQUNELHlCQUF5QixFQUFFLEVBQUU7UUFDN0Isd0JBQXdCLEVBQUUsRUFBRTtRQUM1QixnQkFBZ0IsRUFBRSxFQUFFO1FBQ3BCLFlBQVksRUFBRSxhQUFhO0tBQzVCLENBQUM7SUFDRixJQUFJLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDcEIsSUFBSSxVQUFVLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNuQyxLQUFLLElBQUksQ0FBQyxHQUFDLENBQUMsRUFBRSxDQUFDLEdBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUN0QyxJQUFJLFNBQVMsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUIsSUFBSSxTQUFTLEtBQUssSUFBSSxFQUFFO1lBQ3RCLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLE1BQU0sR0FBRyxHQUFHLEdBQUcsU0FBUyxHQUFHLE1BQU0sR0FBRyxTQUFTLENBQUM7WUFDNUUsTUFBTSxDQUFDLDJCQUEyQixDQUFDLENBQUMsR0FBRyxHQUFHLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUN2RSxNQUFNLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxHQUFHLEdBQUcsU0FBUyxDQUFDLEdBQUcsU0FBUyxDQUFDO1lBQ2hFLE1BQU0sR0FBRyxJQUFJLENBQUM7U0FDZjtLQUNIO0lBQ0EsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUE7SUFDL0IsSUFBSTtRQUNGLE1BQU0sU0FBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtRQUN4QyxPQUFPLElBQUksQ0FBQTtLQUNaO0lBQUMsT0FBTyxHQUFHLEVBQUU7UUFDWixPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLEdBQUcsQ0FBQyxDQUFBO1FBQ3BDLE9BQU8sSUFBSSxDQUFBO0tBQ1o7QUFDSCxDQUFDO0FBRUQsa0JBQWUsVUFBVSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQVdTID0gcmVxdWlyZSgnYXdzLXNkaycpO1xuY29uc3QgZG9jQ2xpZW50ID0gbmV3IEFXUy5EeW5hbW9EQi5Eb2N1bWVudENsaWVudCgpO1xuXG50eXBlIFBhcmFtcyA9IHtcbiAgVGFibGVOYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gIEtleTogc3RyaW5nIHwge30sXG4gIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXM6IGFueSxcbiAgRXhwcmVzc2lvbkF0dHJpYnV0ZU5hbWVzOiBhbnksXG4gIFVwZGF0ZUV4cHJlc3Npb246IHN0cmluZyxcbiAgUmV0dXJuVmFsdWVzOiBzdHJpbmdcbn1cblxuYXN5bmMgZnVuY3Rpb24gdXBkYXRlTm90ZShub3RlOiBhbnkpIHtcbiAgbGV0IHBhcmFtcyA6IFBhcmFtcyA9IHtcbiAgICBUYWJsZU5hbWU6IHByb2Nlc3MuZW52Lk5PVEVTX1RBQkxFLFxuICAgIEtleToge1xuICAgICAgaWQ6IG5vdGUuaWRcbiAgICB9LFxuICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXM6IHt9LFxuICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVOYW1lczoge30sXG4gICAgVXBkYXRlRXhwcmVzc2lvbjogXCJcIixcbiAgICBSZXR1cm5WYWx1ZXM6IFwiVVBEQVRFRF9ORVdcIlxuICB9O1xuICBsZXQgcHJlZml4ID0gXCJzZXQgXCI7XG4gIGxldCBhdHRyaWJ1dGVzID0gT2JqZWN0LmtleXMobm90ZSk7XG4gIGZvciAobGV0IGk9MDsgaTxhdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbaV07XG4gICAgaWYgKGF0dHJpYnV0ZSAhPT0gXCJpZFwiKSB7XG4gICAgICBwYXJhbXNbXCJVcGRhdGVFeHByZXNzaW9uXCJdICs9IHByZWZpeCArIFwiI1wiICsgYXR0cmlidXRlICsgXCIgPSA6XCIgKyBhdHRyaWJ1dGU7XG4gICAgICBwYXJhbXNbXCJFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzXCJdW1wiOlwiICsgYXR0cmlidXRlXSA9IG5vdGVbYXR0cmlidXRlXTtcbiAgICAgIHBhcmFtc1tcIkV4cHJlc3Npb25BdHRyaWJ1dGVOYW1lc1wiXVtcIiNcIiArIGF0dHJpYnV0ZV0gPSBhdHRyaWJ1dGU7XG4gICAgICBwcmVmaXggPSBcIiwgXCI7XG4gICAgfVxuIH1cbiAgY29uc29sZS5sb2coJ3BhcmFtczogJywgcGFyYW1zKVxuICB0cnkge1xuICAgIGF3YWl0IGRvY0NsaWVudC51cGRhdGUocGFyYW1zKS5wcm9taXNlKClcbiAgICByZXR1cm4gbm90ZVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBjb25zb2xlLmxvZygnRHluYW1vREIgZXJyb3I6ICcsIGVycilcbiAgICByZXR1cm4gbnVsbFxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHVwZGF0ZU5vdGU7Il19