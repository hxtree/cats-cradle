// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AudioServiceStack should match snapshot test 1`] = `
{
  Mappings: {
    AWSCloudFrontPartitionHostedZoneIdMap: {
      aws: {
        zoneId: Z2FDTNDATAQYW2,
      },
      aws-cn: {
        zoneId: Z3RFFRIM2A3IF5,
      },
    },
  },
  Outputs: {
    CloudFrontDistribution: {
      Value: {
        Fn::GetAtt: [
          Distribution830FAC52,
          DomainName,
        ],
      },
    },
    DomainName: {
      Value: {
        Fn::Join: [
          ,
          [
            https://jukebox.,
            {
              Ref: MyTestStackssmdomainnameParameter,
            },
          ],
        ],
      },
    },
  },
  Parameters: {
    BootstrapVersion: {
      Default: /cdk-bootstrap/hnb659fds/version,
      Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip],
      Type: AWS::SSM::Parameter::Value<String>,
    },
    MyTestStackhostedzoneidParameter: {
      Default: my-domains-hosted-zone-id,
      Type: AWS::SSM::Parameter::Value<String>,
    },
    MyTestStackorgformationcertswildcardcert1arnParameter: {
      Default: orgformation-certs-wildcard-cert1-arn,
      Type: AWS::SSM::Parameter::Value<String>,
    },
    MyTestStackssmdomainnameParameter: {
      Default: DOMAIN_NAME,
      Type: AWS::SSM::Parameter::Value<String>,
    },
  },
  Resources: {
    AliasRecord851000D2: {
      Properties: {
        AliasTarget: {
          DNSName: {
            Fn::GetAtt: [
              Distribution830FAC52,
              DomainName,
            ],
          },
          HostedZoneId: {
            Fn::FindInMap: [
              AWSCloudFrontPartitionHostedZoneIdMap,
              {
                Ref: AWS::Partition,
              },
              zoneId,
            ],
          },
        },
        HostedZoneId: {
          Ref: MyTestStackhostedzoneidParameter,
        },
        Name: {
          Fn::Join: [
            ,
            [
              jukebox.,
              {
                Ref: MyTestStackssmdomainnameParameter,
              },
              .,
            ],
          ],
        },
        Type: A,
      },
      Type: AWS::Route53::RecordSet,
    },
    Bucket83908E77: {
      DeletionPolicy: Retain,
      Properties: {
        AccessControl: Private,
        Tags: [
          {
            Key: aws-cdk:cr-owned:041bc76c,
            Value: true,
          },
        ],
      },
      Type: AWS::S3::Bucket,
      UpdateReplacePolicy: Retain,
    },
    BucketDeploymentAwsCliLayerB018DCE1: {
      Properties: {
        Content: {
          S3Bucket: {
            Fn::Sub: cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region},
          },
          S3Key: UNIQUE_HASH.zip,
        },
        Description: /opt/awscli/aws,
      },
      Type: AWS::Lambda::LayerVersion,
    },
    BucketDeploymentCustomResourceCB7E2133: {
      DeletionPolicy: Delete,
      Properties: {
        DestinationBucketName: {
          Ref: Bucket83908E77,
        },
        Prune: true,
        ServiceToken: {
          Fn::GetAtt: [
            CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536,
            Arn,
          ],
        },
        SourceBucketNames: [
          {
            Fn::Sub: cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region},
          },
        ],
        SourceObjectKeys: [
          UNIQUE_HASH.zip,
        ],
      },
      Type: Custom::CDKBucketDeployment,
      UpdateReplacePolicy: Delete,
    },
    BucketPolicyE9A3008A: {
      Properties: {
        Bucket: {
          Ref: Bucket83908E77,
        },
        PolicyDocument: {
          Statement: [
            {
              Action: [
                s3:GetObject*,
                s3:GetBucket*,
                s3:List*,
              ],
              Effect: Allow,
              Principal: {
                CanonicalUser: {
                  Fn::GetAtt: [
                    OriginAccessIdentityDF1E3CAC,
                    S3CanonicalUserId,
                  ],
                },
              },
              Resource: [
                {
                  Fn::GetAtt: [
                    Bucket83908E77,
                    Arn,
                  ],
                },
                {
                  Fn::Join: [
                    ,
                    [
                      {
                        Fn::GetAtt: [
                          Bucket83908E77,
                          Arn,
                        ],
                      },
                      /*,
                    ],
                  ],
                },
              ],
            },
            {
              Action: s3:GetObject,
              Effect: Allow,
              Principal: {
                CanonicalUser: {
                  Fn::GetAtt: [
                    OriginAccessIdentityDF1E3CAC,
                    S3CanonicalUserId,
                  ],
                },
              },
              Resource: {
                Fn::Join: [
                  ,
                  [
                    {
                      Fn::GetAtt: [
                        Bucket83908E77,
                        Arn,
                      ],
                    },
                    /*,
                  ],
                ],
              },
            },
          ],
          Version: 2012-10-17,
        },
      },
      Type: AWS::S3::BucketPolicy,
    },
    CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536: {
      DependsOn: [
        CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF,
        CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265,
      ],
      Properties: {
        Code: {
          S3Bucket: {
            Fn::Sub: cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region},
          },
          S3Key: UNIQUE_HASH.zip,
        },
        Environment: {
          Variables: {
            AWS_CA_BUNDLE: /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem,
          },
        },
        Handler: index.handler,
        Layers: [
          {
            Ref: BucketDeploymentAwsCliLayerB018DCE1,
          },
        ],
        Role: {
          Fn::GetAtt: [
            CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265,
            Arn,
          ],
        },
        Runtime: python3.9,
        Timeout: 900,
      },
      Type: AWS::Lambda::Function,
    },
    CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265: {
      Properties: {
        AssumeRolePolicyDocument: {
          Statement: [
            {
              Action: sts:AssumeRole,
              Effect: Allow,
              Principal: {
                Service: lambda.amazonaws.com,
              },
            },
          ],
          Version: 2012-10-17,
        },
        ManagedPolicyArns: [
          {
            Fn::Join: [
              ,
              [
                arn:,
                {
                  Ref: AWS::Partition,
                },
                :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole,
              ],
            ],
          },
        ],
      },
      Type: AWS::IAM::Role,
    },
    CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF: {
      Properties: {
        PolicyDocument: {
          Statement: [
            {
              Action: [
                s3:GetObject*,
                s3:GetBucket*,
                s3:List*,
              ],
              Effect: Allow,
              Resource: [
                {
                  Fn::Join: [
                    ,
                    [
                      arn:,
                      {
                        Ref: AWS::Partition,
                      },
                      :s3:::,
                      {
                        Fn::Sub: cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region},
                      },
                    ],
                  ],
                },
                {
                  Fn::Join: [
                    ,
                    [
                      arn:,
                      {
                        Ref: AWS::Partition,
                      },
                      :s3:::,
                      {
                        Fn::Sub: cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region},
                      },
                      /*,
                    ],
                  ],
                },
              ],
            },
            {
              Action: [
                s3:GetObject*,
                s3:GetBucket*,
                s3:List*,
                s3:DeleteObject*,
                s3:PutObject,
                s3:PutObjectLegalHold,
                s3:PutObjectRetention,
                s3:PutObjectTagging,
                s3:PutObjectVersionTagging,
                s3:Abort*,
              ],
              Effect: Allow,
              Resource: [
                {
                  Fn::GetAtt: [
                    Bucket83908E77,
                    Arn,
                  ],
                },
                {
                  Fn::Join: [
                    ,
                    [
                      {
                        Fn::GetAtt: [
                          Bucket83908E77,
                          Arn,
                        ],
                      },
                      /*,
                    ],
                  ],
                },
              ],
            },
          ],
          Version: 2012-10-17,
        },
        PolicyName: CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF,
        Roles: [
          {
            Ref: CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265,
          },
        ],
      },
      Type: AWS::IAM::Policy,
    },
    Distribution830FAC52: {
      Properties: {
        DistributionConfig: {
          Aliases: [
            {
              Fn::Join: [
                ,
                [
                  jukebox.,
                  {
                    Ref: MyTestStackssmdomainnameParameter,
                  },
                ],
              ],
            },
          ],
          DefaultCacheBehavior: {
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6,
            Compress: true,
            ResponseHeadersPolicyId: 5cc3b908-e619-4b99-88e5-2cf7f45965bd,
            TargetOriginId: MyTestStackDistributionOrigin1B36122EB,
            ViewerProtocolPolicy: allow-all,
          },
          DefaultRootObject: index.html,
          Enabled: true,
          HttpVersion: http2,
          IPV6Enabled: true,
          Origins: [
            {
              DomainName: {
                Fn::GetAtt: [
                  Bucket83908E77,
                  RegionalDomainName,
                ],
              },
              Id: MyTestStackDistributionOrigin1B36122EB,
              S3OriginConfig: {
                OriginAccessIdentity: {
                  Fn::Join: [
                    ,
                    [
                      origin-access-identity/cloudfront/,
                      {
                        Ref: OriginAccessIdentityDF1E3CAC,
                      },
                    ],
                  ],
                },
              },
            },
          ],
          ViewerCertificate: {
            AcmCertificateArn: {
              Ref: MyTestStackorgformationcertswildcardcert1arnParameter,
            },
            MinimumProtocolVersion: TLSv1.2_2021,
            SslSupportMethod: sni-only,
          },
        },
      },
      Type: AWS::CloudFront::Distribution,
    },
    OriginAccessIdentityDF1E3CAC: {
      Properties: {
        CloudFrontOriginAccessIdentityConfig: {
          Comment: Allows CloudFront to reach the bucket,
        },
      },
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity,
    },
  },
  Rules: {
    CheckBootstrapVersion: {
      Assertions: [
        {
          Assert: {
            Fn::Not: [
              {
                Fn::Contains: [
                  [
                    1,
                    2,
                    3,
                    4,
                    5,
                  ],
                  {
                    Ref: BootstrapVersion,
                  },
                ],
              },
            ],
          },
          AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.,
        },
      ],
    },
  },
}
`;
