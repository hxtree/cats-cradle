// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AuthServiceStack should match snapshot test 1`] = `
{
  Outputs: {
    LocalhostAPIExample: {
      Value: {
        Fn::Join: [
          ,
          [
            https://,
            {
              Ref: authenticationservicestackauthenticationservicestackapiendpointrestapiidssmParameter6CDA0275,
            },
            .execute-api.,
            {
              Ref: AWS::Region,
            },
            .amazonaws.com/default/v1/auth/users,
          ],
        ],
      },
    },
  },
  Parameters: {
    BootstrapVersion: {
      Default: /cdk-bootstrap/hnb659fds/version,
      Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip],
      Type: AWS::SSM::Parameter::Value<String>,
    },
    authenticationservicestackauthenticationservicestackapiendpointrestapiidssmParameter6CDA0275: {
      Default: web-api-gateway-rest-api-id,
      Type: AWS::SSM::Parameter::Value<String>,
    },
    authenticationservicestackauthenticationservicestackapiendpointrootresourceidssmParameterECA15536: {
      Default: web-api-gateway-root-resource-id,
      Type: AWS::SSM::Parameter::Value<String>,
    },
    authenticationservicestackauthenticationservicestackapiendpointv1resourceidssmParameterEDD599EF: {
      Default: web-api-gateway-v1-resource-id,
      Type: AWS::SSM::Parameter::Value<String>,
    },
    lambdalayernestjslatestversionssmParameter: {
      Default: lambda-layer-nestjs-latest-version,
      Type: AWS::SSM::Parameter::Value<String>,
    },
    mongodatabasepasswordssmParameter: {
      Default: MONGO_DATABASE_PASSWORD,
      Type: AWS::SSM::Parameter::Value<String>,
    },
    mongodatabaseurissmParameter: {
      Default: MONGO_DATABASE_URI,
      Type: AWS::SSM::Parameter::Value<String>,
    },
    mongodatabaseuserssmParameter: {
      Default: MONGO_DATABASE_USER,
      Type: AWS::SSM::Parameter::Value<String>,
    },
    restapiidssmParameter: {
      Default: web-api-gateway-rest-api-id,
      Type: AWS::SSM::Parameter::Value<String>,
    },
  },
  Resources: {
    LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A: {
      DependsOn: [
        LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB,
        LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB,
      ],
      Properties: {
        Code: {
          S3Bucket: {
            Fn::Sub: cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region},
          },
          S3Key: UNIQUE_HASH.zip,
        },
        Handler: index.handler,
        Role: {
          Fn::GetAtt: [
            LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB,
            Arn,
          ],
        },
        Runtime: nodejs18.x,
        Timeout: 900,
      },
      Type: AWS::Lambda::Function,
    },
    LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB: {
      Properties: {
        AssumeRolePolicyDocument: {
          Statement: [
            {
              Action: sts:AssumeRole,
              Effect: Allow,
              Principal: {
                Service: lambda.amazonaws.com,
              },
            },
          ],
          Version: 2012-10-17,
        },
        ManagedPolicyArns: [
          {
            Fn::Join: [
              ,
              [
                arn:,
                {
                  Ref: AWS::Partition,
                },
                :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole,
              ],
            ],
          },
        ],
      },
      Type: AWS::IAM::Role,
    },
    LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB: {
      Properties: {
        PolicyDocument: {
          Statement: [
            {
              Action: [
                logs:PutRetentionPolicy,
                logs:DeleteRetentionPolicy,
              ],
              Effect: Allow,
              Resource: *,
            },
          ],
          Version: 2012-10-17,
        },
        PolicyName: LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB,
        Roles: [
          {
            Ref: LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB,
          },
        ],
      },
      Type: AWS::IAM::Policy,
    },
    MyTestStackuserpoolclientid34905EED: {
      Properties: {
        Description: Cognito User Pool Client ID,
        Name: cognito-user-pool-client-id,
        Type: String,
        Value: {
          Ref: UserCognitoPoolAuthenticationClient03F4B137,
        },
      },
      Type: AWS::SSM::Parameter,
    },
    MyTestStackuserpoolidEB6986BD: {
      Properties: {
        Description: Cognito User Pool ID,
        Name: cognito-user-pool-id,
        Type: String,
        Value: {
          Ref: UserCognitoPool9737277B,
        },
      },
      Type: AWS::SSM::Parameter,
    },
    UserCognitoPool9737277B: {
      DeletionPolicy: Retain,
      Properties: {
        AccountRecoverySetting: {
          RecoveryMechanisms: [
            {
              Name: verified_email,
              Priority: 1,
            },
            {
              Name: verified_phone_number,
              Priority: 2,
            },
          ],
        },
        AdminCreateUserConfig: {
          AllowAdminCreateUserOnly: false,
        },
        AutoVerifiedAttributes: [
          email,
        ],
        EmailVerificationMessage: Hello, Thanks for registering! Verification code is {####}.,
        EmailVerificationSubject: Cats Cradle User Verification,
        Policies: {
          PasswordPolicy: {
            MinimumLength: 8,
            RequireLowercase: true,
            RequireNumbers: true,
            RequireSymbols: true,
          },
        },
        Schema: [
          {
            Mutable: true,
            Name: name,
            Required: true,
          },
          {
            Mutable: true,
            Name: email,
            Required: true,
          },
          {
            AttributeDataType: String,
            Mutable: true,
            Name: company,
          },
        ],
        SmsConfiguration: {
          ExternalId: MyTestStackUserCognitoPoolD98F7D01,
          SnsCallerArn: {
            Fn::GetAtt: [
              UserCognitoPoolsmsRoleD1B44BCF,
              Arn,
            ],
          },
        },
        SmsVerificationMessage: The verification code to your new account is {####},
        UserPoolName: Beta-CognitoPool,
        UsernameAttributes: [
          email,
          phone_number,
        ],
        UsernameConfiguration: {
          CaseSensitive: false,
        },
        VerificationMessageTemplate: {
          DefaultEmailOption: CONFIRM_WITH_CODE,
          EmailMessage: Hello, Thanks for registering! Verification code is {####}.,
          EmailSubject: Cats Cradle User Verification,
          SmsMessage: The verification code to your new account is {####},
        },
      },
      Type: AWS::Cognito::UserPool,
      UpdateReplacePolicy: Retain,
    },
    UserCognitoPoolAuthenticationClient03F4B137: {
      Properties: {
        AccessTokenValidity: 30,
        AllowedOAuthFlows: [
          code,
        ],
        AllowedOAuthFlowsUserPoolClient: true,
        AllowedOAuthScopes: [
          openid,
        ],
        CallbackURLs: [
          https://catscradle.com/home,
        ],
        ClientName: AuthenticationClient,
        IdTokenValidity: 30,
        RefreshTokenValidity: 60,
        SupportedIdentityProviders: [
          COGNITO,
        ],
        TokenValidityUnits: {
          AccessToken: minutes,
          IdToken: minutes,
          RefreshToken: minutes,
        },
        UserPoolId: {
          Ref: UserCognitoPool9737277B,
        },
      },
      Type: AWS::Cognito::UserPoolClient,
    },
    UserCognitoPoolsmsRoleD1B44BCF: {
      Properties: {
        AssumeRolePolicyDocument: {
          Statement: [
            {
              Action: sts:AssumeRole,
              Condition: {
                StringEquals: {
                  sts:ExternalId: MyTestStackUserCognitoPoolD98F7D01,
                },
              },
              Effect: Allow,
              Principal: {
                Service: cognito-idp.amazonaws.com,
              },
            },
          ],
          Version: 2012-10-17,
        },
        Policies: [
          {
            PolicyDocument: {
              Statement: [
                {
                  Action: sns:Publish,
                  Effect: Allow,
                  Resource: *,
                },
              ],
              Version: 2012-10-17,
            },
            PolicyName: sns-publish,
          },
        ],
      },
      Type: AWS::IAM::Role,
    },
    authenticationservicestackauthenticationservicestackapiendpointauthenticationservicestackapiendpointapigwresourceF3D64238: {
      Properties: {
        ParentId: {
          Ref: authenticationservicestackauthenticationservicestackapiendpointv1resourceidssmParameterEDD599EF,
        },
        PathPart: auth,
        RestApiId: {
          Ref: authenticationservicestackauthenticationservicestackapiendpointrestapiidssmParameter6CDA0275,
        },
      },
      Type: AWS::ApiGateway::Resource,
    },
    authenticationservicestackauthenticationservicestackapiendpointauthenticationservicestackapiendpointapigwresourceproxy51CD2FA9: {
      Properties: {
        ParentId: {
          Ref: authenticationservicestackauthenticationservicestackapiendpointauthenticationservicestackapiendpointapigwresourceF3D64238,
        },
        PathPart: {proxy+},
        RestApiId: {
          Ref: authenticationservicestackauthenticationservicestackapiendpointrestapiidssmParameter6CDA0275,
        },
      },
      Type: AWS::ApiGateway::Resource,
    },
    authenticationservicestackauthenticationservicestackapiendpointauthenticationservicestackapiendpointapigwresourceproxyANYApiPermissionMyTestStackauthenticationservicestackauthenticationservicestackapiendpointauthenticationservicestackapiendC9E40474: {
      Properties: {
        Action: lambda:InvokeFunction,
        FunctionName: {
          Fn::GetAtt: [
            authenticationservicestacknestjsNodeJsLambdaC49C5643,
            Arn,
          ],
        },
        Principal: apigateway.amazonaws.com,
        SourceArn: {
          Fn::Join: [
            ,
            [
              arn:,
              {
                Ref: AWS::Partition,
              },
              :execute-api:,
              {
                Ref: AWS::Region,
              },
              :,
              {
                Ref: AWS::AccountId,
              },
              :,
              {
                Ref: authenticationservicestackauthenticationservicestackapiendpointrestapiidssmParameter6CDA0275,
              },
              /*/*/v1/auth/*,
            ],
          ],
        },
      },
      Type: AWS::Lambda::Permission,
    },
    authenticationservicestackauthenticationservicestackapiendpointauthenticationservicestackapiendpointapigwresourceproxyANYApiPermissionTestMyTestStackauthenticationservicestackauthenticationservicestackapiendpointauthenticationservicestackap0720CCBC: {
      Properties: {
        Action: lambda:InvokeFunction,
        FunctionName: {
          Fn::GetAtt: [
            authenticationservicestacknestjsNodeJsLambdaC49C5643,
            Arn,
          ],
        },
        Principal: apigateway.amazonaws.com,
        SourceArn: {
          Fn::Join: [
            ,
            [
              arn:,
              {
                Ref: AWS::Partition,
              },
              :execute-api:,
              {
                Ref: AWS::Region,
              },
              :,
              {
                Ref: AWS::AccountId,
              },
              :,
              {
                Ref: authenticationservicestackauthenticationservicestackapiendpointrestapiidssmParameter6CDA0275,
              },
              /test-invoke-stage/*/v1/auth/*,
            ],
          ],
        },
      },
      Type: AWS::Lambda::Permission,
    },
    authenticationservicestackauthenticationservicestackapiendpointauthenticationservicestackapiendpointapigwresourceproxyANYE1B0E188: {
      Properties: {
        AuthorizationType: NONE,
        HttpMethod: ANY,
        Integration: {
          IntegrationHttpMethod: POST,
          Type: AWS_PROXY,
          Uri: {
            Fn::Join: [
              ,
              [
                arn:,
                {
                  Ref: AWS::Partition,
                },
                :apigateway:,
                {
                  Ref: AWS::Region,
                },
                :lambda:path/2015-03-31/functions/,
                {
                  Fn::GetAtt: [
                    authenticationservicestacknestjsNodeJsLambdaC49C5643,
                    Arn,
                  ],
                },
                /invocations,
              ],
            ],
          },
        },
        ResourceId: {
          Ref: authenticationservicestackauthenticationservicestackapiendpointauthenticationservicestackapiendpointapigwresourceproxy51CD2FA9,
        },
        RestApiId: {
          Ref: authenticationservicestackauthenticationservicestackapiendpointrestapiidssmParameter6CDA0275,
        },
      },
      Type: AWS::ApiGateway::Method,
    },
    authenticationservicestackauthenticationservicestackapiendpointauthenticationservicestackapiendpointdeployment_UNIQUE_HASH: {
      Properties: {
        RestApiId: {
          Ref: authenticationservicestackauthenticationservicestackapiendpointrestapiidssmParameter6CDA0275,
        },
        StageName: default,
      },
      Type: AWS::ApiGateway::Deployment,
    },
    authenticationservicestacknestjsNodeJsLambdaC49C5643: {
      DependsOn: [
        authenticationservicestacknestjsNodeJsLambdaServiceRole0E28D4E1,
      ],
      Properties: {
        Code: {
          S3Bucket: {
            Fn::Sub: cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region},
          },
          S3Key: UNIQUE_HASH.zip,
        },
        Environment: {
          Variables: {
            AWS_ACCOUNT_ID: {
              Ref: AWS::AccountId,
            },
            BASE_URL: {
              Fn::Join: [
                ,
                [
                  https://,
                  {
                    Ref: restapiidssmParameter,
                  },
                  .execute-api.,
                  {
                    Ref: AWS::Region,
                  },
                  .amazonaws.com/default/v1,
                ],
              ],
            },
            MONGO_DATABASE_PASSWORD: {
              Ref: mongodatabasepasswordssmParameter,
            },
            MONGO_DATABASE_URI: {
              Ref: mongodatabaseurissmParameter,
            },
            MONGO_DATABASE_USER: {
              Ref: mongodatabaseuserssmParameter,
            },
            STAGE_NAME: default,
          },
        },
        Handler: index.handler,
        Layers: [
          {
            Ref: lambdalayernestjslatestversionssmParameter,
          },
        ],
        MemorySize: 1024,
        Role: {
          Fn::GetAtt: [
            authenticationservicestacknestjsNodeJsLambdaServiceRole0E28D4E1,
            Arn,
          ],
        },
        Runtime: nodejs18.x,
        Timeout: 30,
      },
      Type: AWS::Lambda::Function,
    },
    authenticationservicestacknestjsNodeJsLambdaLogRetention1F9A7FDE: {
      Properties: {
        LogGroupName: {
          Fn::Join: [
            ,
            [
              /aws/lambda/,
              {
                Ref: authenticationservicestacknestjsNodeJsLambdaC49C5643,
              },
            ],
          ],
        },
        RetentionInDays: 1,
        ServiceToken: {
          Fn::GetAtt: [
            LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A,
            Arn,
          ],
        },
      },
      Type: Custom::LogRetention,
    },
    authenticationservicestacknestjsNodeJsLambdaServiceRole0E28D4E1: {
      Properties: {
        AssumeRolePolicyDocument: {
          Statement: [
            {
              Action: sts:AssumeRole,
              Effect: Allow,
              Principal: {
                Service: lambda.amazonaws.com,
              },
            },
          ],
          Version: 2012-10-17,
        },
        ManagedPolicyArns: [
          {
            Fn::Join: [
              ,
              [
                arn:,
                {
                  Ref: AWS::Partition,
                },
                :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole,
              ],
            ],
          },
        ],
      },
      Type: AWS::IAM::Role,
    },
  },
  Rules: {
    CheckBootstrapVersion: {
      Assertions: [
        {
          Assert: {
            Fn::Not: [
              {
                Fn::Contains: [
                  [
                    1,
                    2,
                    3,
                    4,
                    5,
                  ],
                  {
                    Ref: BootstrapVersion,
                  },
                ],
              },
            ],
          },
          AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.,
        },
      ],
    },
  },
}
`;
