import {
  NotFoundException,
  Controller,
  Delete,
  Get,
  Post,
  Param,
  Body,
  ParseUUIDPipe,
  VERSION_NEUTRAL,
  BadRequestException,
} from '@nestjs/common';
import { CharacterSheetRepository } from './character-sheet.repository';
import { CharacterSheetService } from './character-sheet.service';
import { CharacterSheet } from './character-sheet.schema';
import { CreateCharacterSheetDto } from './create-character-sheet-dto';
import { CreateSpawnDto } from './create-spawn-dto';
import { PlaceService } from '../place/place.service';
import { SpawnService } from './spawn.service';

@Controller({ path: 'character-sheets', version: [VERSION_NEUTRAL, '1'] })
export class CharacterSheetController {
  constructor(
    private _characterSheetService: CharacterSheetService,
    private _characterSheetRepository: CharacterSheetRepository,
    private _placeService: PlaceService,
    private _spawnService: SpawnService,
  ) {}

  @Get()
  async findAll(): Promise<any> {
    const result = await this._characterSheetRepository.findAll();

    if (!result) {
      throw new NotFoundException();
    }
    return result;
  }

  @Get(':id')
  async findOne(@Param('id', new ParseUUIDPipe()) id: string): Promise<any> {
    const result = await this._characterSheetRepository.findOne({
      id,
    });

    if (!result) {
      throw new NotFoundException();
    }
    return result;
  }

  @Delete(':id')
  async delete(@Param('id', new ParseUUIDPipe()) id: string): Promise<any> {
    return this._characterSheetRepository.delete({
      id,
    });
  }

  @Post()
  async create(
    @Body() createCharacterSheetDto: CreateCharacterSheetDto,
  ): Promise<any> {
    const characterSheet = new CharacterSheet(createCharacterSheetDto);
    return this._characterSheetRepository.create(characterSheet);
  }

  /**
   * Endpoint to dynamically autogenerated for in a given area
   */
  @Post('spawn')
  async spawn(@Body() createSpawnDto: CreateSpawnDto): Promise<any> {
    const place = await this._placeService.find(createSpawnDto.place);

    if (!place.spawnGuidelines) {
      return new BadRequestException('Spawn guidelines not found');
    }

    const level = this._spawnService.calculateLevel(place.spawnGuidelines);
    const archetypeId = await this._spawnService.calculateArchetype(
      place.spawnGuidelines,
    );

    if (archetypeId === undefined) {
      return new BadRequestException('Spawn archetype not found');
    }

    const createCharacterSheet = new CreateCharacterSheetDto();
    createCharacterSheet.archetypeId = archetypeId;
    createCharacterSheet.id = createSpawnDto.id;

    const characterSheet = new CharacterSheet(createCharacterSheet);

    // TODO apply level to disciplines

    // TODO persist character

    return this._characterSheetRepository.create(characterSheet);
  }
}
