"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Luck = exports.Active = void 0;
const DefaultLuckAdjustment_1 = require("./LuckAdjustment/DefaultLuckAdjustment");
var Active;
(function (Active) {
    Active[Active["enable"] = 0] = "enable";
    Active[Active["disable"] = 1] = "disable";
})(Active = exports.Active || (exports.Active = {}));
class Luck {
    constructor(value) {
        this._history = [];
        this._algorithm = new DefaultLuckAdjustment_1.DefaultLuckAdjustment;
        // disable luck if undefined
        if (value === undefined) {
            this._status = Active.disable;
            this._value = 0;
            return;
        }
        this._status = Active.enable;
        this._history.push(value);
        this._value = value;
    }
    set status(value) {
        this._status = value;
    }
    get status() {
        return this._status;
    }
    set algorithm(algorithm) {
        this._algorithm = algorithm;
    }
    get algorithm() {
        return this._algorithm;
    }
    update(rollPercent) {
        this.value += this._algorithm.adjustment(rollPercent);
    }
    get value() {
        return this._value;
    }
    set value(value) {
        this._history.push(value);
        this._value = value;
    }
    modify(number) {
        if (this._status === 0) {
            number = number * this.applicablePercent;
            return Math.round(number);
        }
        return number;
    }
    get applicablePercent() {
        const change = Math.random() * Math.abs(this._value) * .01;
        if (this._value < 0) {
            return 1 - change;
        }
        else if (this._value === 0) {
            return 1;
        }
        else {
            return 1 + change;
        }
    }
}
exports.Luck = Luck;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTHVjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9MdWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLGtGQUErRTtBQUUvRSxJQUFZLE1BR1g7QUFIRCxXQUFZLE1BQU07SUFDZCx1Q0FBVSxDQUFBO0lBQ1YseUNBQVcsQ0FBQTtBQUNmLENBQUMsRUFIVyxNQUFNLEdBQU4sY0FBTSxLQUFOLGNBQU0sUUFHakI7QUFjRCxNQUFhLElBQUk7SUFNYixZQUFtQixLQUFjO1FBSHpCLGFBQVEsR0FBa0IsRUFBRSxDQUFDO1FBSWpDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSw2Q0FBcUIsQ0FBQztRQUU1Qyw0QkFBNEI7UUFDNUIsSUFBRyxLQUFLLEtBQUssU0FBUyxFQUFDO1lBQ25CLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQztZQUM5QixJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztZQUNoQixPQUFPO1NBQ1Y7UUFFRCxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDN0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDeEIsQ0FBQztJQUVELElBQVcsTUFBTSxDQUFDLEtBQWE7UUFDM0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFDekIsQ0FBQztJQUVELElBQVcsTUFBTTtRQUNiLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN4QixDQUFDO0lBRUQsSUFBVyxTQUFTLENBQUMsU0FBMEI7UUFDM0MsSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7SUFDaEMsQ0FBQztJQUVELElBQVcsU0FBUztRQUNoQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDM0IsQ0FBQztJQUVNLE1BQU0sQ0FBQyxXQUFtQjtRQUU3QixJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFRCxJQUFXLEtBQUs7UUFFWixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDdkIsQ0FBQztJQUVELElBQVcsS0FBSyxDQUFDLEtBQWE7UUFDMUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDeEIsQ0FBQztJQUVNLE1BQU0sQ0FBQyxNQUFjO1FBRXZCLElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxDQUFDLEVBQUU7WUFDckIsTUFBTSxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUM7WUFFekMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzdCO1FBRUQsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUVELElBQVcsaUJBQWlCO1FBRXhCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDM0QsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNqQixPQUFPLENBQUMsR0FBRyxNQUFNLENBQUM7U0FDckI7YUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQzFCLE9BQU8sQ0FBQyxDQUFDO1NBQ1o7YUFBTTtZQUNILE9BQU8sQ0FBQyxHQUFHLE1BQU0sQ0FBQztTQUNyQjtJQUNMLENBQUM7Q0FDSjtBQTFFRCxvQkEwRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJTHVja0FkanVzdG1lbnQgfSBmcm9tICcuL0x1Y2tBZGp1c3RtZW50L0Fic3RyYWN0THVja0FkanVzdG1lbnQnO1xyXG5pbXBvcnQgeyBEZWZhdWx0THVja0FkanVzdG1lbnQgfSBmcm9tICcuL0x1Y2tBZGp1c3RtZW50L0RlZmF1bHRMdWNrQWRqdXN0bWVudCc7XHJcblxyXG5leHBvcnQgZW51bSBBY3RpdmUge1xyXG4gICAgZW5hYmxlID0gMCxcclxuICAgIGRpc2FibGUgPSAxLFxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElMdWNrIHtcclxuICAgIGdldCBzdGF0dXMoKTogQWN0aXZlO1xyXG4gICAgc2V0IHN0YXR1cyh2YWx1ZTogQWN0aXZlKTtcclxuICAgIHNldCBhbGdvcml0aG0oYWxnb3JpdGhtOiBJTHVja0FkanVzdG1lbnQpO1xyXG4gICAgZ2V0IGFsZ29yaXRobSgpOiBJTHVja0FkanVzdG1lbnQ7XHJcbiAgICB1cGRhdGUocm9sbFBlcmNlbnQ6IG51bWJlcik6IHZvaWQ7XHJcbiAgICBnZXQgdmFsdWUoKTogbnVtYmVyO1xyXG4gICAgc2V0IHZhbHVlKGx1Y2s6IG51bWJlcik7XHJcbiAgICBtb2RpZnkobnVtYmVyOiBudW1iZXIpOiBudW1iZXI7XHJcbiAgICBnZXQgYXBwbGljYWJsZVBlcmNlbnQoKTogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTHVjayBpbXBsZW1lbnRzIElMdWNrIHtcclxuICAgIHByaXZhdGUgX3N0YXR1czogQWN0aXZlO1xyXG4gICAgcHJpdmF0ZSBfdmFsdWU6IG51bWJlcjtcclxuICAgIHByaXZhdGUgX2hpc3Rvcnk6IEFycmF5PG51bWJlcj4gPSBbXTtcclxuICAgIHByaXZhdGUgX2FsZ29yaXRobTogSUx1Y2tBZGp1c3RtZW50O1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcih2YWx1ZT86IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX2FsZ29yaXRobSA9IG5ldyBEZWZhdWx0THVja0FkanVzdG1lbnQ7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gZGlzYWJsZSBsdWNrIGlmIHVuZGVmaW5lZFxyXG4gICAgICAgIGlmKHZhbHVlID09PSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICB0aGlzLl9zdGF0dXMgPSBBY3RpdmUuZGlzYWJsZTtcclxuICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSAwO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9zdGF0dXMgPSBBY3RpdmUuZW5hYmxlO1xyXG4gICAgICAgIHRoaXMuX2hpc3RvcnkucHVzaCh2YWx1ZSk7XHJcbiAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IHN0YXR1cyh2YWx1ZTogQWN0aXZlKSB7XHJcbiAgICAgICAgdGhpcy5fc3RhdHVzID0gdmFsdWU7ICAgIFxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgc3RhdHVzKCk6IEFjdGl2ZSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXR1czsgICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgYWxnb3JpdGhtKGFsZ29yaXRobTogSUx1Y2tBZGp1c3RtZW50KXtcclxuICAgICAgICB0aGlzLl9hbGdvcml0aG0gPSBhbGdvcml0aG07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCBhbGdvcml0aG0oKTogSUx1Y2tBZGp1c3RtZW50IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYWxnb3JpdGhtO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB1cGRhdGUocm9sbFBlcmNlbnQ6IG51bWJlcik6IHZvaWRcclxuICAgIHtcclxuICAgICAgICB0aGlzLnZhbHVlICs9IHRoaXMuX2FsZ29yaXRobS5hZGp1c3RtZW50KHJvbGxQZXJjZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IHZhbHVlKCk6IG51bWJlclxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IHZhbHVlKHZhbHVlOiBudW1iZXIpe1xyXG4gICAgICAgIHRoaXMuX2hpc3RvcnkucHVzaCh2YWx1ZSk7XHJcbiAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbW9kaWZ5KG51bWJlcjogbnVtYmVyKTogbnVtYmVyXHJcbiAgICB7XHJcbiAgICAgICAgIGlmICh0aGlzLl9zdGF0dXMgPT09IDApIHtcclxuICAgICAgICAgICAgbnVtYmVyID0gbnVtYmVyICogdGhpcy5hcHBsaWNhYmxlUGVyY2VudDtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKG51bWJlcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbnVtYmVyO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgYXBwbGljYWJsZVBlcmNlbnQoKTogbnVtYmVyXHJcbiAgICB7ICAgICAgICBcclxuICAgICAgICBjb25zdCBjaGFuZ2UgPSBNYXRoLnJhbmRvbSgpICogTWF0aC5hYnModGhpcy5fdmFsdWUpICogLjAxO1xyXG4gICAgICAgIGlmICh0aGlzLl92YWx1ZSA8IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIDEgLSBjaGFuZ2U7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl92YWx1ZSA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gMSArIGNoYW5nZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXX0=