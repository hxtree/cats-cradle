"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Turn = void 0;
const Cup_1 = require("./Cup");
const Luck_1 = require("./Luck");
const NotationCodec_1 = require("./NotationCodec");
class Turn {
    /**
     * Constructor
     * @param notation - dice notation to be used for turn
     * @param luck - inital value of luck
     */
    constructor(notation, luck) {
        this._notationCodec = new NotationCodec_1.NotationCodec();
        this._extraBonus = 0;
        if (luck === undefined) {
            this._luck = new Luck_1.Luck();
        }
        else {
            this._luck = new Luck_1.Luck(luck);
        }
        if (notation === undefined) {
            this._cup = new Cup_1.Cup();
        }
        else {
            this._cup = this._notationCodec.decodeCup(notation);
        }
    }
    get notation() {
        return this._notationCodec.encodeCup(this._cup);
    }
    set notation(value) {
        this._cup = this._notationCodec.decodeCup(value);
    }
    get luck() {
        return this._luck;
    }
    set luck(luck) {
        this._luck = luck;
    }
    get cup() {
        return this._cup;
    }
    set cup(cup) {
        this._cup = cup;
    }
    /**
     * Get min potential of turn
     * @returns
     */
    minPotential() {
        let total = 0;
        this._cup.forEach(function (collection) {
            total += collection.minPotential;
        });
        return total;
    }
    /**
     * Get maximum potential of turn
     * @returns
     */
    maxPotential() {
        let total = 0;
        this._cup.forEach(function (collection) {
            total += collection.maxPotential;
        });
        return total;
    }
    get total() {
        let total = 0;
        this._cup.forEach(function (collection) {
            total += collection.total;
        });
        return total;
    }
    get extraBonus() {
        return this._extraBonus;
    }
    /**
     * Roll cup of dice
     * @returns
     */
    roll() {
        const value = this._cup.roll();
        if (this._luck.status === Luck_1.Active.disable) {
            return this.total;
        }
        // update luck base value based on roll outcome percentage
        this._luck.update(this._cup.outcomePercent);
        const bonus = this._luck.modify(value) - value;
        // take luck modifier and distribute to dice
        // luck modifies actual dice not modifiers or multipliers
        // there is the potential for an amount to still exist after above iterations, store it
        this._extraBonus = this.cup.allocateBonuses(bonus);
        return this.total;
    }
}
exports.Turn = Turn;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHVybi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9UdXJuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLCtCQUdlO0FBQ2YsaUNBSWdCO0FBQ2hCLG1EQUd5QjtBQW1CekIsTUFBYSxJQUFJO0lBT2I7Ozs7T0FJRztJQUNILFlBQ0ksUUFBNEIsRUFDNUIsSUFBd0I7UUFFeEIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLDZCQUFhLEVBQUUsQ0FBQztRQUMxQyxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztRQUVyQixJQUFHLElBQUksS0FBSyxTQUFTLEVBQUM7WUFDbEIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLFdBQUksRUFBRSxDQUFDO1NBQzNCO2FBQU07WUFDSCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksV0FBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQy9CO1FBRUQsSUFBSSxRQUFRLEtBQUssU0FBUyxFQUFFO1lBQ3hCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxTQUFHLEVBQUUsQ0FBQztTQUN6QjthQUFNO1lBQ0gsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUN2RDtJQUNMLENBQUM7SUFFRCxJQUFXLFFBQVE7UUFDZixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRUQsSUFBVyxRQUFRLENBQUMsS0FBYTtRQUM3QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFRCxJQUFXLElBQUk7UUFDWCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUVELElBQVcsSUFBSSxDQUFDLElBQVc7UUFDdkIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7SUFDdEIsQ0FBQztJQUVELElBQVcsR0FBRztRQUNWLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNyQixDQUFDO0lBRUQsSUFBVyxHQUFHLENBQUMsR0FBUztRQUNwQixJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztJQUNwQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksWUFBWTtRQUVmLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztRQUNkLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsVUFBdUI7WUFDL0MsS0FBSyxJQUFJLFVBQVUsQ0FBQyxZQUFZLENBQUM7UUFDckMsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksWUFBWTtRQUVmLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztRQUNkLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsVUFBdUI7WUFDL0MsS0FBSyxJQUFJLFVBQVUsQ0FBQyxZQUFZLENBQUM7UUFDckMsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0lBRUQsSUFBVyxLQUFLO1FBRVosSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ2QsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxVQUF1QjtZQUMvQyxLQUFLLElBQUksVUFBVSxDQUFDLEtBQUssQ0FBQztRQUM5QixDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxJQUFXLFVBQVU7UUFDakIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzVCLENBQUM7SUFFRDs7O09BR0c7SUFDSSxJQUFJO1FBRVAsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUUvQixJQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLGFBQU0sQ0FBQyxPQUFPLEVBQUM7WUFDcEMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO1NBQ3JCO1FBRUQsMERBQTBEO1FBQzFELElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFFNUMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBRS9DLDRDQUE0QztRQUM1Qyx5REFBeUQ7UUFDekQsdUZBQXVGO1FBQ3ZGLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFbkQsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3RCLENBQUM7Q0FDSjtBQXhIRCxvQkF3SEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJQ29sbGVjdGlvbiB9IGZyb20gJy4vQ29sbGVjdGlvbic7XG5pbXBvcnQge1xuICAgIEN1cCxcbiAgICBJQ3VwXG59IGZyb20gJy4vQ3VwJztcbmltcG9ydCB7XG4gICAgQWN0aXZlLFxuICAgIElMdWNrLFxuICAgIEx1Y2tcbn0gZnJvbSAnLi9MdWNrJztcbmltcG9ydCB7XG4gICAgSU5vdGF0aW9uQ29kZWMsXG4gICAgTm90YXRpb25Db2RlY1xufSBmcm9tICcuL05vdGF0aW9uQ29kZWMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElUdXJuIHtcbiAgICAgZ2V0IG5vdGF0aW9uKCk6IHN0cmluZztcbiAgICAgc2V0IG5vdGF0aW9uKHZhbHVlOiBzdHJpbmcpO1xuICAgICBnZXQgbHVjaygpOiBJTHVjaztcbiAgICAgc2V0IGx1Y2sobHVjazogSUx1Y2spO1xuICAgICBnZXQgY3VwKCk6IElDdXA7XG4gICAgIHNldCBjdXAoY3VwOiBJQ3VwKTtcbiAgICAgbWluUG90ZW50aWFsKCk6IG51bWJlcjtcbiAgICAgbWF4UG90ZW50aWFsKCk6IG51bWJlcjtcbiAgICAgZ2V0IHRvdGFsKCk6IG51bWJlcjtcbiAgICAgZ2V0IGV4dHJhQm9udXMoKTogbnVtYmVyO1xuICAgICByb2xsKCk6IG51bWJlcjtcblxuXG5cbn1cblxuZXhwb3J0IGNsYXNzIFR1cm4gaW1wbGVtZW50cyBJVHVyblxue1xuICAgIHByaXZhdGUgX25vdGF0aW9uQ29kZWM6IElOb3RhdGlvbkNvZGVjO1xuICAgIHByaXZhdGUgX2N1cDogSUN1cDtcbiAgICBwcml2YXRlIF9sdWNrOiBJTHVjaztcbiAgICBwcml2YXRlIF9leHRyYUJvbnVzOiBudW1iZXI7IC8vc3VycGx1c0JvbnVzO1xuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0gbm90YXRpb24gLSBkaWNlIG5vdGF0aW9uIHRvIGJlIHVzZWQgZm9yIHR1cm4gXG4gICAgICogQHBhcmFtIGx1Y2sgLSBpbml0YWwgdmFsdWUgb2YgbHVja1xuICAgICAqL1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihcbiAgICAgICAgbm90YXRpb246IHN0cmluZyB8IHVuZGVmaW5lZCxcbiAgICAgICAgbHVjazogbnVtYmVyIHwgdW5kZWZpbmVkXG4gICAgKSB7XG4gICAgICAgIHRoaXMuX25vdGF0aW9uQ29kZWMgPSBuZXcgTm90YXRpb25Db2RlYygpO1xuICAgICAgICB0aGlzLl9leHRyYUJvbnVzID0gMDtcblxuICAgICAgICBpZihsdWNrID09PSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgdGhpcy5fbHVjayA9IG5ldyBMdWNrKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9sdWNrID0gbmV3IEx1Y2sobHVjayk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobm90YXRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5fY3VwID0gbmV3IEN1cCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fY3VwID0gdGhpcy5fbm90YXRpb25Db2RlYy5kZWNvZGVDdXAobm90YXRpb24pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBub3RhdGlvbigpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fbm90YXRpb25Db2RlYy5lbmNvZGVDdXAodGhpcy5fY3VwKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0IG5vdGF0aW9uKHZhbHVlOiBzdHJpbmcpe1xuICAgICAgICB0aGlzLl9jdXAgPSB0aGlzLl9ub3RhdGlvbkNvZGVjLmRlY29kZUN1cCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBsdWNrKCk6IElMdWNrIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2x1Y2s7XG4gICAgfVxuXG4gICAgcHVibGljIHNldCBsdWNrKGx1Y2s6IElMdWNrKXtcbiAgICAgICAgdGhpcy5fbHVjayA9IGx1Y2s7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBjdXAoKTogSUN1cCB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jdXA7XG4gICAgfVxuXG4gICAgcHVibGljIHNldCBjdXAoY3VwOiBJQ3VwKSB7XG4gICAgICAgIHRoaXMuX2N1cCA9IGN1cDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgbWluIHBvdGVudGlhbCBvZiB0dXJuXG4gICAgICogQHJldHVybnMgXG4gICAgICovXG4gICAgcHVibGljIG1pblBvdGVudGlhbCgpOiBudW1iZXJcbiAgICB7XG4gICAgICAgIGxldCB0b3RhbCA9IDA7XG4gICAgICAgIHRoaXMuX2N1cC5mb3JFYWNoKGZ1bmN0aW9uIChjb2xsZWN0aW9uOiBJQ29sbGVjdGlvbikge1xuICAgICAgICAgICAgdG90YWwgKz0gY29sbGVjdGlvbi5taW5Qb3RlbnRpYWw7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdG90YWw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IG1heGltdW0gcG90ZW50aWFsIG9mIHR1cm5cbiAgICAgKiBAcmV0dXJucyBcbiAgICAgKi9cbiAgICBwdWJsaWMgbWF4UG90ZW50aWFsKCk6IG51bWJlclxuICAgIHtcbiAgICAgICAgbGV0IHRvdGFsID0gMDtcbiAgICAgICAgdGhpcy5fY3VwLmZvckVhY2goZnVuY3Rpb24gKGNvbGxlY3Rpb246IElDb2xsZWN0aW9uKSB7XG4gICAgICAgICAgICB0b3RhbCArPSBjb2xsZWN0aW9uLm1heFBvdGVudGlhbDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRvdGFsO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgdG90YWwoKTogbnVtYmVyXG4gICAge1xuICAgICAgICBsZXQgdG90YWwgPSAwO1xuICAgICAgICB0aGlzLl9jdXAuZm9yRWFjaChmdW5jdGlvbiAoY29sbGVjdGlvbjogSUNvbGxlY3Rpb24pIHtcbiAgICAgICAgICAgIHRvdGFsICs9IGNvbGxlY3Rpb24udG90YWw7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdG90YWw7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBleHRyYUJvbnVzKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leHRyYUJvbnVzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJvbGwgY3VwIG9mIGRpY2UgXG4gICAgICogQHJldHVybnMgXG4gICAgICovXG4gICAgcHVibGljIHJvbGwoKTogbnVtYmVyXG4gICAge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuX2N1cC5yb2xsKCk7XG5cbiAgICAgICAgaWYodGhpcy5fbHVjay5zdGF0dXMgPT09IEFjdGl2ZS5kaXNhYmxlKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRvdGFsO1xuICAgICAgICB9XG4gICAgIFxuICAgICAgICAvLyB1cGRhdGUgbHVjayBiYXNlIHZhbHVlIGJhc2VkIG9uIHJvbGwgb3V0Y29tZSBwZXJjZW50YWdlXG4gICAgICAgIHRoaXMuX2x1Y2sudXBkYXRlKHRoaXMuX2N1cC5vdXRjb21lUGVyY2VudCk7XG5cbiAgICAgICAgY29uc3QgYm9udXMgPSB0aGlzLl9sdWNrLm1vZGlmeSh2YWx1ZSkgLSB2YWx1ZTtcblxuICAgICAgICAvLyB0YWtlIGx1Y2sgbW9kaWZpZXIgYW5kIGRpc3RyaWJ1dGUgdG8gZGljZVxuICAgICAgICAvLyBsdWNrIG1vZGlmaWVzIGFjdHVhbCBkaWNlIG5vdCBtb2RpZmllcnMgb3IgbXVsdGlwbGllcnNcbiAgICAgICAgLy8gdGhlcmUgaXMgdGhlIHBvdGVudGlhbCBmb3IgYW4gYW1vdW50IHRvIHN0aWxsIGV4aXN0IGFmdGVyIGFib3ZlIGl0ZXJhdGlvbnMsIHN0b3JlIGl0XG4gICAgICAgIHRoaXMuX2V4dHJhQm9udXMgPSB0aGlzLmN1cC5hbGxvY2F0ZUJvbnVzZXMoYm9udXMpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLnRvdGFsO1xuICAgIH1cbn0iXX0=