"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotationCodec = void 0;
const Collection_1 = require("./Collection");
const Cup_1 = require("./Cup");
const Dice_1 = require("./Dice");
/**
 * Codec that encodes objects to notations and decodes notations to objects.
 */
class NotationCodec {
    //private _cup;
    constructor() {
        this._separator = ',';
        this._cup = '2';
        //name: string) {
        //  this._cup = name;
    }
    get cup() {
        return this._cup;
    }
    /**
     * Encode from a cup to a string
     * @param cup - the cup to encode
     * @returns
     */
    encodeCup(cup) {
        let notation = '';
        let firstIteration = true;
        cup.forEach((collection) => {
            if (firstIteration) {
                firstIteration = false;
            }
            else {
                notation += this._separator;
            }
            notation += this.encodeCollection(collection);
        });
        return notation;
    }
    /**
     * Encode from a collection to a string
     * @param collection - the collection to encode
     * @returns
     */
    encodeCollection(collection) {
        let notation = '';
        const amount = collection.count();
        if (amount > 1) {
            notation += amount;
        }
        const sides = collection.sides;
        if (sides === 100) {
            notation += 'd%';
        }
        else {
            notation += 'd' + sides;
        }
        const modifier = collection.modifier;
        if (modifier > 0) {
            notation += '+' + Math.abs(modifier);
        }
        else if (modifier < 0) {
            notation += '-' + Math.abs(modifier);
        }
        const multiplier = collection.multiplier;
        if (multiplier > 1) {
            notation += '*' + multiplier;
        }
        return notation;
    }
    /**
     * Encode from a dice to a string
     */
    encodeDice(dice) {
        let notation = '';
        if (dice.max === 100) {
            notation += 'd%';
        }
        else {
            notation += 'd' + dice.max;
        }
        return notation;
    }
    /**
     * Decodes a dice cup notation
     * @param notation - 1d6+2*8,1d10,2d%
     */
    decodeCup(notation) {
        const expressionParts = notation.toLowerCase().split(this._separator);
        const cup = new Cup_1.Cup();
        expressionParts.forEach((expressionPart) => {
            cup.push(this.decodeCollection(expressionPart));
        });
        return cup;
    }
    /**
     * Decodes a dice collection notation
     * @param notation - 1d6+2*8
     * @returns ICollection
     */
    decodeCollection(notation) {
        let amount = 1;
        let sides = 2;
        let multiplier = 1;
        let modifier = 0;
        let unsorted = notation.split('d');
        amount = unsorted[0] !== '' ? Number(unsorted[0]) : 1;
        unsorted = unsorted[1].split('*');
        if (!this._isEmpty(unsorted[1])) {
            multiplier = Number(unsorted[1]);
        }
        if (unsorted[0].includes('+') !== false) {
            unsorted = unsorted[0].split('+');
            modifier = unsorted[1] !== null ? Number(unsorted[1]) : 0;
        }
        else if (unsorted[0].includes('-') !== false) {
            unsorted = unsorted[0].split('-');
            modifier = unsorted[1] !== null ? 0 - Number(unsorted[1]) : 0;
        }
        if (unsorted[0] === '%') {
            sides = 100;
        }
        else {
            sides = Number(unsorted[0]);
        }
        return new Collection_1.Collection(amount, sides, modifier, multiplier);
    }
    decodeDice(notation) {
        if (notation.charAt(0).toLowerCase() !== 'd') {
            throw new Error('Invalid dice notation');
        }
        const number = Number(notation.substring(1));
        return new Dice_1.Dice(number);
    }
    /**
     * Determine whether string is empty or not
     * @param string - the string to check
     * @returns
     */
    _isEmpty(string) {
        return !string || string.length === 0;
    }
}
exports.NotationCodec = NotationCodec;
//# sourceMappingURL=data:application/json;base64,