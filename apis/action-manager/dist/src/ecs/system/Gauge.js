"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Gauge = void 0;
/**
 * Gauge
 * A gauge is a value that can go up and down but never go below zero.
 */
class Gauge {
    constructor(current, max, min = 0) {
        this._current = current;
        this._max = max;
        this._min = min;
    }
    toString() {
        return `${this._current}/${this._max}`;
    }
    add(amount) {
        this._current += amount;
        if (this._current > this._max) {
            this._current = this._max;
        }
        if (this._current < this._min) {
            this._current = this._min;
        }
    }
    sub(amount) {
        this.add(-amount);
    }
    get max() {
        return this._max;
    }
    set max(max) {
        this._max = max;
    }
    get min() {
        return this._min;
    }
    set min(min) {
        this._min = min;
    }
    get current() {
        return this._current;
    }
    set current(current) {
        this._current = current;
    }
    toJSON() {
        return {
            min: this._min,
            max: this._max,
            current: this._current,
        };
    }
}
exports.Gauge = Gauge;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2F1Z2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvZWNzL3N5c3RlbS9HYXVnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQTs7O0dBR0c7QUFDSCxNQUFhLEtBQUs7SUFLZCxZQUFZLE9BQWUsRUFBRSxHQUFXLEVBQUUsTUFBYyxDQUFDO1FBQ3JELElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO1FBQ2hCLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO0lBQ3BCLENBQUM7SUFFTSxRQUFRO1FBQ1gsT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzNDLENBQUM7SUFFTyxHQUFHLENBQUMsTUFBYztRQUN0QixJQUFJLENBQUMsUUFBUSxJQUFJLE1BQU0sQ0FBQztRQUN4QixJQUFJLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRTtZQUMzQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7U0FDN0I7UUFDRCxJQUFJLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRTtZQUMzQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7U0FDN0I7SUFDTCxDQUFDO0lBRU0sR0FBRyxDQUFDLE1BQWM7UUFDckIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxJQUFXLEdBQUc7UUFDVixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDckIsQ0FBQztJQUVELElBQVcsR0FBRyxDQUFDLEdBQVc7UUFDdEIsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7SUFDcEIsQ0FBQztJQUVELElBQVcsR0FBRztRQUNWLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNyQixDQUFDO0lBRUQsSUFBVyxHQUFHLENBQUMsR0FBVztRQUN0QixJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztJQUNwQixDQUFDO0lBRUQsSUFBVyxPQUFPO1FBQ2QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxJQUFXLE9BQU8sQ0FBQyxPQUFlO1FBQzlCLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO0lBQzVCLENBQUM7SUFHTSxNQUFNO1FBQ1QsT0FBTztZQUNILEdBQUcsRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNkLEdBQUcsRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNkLE9BQU8sRUFBRSxJQUFJLENBQUMsUUFBUTtTQUN6QixDQUFDO0lBQ04sQ0FBQztDQUNKO0FBN0RELHNCQTZEQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogR2F1Z2VcbiAqIEEgZ2F1Z2UgaXMgYSB2YWx1ZSB0aGF0IGNhbiBnbyB1cCBhbmQgZG93biBidXQgbmV2ZXIgZ28gYmVsb3cgemVyby5cbiAqL1xuZXhwb3J0IGNsYXNzIEdhdWdlIHtcbiAgICBwcml2YXRlIF9taW46IG51bWJlcjtcbiAgICBwcml2YXRlIF9jdXJyZW50OiBudW1iZXI7XG4gICAgcHJpdmF0ZSBfbWF4OiBudW1iZXI7XG4gICAgXG4gICAgY29uc3RydWN0b3IoY3VycmVudDogbnVtYmVyLCBtYXg6IG51bWJlciwgbWluOiBudW1iZXIgPSAwKSB7XG4gICAgICAgIHRoaXMuX2N1cnJlbnQgPSBjdXJyZW50O1xuICAgICAgICB0aGlzLl9tYXggPSBtYXg7XG4gICAgICAgIHRoaXMuX21pbiA9IG1pbjtcbiAgICB9XG5cbiAgICBwdWJsaWMgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuX2N1cnJlbnR9LyR7dGhpcy5fbWF4fWA7XG4gICAgfVxuICAgIFxuICAgIHByaXZhdGUgYWRkKGFtb3VudDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuX2N1cnJlbnQgKz0gYW1vdW50O1xuICAgICAgICBpZiAodGhpcy5fY3VycmVudCA+IHRoaXMuX21heCkge1xuICAgICAgICAgICAgdGhpcy5fY3VycmVudCA9IHRoaXMuX21heDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fY3VycmVudCA8IHRoaXMuX21pbikge1xuICAgICAgICAgICAgdGhpcy5fY3VycmVudCA9IHRoaXMuX21pbjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBzdWIoYW1vdW50OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5hZGQoLWFtb3VudCk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBtYXgoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21heDtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0IG1heChtYXg6IG51bWJlcikge1xuICAgICAgICB0aGlzLl9tYXggPSBtYXg7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBtaW4oKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21pbjtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0IG1pbihtaW46IG51bWJlcikge1xuICAgICAgICB0aGlzLl9taW4gPSBtaW47XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBjdXJyZW50KCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jdXJyZW50O1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXQgY3VycmVudChjdXJyZW50OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5fY3VycmVudCA9IGN1cnJlbnQ7XG4gICAgfVxuXG4gICAgXG4gICAgcHVibGljIHRvSlNPTigpOiBhbnkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWluOiB0aGlzLl9taW4sXG4gICAgICAgICAgICBtYXg6IHRoaXMuX21heCxcbiAgICAgICAgICAgIGN1cnJlbnQ6IHRoaXMuX2N1cnJlbnQsXG4gICAgICAgIH07XG4gICAgfVxufSJdfQ==