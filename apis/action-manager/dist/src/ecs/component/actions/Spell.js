"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Darkness = exports.Light = exports.Telepathy = exports.Meteor = exports.Flare = exports.Reflect = exports.Boom = exports.Barrier = exports.Cure = exports.Revive = exports.Heal = exports.Aqua = exports.Tsunami = exports.Cyclone = exports.Gale = exports.Gust = exports.Twister = exports.Inferno = exports.Blizzard = exports.Landslide = exports.Quake = exports.Shock = exports.Gravity = void 0;
// If spell
// 0 – 3		Normal Spell
// 3 – 6		Mega Spell
// 6 – 9		Giga Spell
// 9 – 12		Tera Spell
// 12 – 15	Omega Spell
// This is just the name used for the attack depending on skill level
class Gravity {
}
exports.Gravity = Gravity;
class Shock {
}
exports.Shock = Shock;
class Quake {
}
exports.Quake = Quake;
class Landslide {
}
exports.Landslide = Landslide;
class Blizzard {
}
exports.Blizzard = Blizzard;
class Inferno {
}
exports.Inferno = Inferno;
class Twister {
}
exports.Twister = Twister;
class Gust {
}
exports.Gust = Gust;
class Gale {
}
exports.Gale = Gale;
class Cyclone {
}
exports.Cyclone = Cyclone;
class Tsunami {
}
exports.Tsunami = Tsunami;
class Aqua {
}
exports.Aqua = Aqua;
class Heal {
}
exports.Heal = Heal;
class Revive {
}
exports.Revive = Revive;
class Cure {
}
exports.Cure = Cure;
class Barrier {
}
exports.Barrier = Barrier;
class Boom {
}
exports.Boom = Boom;
class Reflect {
}
exports.Reflect = Reflect;
class Flare {
}
exports.Flare = Flare;
class Meteor {
}
exports.Meteor = Meteor;
class Telepathy {
}
exports.Telepathy = Telepathy;
class Light {
}
exports.Light = Light;
class Darkness {
}
exports.Darkness = Darkness;
//# sourceMappingURL=data:application/json;base64,