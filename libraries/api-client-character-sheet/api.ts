/* tslint:disable */
/* eslint-disable */
/**
 * @cats-cradles/character-sheet
 * An API for the character sheet service
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from './base';

/**
 *
 * @export
 * @interface CreateCharacterSheetDto
 */
export interface CreateCharacterSheetDto {
  /**
   *
   * @type {string}
   * @memberof CreateCharacterSheetDto
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof CreateCharacterSheetDto
   */
  archetypeId: CreateCharacterSheetDtoArchetypeIdEnum;
  /**
   *
   * @type {string}
   * @memberof CreateCharacterSheetDto
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof CreateCharacterSheetDto
   */
  surname: string;
}

/**
 * @export
 * @enum {string}
 */
export type CreateCharacterSheetDtoArchetypeIdEnum =
  | 'MOTHER'
  | 'MISCHIEVOUS_PIEBALD'
  | 'JANUS_PERSIAN'
  | 'LOOMEE_ANGORA'
  | 'OUERN_ONI'
  | 'VALLON_ONI'
  | 'MEEKU_ONI'
  | 'ARINOTH_DIYATH'
  | 'FAYE_IMAGO'
  | 'GAALI_RUNEWIN'
  | 'GUNTER_STONEWELL'
  | 'MALACE_TSIA'
  | 'PENNY_KIBBUTZ'
  | 'TRAEZ_UTHSHA'
  | 'VOID'
  | 'GENKI'
  | 'LAWZON_GREY'
  | 'MADHI_TSIA'
  | 'SUYRI'
  | 'WISP'
  | 'ASMIN'
  | 'DIAG'
  | 'MONARCH'
  | 'VICEROY'
  | 'SPIDER'
  | 'WARLING'
  | 'SEA_HORSE'
  | 'SENSITIVE_PLANT'
  | 'DEEP_THINKER';

/**
 * @export
 * @enum {string}
 */
export const CreateCharacterSheetDtoArchetypeIdEnum = {
  Mother: 'MOTHER' as CreateCharacterSheetDtoArchetypeIdEnum,
  MischievousPiebald:
    'MISCHIEVOUS_PIEBALD' as CreateCharacterSheetDtoArchetypeIdEnum,
  JanusPersian: 'JANUS_PERSIAN' as CreateCharacterSheetDtoArchetypeIdEnum,
  LoomeeAngora: 'LOOMEE_ANGORA' as CreateCharacterSheetDtoArchetypeIdEnum,
  OuernOni: 'OUERN_ONI' as CreateCharacterSheetDtoArchetypeIdEnum,
  VallonOni: 'VALLON_ONI' as CreateCharacterSheetDtoArchetypeIdEnum,
  MeekuOni: 'MEEKU_ONI' as CreateCharacterSheetDtoArchetypeIdEnum,
  ArinothDiyath: 'ARINOTH_DIYATH' as CreateCharacterSheetDtoArchetypeIdEnum,
  FayeImago: 'FAYE_IMAGO' as CreateCharacterSheetDtoArchetypeIdEnum,
  GaaliRunewin: 'GAALI_RUNEWIN' as CreateCharacterSheetDtoArchetypeIdEnum,
  GunterStonewell: 'GUNTER_STONEWELL' as CreateCharacterSheetDtoArchetypeIdEnum,
  MalaceTsia: 'MALACE_TSIA' as CreateCharacterSheetDtoArchetypeIdEnum,
  PennyKibbutz: 'PENNY_KIBBUTZ' as CreateCharacterSheetDtoArchetypeIdEnum,
  TraezUthsha: 'TRAEZ_UTHSHA' as CreateCharacterSheetDtoArchetypeIdEnum,
  Void: 'VOID' as CreateCharacterSheetDtoArchetypeIdEnum,
  Genki: 'GENKI' as CreateCharacterSheetDtoArchetypeIdEnum,
  LawzonGrey: 'LAWZON_GREY' as CreateCharacterSheetDtoArchetypeIdEnum,
  MadhiTsia: 'MADHI_TSIA' as CreateCharacterSheetDtoArchetypeIdEnum,
  Suyri: 'SUYRI' as CreateCharacterSheetDtoArchetypeIdEnum,
  Wisp: 'WISP' as CreateCharacterSheetDtoArchetypeIdEnum,
  Asmin: 'ASMIN' as CreateCharacterSheetDtoArchetypeIdEnum,
  Diag: 'DIAG' as CreateCharacterSheetDtoArchetypeIdEnum,
  Monarch: 'MONARCH' as CreateCharacterSheetDtoArchetypeIdEnum,
  Viceroy: 'VICEROY' as CreateCharacterSheetDtoArchetypeIdEnum,
  Spider: 'SPIDER' as CreateCharacterSheetDtoArchetypeIdEnum,
  Warling: 'WARLING' as CreateCharacterSheetDtoArchetypeIdEnum,
  SeaHorse: 'SEA_HORSE' as CreateCharacterSheetDtoArchetypeIdEnum,
  SensitivePlant: 'SENSITIVE_PLANT' as CreateCharacterSheetDtoArchetypeIdEnum,
  DeepThinker: 'DEEP_THINKER' as CreateCharacterSheetDtoArchetypeIdEnum,
};

export const archetypeControllerFindKey = (
  id:
    | 'MOTHER'
    | 'MISCHIEVOUS_PIEBALD'
    | 'JANUS_PERSIAN'
    | 'LOOMEE_ANGORA'
    | 'OUERN_ONI'
    | 'VALLON_ONI'
    | 'MEEKU_ONI'
    | 'ARINOTH_DIYATH'
    | 'FAYE_IMAGO'
    | 'GAALI_RUNEWIN'
    | 'GUNTER_STONEWELL'
    | 'MALACE_TSIA'
    | 'PENNY_KIBBUTZ'
    | 'TRAEZ_UTHSHA'
    | 'VOID'
    | 'GENKI'
    | 'LAWZON_GREY'
    | 'MADHI_TSIA'
    | 'SUYRI'
    | 'WISP'
    | 'ASMIN'
    | 'DIAG'
    | 'MONARCH'
    | 'VICEROY'
    | 'SPIDER'
    | 'WARLING'
    | 'SEA_HORSE'
    | 'SENSITIVE_PLANT'
    | 'DEEP_THINKER',
  options: any = {},
) => {
  const localVarPath = `/archetypes/{id}`.replace(
    `{${'id'}}`,
    encodeURIComponent(String(id)),
  );
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
  const canSearch = true && id !== undefined && id !== null;
  return canSearch ? localVarUrlObj.toString() : null;
};
export const archetypeControllerListKey = (options: any = {}) => {
  const localVarPath = `/archetypes`;
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
  const canSearch = true;
  return canSearch ? localVarUrlObj.toString() : null;
};
export const characterSheetControllerCreateKey = (
  createCharacterSheetDto: CreateCharacterSheetDto,
  options: any = {},
) => {
  const localVarPath = `/character-sheets`;
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
  const canSearch =
    true &&
    createCharacterSheetDto !== undefined &&
    createCharacterSheetDto !== null;
  return canSearch ? localVarUrlObj.toString() : null;
};
export const characterSheetControllerDeleteKey = (
  id: string,
  options: any = {},
) => {
  const localVarPath = `/character-sheets/{id}`.replace(
    `{${'id'}}`,
    encodeURIComponent(String(id)),
  );
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
  const canSearch = true && id !== undefined && id !== null;
  return canSearch ? localVarUrlObj.toString() : null;
};
export const characterSheetControllerFindAllKey = (options: any = {}) => {
  const localVarPath = `/character-sheets`;
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
  const canSearch = true;
  return canSearch ? localVarUrlObj.toString() : null;
};
export const characterSheetControllerFindOneKey = (
  id: string,
  options: any = {},
) => {
  const localVarPath = `/character-sheets/{id}`.replace(
    `{${'id'}}`,
    encodeURIComponent(String(id)),
  );
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
  const canSearch = true && id !== undefined && id !== null;
  return canSearch ? localVarUrlObj.toString() : null;
};
export const gearControllerFindKey = (
  id:
    | 'GOLD_BRACELETS'
    | 'RED_SCRAF'
    | 'COWHIDE_VEST'
    | 'FUNERAL_JAR'
    | 'SWORD_SHEATH'
    | 'MAGENETIC_GLOVES'
    | 'CATCHERS_MITT'
    | 'COMPASS'
    | 'GC'
    | 'TSHIRT_AND_JEANS'
    | 'OFFICERS_UNIFORM'
    | 'Category'
    | 'ASMINS_AXE'
    | 'GREAT_WAIL'
    | 'JUSTICE'
    | 'KEYSTONE'
    | 'ASSUALTER'
    | 'STRIKER'
    | 'ENERGY_BREAKER'
    | 'STONE_BREAKER'
    | 'THE_MAN_SLAYER'
    | 'HEROS_BLADE'
    | 'SWORD_OF_LAWZON'
    | 'TINY_TIMBER'
    | 'CADUCEUS'
    | 'ANTEDILUVIAN'
    | 'ETERNAL_FOLD'
    | 'GOLD_RUSH'
    | 'KINGS_BLADE'
    | 'RUSTY_RAPIER'
    | 'MYSTERIOUS_PENDANT'
    | 'PEACEKEEPER'
    | 'TROUBLE_MAKER'
    | 'STANDARD_ISSUE'
    | 'GREED'
    | 'LIBERTY'
    | 'MONARCH'
    | 'REGRET'
    | 'VICEROY'
    | 'VIOLATED',
  options: any = {},
) => {
  const localVarPath = `/gears/{id}`.replace(
    `{${'id'}}`,
    encodeURIComponent(String(id)),
  );
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
  const canSearch = true && id !== undefined && id !== null;
  return canSearch ? localVarUrlObj.toString() : null;
};
export const gearControllerListKey = (options: any = {}) => {
  const localVarPath = `/gears`;
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
  const canSearch = true;
  return canSearch ? localVarUrlObj.toString() : null;
};
export const skillControllerFindKey = (
  id:
    | 'BERSERK'
    | 'TOXIC_THRUST'
    | 'AERIAL_ASSUALT'
    | 'ONI'
    | 'TRUE_ONI'
    | 'APPRIASE'
    | 'COMBINE'
    | 'THROW'
    | 'PREPARE_FOOD'
    | 'GRAVITY'
    | 'SHOCK'
    | 'QUAKE'
    | 'LANDSLIDE'
    | 'BLIZZARD'
    | 'FIREBALL'
    | 'INFERNO'
    | 'TWISTER'
    | 'GUST'
    | 'GALE'
    | 'CYCLONE'
    | 'TSUNAMI'
    | 'AQUA'
    | 'HEAL'
    | 'REVIVE'
    | 'CURE'
    | 'BARRIER'
    | 'BOOM'
    | 'REFLECT'
    | 'FLARE'
    | 'METEOR'
    | 'TELEPATHY'
    | 'LIGHT'
    | 'DESOLATE'
    | 'DARKNESS'
    | 'STOP'
    | 'SLOW'
    | 'HASTE'
    | 'CHILL'
    | 'CHARM'
    | 'FROST'
    | 'ABSORB'
    | 'LEECH'
    | 'DRAIN'
    | 'GRAPPLING_HOOK'
    | 'PARRY'
    | 'SLASH'
    | 'STRIKE'
    | 'STAB'
    | 'CHOP'
    | 'CLEAVE'
    | 'WALK'
    | 'RUN'
    | 'SWIM'
    | 'BACK_FLIP'
    | 'DOUBLE_BACK_FLIP'
    | 'HIGH_JUMP'
    | 'CLIMB'
    | 'DUAL_WELD'
    | 'ESCAPE_ARTIST'
    | 'INTIMIDATE'
    | 'CONCENTRATION'
    | 'BLUFF'
    | 'SENSE_BLUFF'
    | 'GREEDY_INTENT'
    | 'SLOTH_COMPOSURE'
    | 'BLOOD_LUST'
    | 'ENVIOUS_OF_COMBAT'
    | 'GLUTTONOUS_DESIRE'
    | 'CATCHER'
    | 'COMMAND'
    | 'FORMATIONS'
    | 'ORDER'
    | 'VACHEL'
    | 'FELIX'
    | 'HERALDIC_LION'
    | 'SUMMON'
    | 'DISMISS'
    | 'LYRE'
    | 'SANDY'
    | 'OURUBORUS'
    | 'MISCHIEVOUS'
    | 'SCRIBBLES'
    | 'POISON_TRAP'
    | 'EXPLOSIVE_TRAP'
    | 'TIME_BOMB_TRAP'
    | 'CALTROPS_TRAP'
    | 'DISABLE_TRAP'
    | 'Focusable'
    | 'BOAST'
    | 'DISGUISE'
    | 'FOCUS'
    | 'GRAPPLE'
    | 'HIDE'
    | 'SCAN'
    | 'CHEER'
    | 'SUPPORT'
    | 'HOPE'
    | 'INSPIRE'
    | 'SCOUT'
    | 'MIMIC'
    | 'PICKPOCKET'
    | 'SEAL'
    | 'LULLABY'
    | 'WARD'
    | 'SACRIFICE'
    | 'PROTECT'
    | 'MOCK'
    | 'SEARCH'
    | 'STEAL'
    | 'PROTECTION'
    | 'RAGE',
  options: any = {},
) => {
  const localVarPath = `/skills/{id}`.replace(
    `{${'id'}}`,
    encodeURIComponent(String(id)),
  );
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
  const canSearch = true && id !== undefined && id !== null;
  return canSearch ? localVarUrlObj.toString() : null;
};
export const skillControllerListKey = (options: any = {}) => {
  const localVarPath = `/skills`;
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
  const canSearch = true;
  return canSearch ? localVarUrlObj.toString() : null;
};

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {'MOTHER' | 'MISCHIEVOUS_PIEBALD' | 'JANUS_PERSIAN' | 'LOOMEE_ANGORA' | 'OUERN_ONI' | 'VALLON_ONI' | 'MEEKU_ONI' | 'ARINOTH_DIYATH' | 'FAYE_IMAGO' | 'GAALI_RUNEWIN' | 'GUNTER_STONEWELL' | 'MALACE_TSIA' | 'PENNY_KIBBUTZ' | 'TRAEZ_UTHSHA' | 'VOID' | 'GENKI' | 'LAWZON_GREY' | 'MADHI_TSIA' | 'SUYRI' | 'WISP' | 'ASMIN' | 'DIAG' | 'MONARCH' | 'VICEROY' | 'SPIDER' | 'WARLING' | 'SEA_HORSE' | 'SENSITIVE_PLANT' | 'DEEP_THINKER'} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    archetypeControllerFind: async (
      id:
        | 'MOTHER'
        | 'MISCHIEVOUS_PIEBALD'
        | 'JANUS_PERSIAN'
        | 'LOOMEE_ANGORA'
        | 'OUERN_ONI'
        | 'VALLON_ONI'
        | 'MEEKU_ONI'
        | 'ARINOTH_DIYATH'
        | 'FAYE_IMAGO'
        | 'GAALI_RUNEWIN'
        | 'GUNTER_STONEWELL'
        | 'MALACE_TSIA'
        | 'PENNY_KIBBUTZ'
        | 'TRAEZ_UTHSHA'
        | 'VOID'
        | 'GENKI'
        | 'LAWZON_GREY'
        | 'MADHI_TSIA'
        | 'SUYRI'
        | 'WISP'
        | 'ASMIN'
        | 'DIAG'
        | 'MONARCH'
        | 'VICEROY'
        | 'SPIDER'
        | 'WARLING'
        | 'SEA_HORSE'
        | 'SENSITIVE_PLANT'
        | 'DEEP_THINKER',
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('archetypeControllerFind', 'id', id);
      const localVarPath = `/archetypes/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    archetypeControllerList: async (
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/archetypes`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {CreateCharacterSheetDto} createCharacterSheetDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    characterSheetControllerCreate: async (
      createCharacterSheetDto: CreateCharacterSheetDto,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createCharacterSheetDto' is not null or undefined
      assertParamExists(
        'characterSheetControllerCreate',
        'createCharacterSheetDto',
        createCharacterSheetDto,
      );
      const localVarPath = `/character-sheets`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createCharacterSheetDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    characterSheetControllerDelete: async (
      id: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('characterSheetControllerDelete', 'id', id);
      const localVarPath = `/character-sheets/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    characterSheetControllerFindAll: async (
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/character-sheets`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    characterSheetControllerFindOne: async (
      id: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('characterSheetControllerFindOne', 'id', id);
      const localVarPath = `/character-sheets/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {'GOLD_BRACELETS' | 'RED_SCRAF' | 'COWHIDE_VEST' | 'FUNERAL_JAR' | 'SWORD_SHEATH' | 'MAGENETIC_GLOVES' | 'CATCHERS_MITT' | 'COMPASS' | 'GC' | 'TSHIRT_AND_JEANS' | 'OFFICERS_UNIFORM' | 'Category' | 'ASMINS_AXE' | 'GREAT_WAIL' | 'JUSTICE' | 'KEYSTONE' | 'ASSUALTER' | 'STRIKER' | 'ENERGY_BREAKER' | 'STONE_BREAKER' | 'THE_MAN_SLAYER' | 'HEROS_BLADE' | 'SWORD_OF_LAWZON' | 'TINY_TIMBER' | 'CADUCEUS' | 'ANTEDILUVIAN' | 'ETERNAL_FOLD' | 'GOLD_RUSH' | 'KINGS_BLADE' | 'RUSTY_RAPIER' | 'MYSTERIOUS_PENDANT' | 'PEACEKEEPER' | 'TROUBLE_MAKER' | 'STANDARD_ISSUE' | 'GREED' | 'LIBERTY' | 'MONARCH' | 'REGRET' | 'VICEROY' | 'VIOLATED'} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gearControllerFind: async (
      id:
        | 'GOLD_BRACELETS'
        | 'RED_SCRAF'
        | 'COWHIDE_VEST'
        | 'FUNERAL_JAR'
        | 'SWORD_SHEATH'
        | 'MAGENETIC_GLOVES'
        | 'CATCHERS_MITT'
        | 'COMPASS'
        | 'GC'
        | 'TSHIRT_AND_JEANS'
        | 'OFFICERS_UNIFORM'
        | 'Category'
        | 'ASMINS_AXE'
        | 'GREAT_WAIL'
        | 'JUSTICE'
        | 'KEYSTONE'
        | 'ASSUALTER'
        | 'STRIKER'
        | 'ENERGY_BREAKER'
        | 'STONE_BREAKER'
        | 'THE_MAN_SLAYER'
        | 'HEROS_BLADE'
        | 'SWORD_OF_LAWZON'
        | 'TINY_TIMBER'
        | 'CADUCEUS'
        | 'ANTEDILUVIAN'
        | 'ETERNAL_FOLD'
        | 'GOLD_RUSH'
        | 'KINGS_BLADE'
        | 'RUSTY_RAPIER'
        | 'MYSTERIOUS_PENDANT'
        | 'PEACEKEEPER'
        | 'TROUBLE_MAKER'
        | 'STANDARD_ISSUE'
        | 'GREED'
        | 'LIBERTY'
        | 'MONARCH'
        | 'REGRET'
        | 'VICEROY'
        | 'VIOLATED',
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('gearControllerFind', 'id', id);
      const localVarPath = `/gears/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gearControllerList: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/gears`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {'BERSERK' | 'TOXIC_THRUST' | 'AERIAL_ASSUALT' | 'ONI' | 'TRUE_ONI' | 'APPRIASE' | 'COMBINE' | 'THROW' | 'PREPARE_FOOD' | 'GRAVITY' | 'SHOCK' | 'QUAKE' | 'LANDSLIDE' | 'BLIZZARD' | 'FIREBALL' | 'INFERNO' | 'TWISTER' | 'GUST' | 'GALE' | 'CYCLONE' | 'TSUNAMI' | 'AQUA' | 'HEAL' | 'REVIVE' | 'CURE' | 'BARRIER' | 'BOOM' | 'REFLECT' | 'FLARE' | 'METEOR' | 'TELEPATHY' | 'LIGHT' | 'DESOLATE' | 'DARKNESS' | 'STOP' | 'SLOW' | 'HASTE' | 'CHILL' | 'CHARM' | 'FROST' | 'ABSORB' | 'LEECH' | 'DRAIN' | 'GRAPPLING_HOOK' | 'PARRY' | 'SLASH' | 'STRIKE' | 'STAB' | 'CHOP' | 'CLEAVE' | 'WALK' | 'RUN' | 'SWIM' | 'BACK_FLIP' | 'DOUBLE_BACK_FLIP' | 'HIGH_JUMP' | 'CLIMB' | 'DUAL_WELD' | 'ESCAPE_ARTIST' | 'INTIMIDATE' | 'CONCENTRATION' | 'BLUFF' | 'SENSE_BLUFF' | 'GREEDY_INTENT' | 'SLOTH_COMPOSURE' | 'BLOOD_LUST' | 'ENVIOUS_OF_COMBAT' | 'GLUTTONOUS_DESIRE' | 'CATCHER' | 'COMMAND' | 'FORMATIONS' | 'ORDER' | 'VACHEL' | 'FELIX' | 'HERALDIC_LION' | 'SUMMON' | 'DISMISS' | 'LYRE' | 'SANDY' | 'OURUBORUS' | 'MISCHIEVOUS' | 'SCRIBBLES' | 'POISON_TRAP' | 'EXPLOSIVE_TRAP' | 'TIME_BOMB_TRAP' | 'CALTROPS_TRAP' | 'DISABLE_TRAP' | 'Focusable' | 'BOAST' | 'DISGUISE' | 'FOCUS' | 'GRAPPLE' | 'HIDE' | 'SCAN' | 'CHEER' | 'SUPPORT' | 'HOPE' | 'INSPIRE' | 'SCOUT' | 'MIMIC' | 'PICKPOCKET' | 'SEAL' | 'LULLABY' | 'WARD' | 'SACRIFICE' | 'PROTECT' | 'MOCK' | 'SEARCH' | 'STEAL' | 'PROTECTION' | 'RAGE'} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    skillControllerFind: async (
      id:
        | 'BERSERK'
        | 'TOXIC_THRUST'
        | 'AERIAL_ASSUALT'
        | 'ONI'
        | 'TRUE_ONI'
        | 'APPRIASE'
        | 'COMBINE'
        | 'THROW'
        | 'PREPARE_FOOD'
        | 'GRAVITY'
        | 'SHOCK'
        | 'QUAKE'
        | 'LANDSLIDE'
        | 'BLIZZARD'
        | 'FIREBALL'
        | 'INFERNO'
        | 'TWISTER'
        | 'GUST'
        | 'GALE'
        | 'CYCLONE'
        | 'TSUNAMI'
        | 'AQUA'
        | 'HEAL'
        | 'REVIVE'
        | 'CURE'
        | 'BARRIER'
        | 'BOOM'
        | 'REFLECT'
        | 'FLARE'
        | 'METEOR'
        | 'TELEPATHY'
        | 'LIGHT'
        | 'DESOLATE'
        | 'DARKNESS'
        | 'STOP'
        | 'SLOW'
        | 'HASTE'
        | 'CHILL'
        | 'CHARM'
        | 'FROST'
        | 'ABSORB'
        | 'LEECH'
        | 'DRAIN'
        | 'GRAPPLING_HOOK'
        | 'PARRY'
        | 'SLASH'
        | 'STRIKE'
        | 'STAB'
        | 'CHOP'
        | 'CLEAVE'
        | 'WALK'
        | 'RUN'
        | 'SWIM'
        | 'BACK_FLIP'
        | 'DOUBLE_BACK_FLIP'
        | 'HIGH_JUMP'
        | 'CLIMB'
        | 'DUAL_WELD'
        | 'ESCAPE_ARTIST'
        | 'INTIMIDATE'
        | 'CONCENTRATION'
        | 'BLUFF'
        | 'SENSE_BLUFF'
        | 'GREEDY_INTENT'
        | 'SLOTH_COMPOSURE'
        | 'BLOOD_LUST'
        | 'ENVIOUS_OF_COMBAT'
        | 'GLUTTONOUS_DESIRE'
        | 'CATCHER'
        | 'COMMAND'
        | 'FORMATIONS'
        | 'ORDER'
        | 'VACHEL'
        | 'FELIX'
        | 'HERALDIC_LION'
        | 'SUMMON'
        | 'DISMISS'
        | 'LYRE'
        | 'SANDY'
        | 'OURUBORUS'
        | 'MISCHIEVOUS'
        | 'SCRIBBLES'
        | 'POISON_TRAP'
        | 'EXPLOSIVE_TRAP'
        | 'TIME_BOMB_TRAP'
        | 'CALTROPS_TRAP'
        | 'DISABLE_TRAP'
        | 'Focusable'
        | 'BOAST'
        | 'DISGUISE'
        | 'FOCUS'
        | 'GRAPPLE'
        | 'HIDE'
        | 'SCAN'
        | 'CHEER'
        | 'SUPPORT'
        | 'HOPE'
        | 'INSPIRE'
        | 'SCOUT'
        | 'MIMIC'
        | 'PICKPOCKET'
        | 'SEAL'
        | 'LULLABY'
        | 'WARD'
        | 'SACRIFICE'
        | 'PROTECT'
        | 'MOCK'
        | 'SEARCH'
        | 'STEAL'
        | 'PROTECTION'
        | 'RAGE',
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('skillControllerFind', 'id', id);
      const localVarPath = `/skills/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    skillControllerList: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/skills`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {'MOTHER' | 'MISCHIEVOUS_PIEBALD' | 'JANUS_PERSIAN' | 'LOOMEE_ANGORA' | 'OUERN_ONI' | 'VALLON_ONI' | 'MEEKU_ONI' | 'ARINOTH_DIYATH' | 'FAYE_IMAGO' | 'GAALI_RUNEWIN' | 'GUNTER_STONEWELL' | 'MALACE_TSIA' | 'PENNY_KIBBUTZ' | 'TRAEZ_UTHSHA' | 'VOID' | 'GENKI' | 'LAWZON_GREY' | 'MADHI_TSIA' | 'SUYRI' | 'WISP' | 'ASMIN' | 'DIAG' | 'MONARCH' | 'VICEROY' | 'SPIDER' | 'WARLING' | 'SEA_HORSE' | 'SENSITIVE_PLANT' | 'DEEP_THINKER'} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async archetypeControllerFind(
      id:
        | 'MOTHER'
        | 'MISCHIEVOUS_PIEBALD'
        | 'JANUS_PERSIAN'
        | 'LOOMEE_ANGORA'
        | 'OUERN_ONI'
        | 'VALLON_ONI'
        | 'MEEKU_ONI'
        | 'ARINOTH_DIYATH'
        | 'FAYE_IMAGO'
        | 'GAALI_RUNEWIN'
        | 'GUNTER_STONEWELL'
        | 'MALACE_TSIA'
        | 'PENNY_KIBBUTZ'
        | 'TRAEZ_UTHSHA'
        | 'VOID'
        | 'GENKI'
        | 'LAWZON_GREY'
        | 'MADHI_TSIA'
        | 'SUYRI'
        | 'WISP'
        | 'ASMIN'
        | 'DIAG'
        | 'MONARCH'
        | 'VICEROY'
        | 'SPIDER'
        | 'WARLING'
        | 'SEA_HORSE'
        | 'SENSITIVE_PLANT'
        | 'DEEP_THINKER',
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.archetypeControllerFind(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async archetypeControllerList(
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.archetypeControllerList(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {CreateCharacterSheetDto} createCharacterSheetDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async characterSheetControllerCreate(
      createCharacterSheetDto: CreateCharacterSheetDto,
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.characterSheetControllerCreate(
          createCharacterSheetDto,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async characterSheetControllerDelete(
      id: string,
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.characterSheetControllerDelete(
          id,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async characterSheetControllerFindAll(
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.characterSheetControllerFindAll(
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async characterSheetControllerFindOne(
      id: string,
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.characterSheetControllerFindOne(
          id,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {'GOLD_BRACELETS' | 'RED_SCRAF' | 'COWHIDE_VEST' | 'FUNERAL_JAR' | 'SWORD_SHEATH' | 'MAGENETIC_GLOVES' | 'CATCHERS_MITT' | 'COMPASS' | 'GC' | 'TSHIRT_AND_JEANS' | 'OFFICERS_UNIFORM' | 'Category' | 'ASMINS_AXE' | 'GREAT_WAIL' | 'JUSTICE' | 'KEYSTONE' | 'ASSUALTER' | 'STRIKER' | 'ENERGY_BREAKER' | 'STONE_BREAKER' | 'THE_MAN_SLAYER' | 'HEROS_BLADE' | 'SWORD_OF_LAWZON' | 'TINY_TIMBER' | 'CADUCEUS' | 'ANTEDILUVIAN' | 'ETERNAL_FOLD' | 'GOLD_RUSH' | 'KINGS_BLADE' | 'RUSTY_RAPIER' | 'MYSTERIOUS_PENDANT' | 'PEACEKEEPER' | 'TROUBLE_MAKER' | 'STANDARD_ISSUE' | 'GREED' | 'LIBERTY' | 'MONARCH' | 'REGRET' | 'VICEROY' | 'VIOLATED'} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async gearControllerFind(
      id:
        | 'GOLD_BRACELETS'
        | 'RED_SCRAF'
        | 'COWHIDE_VEST'
        | 'FUNERAL_JAR'
        | 'SWORD_SHEATH'
        | 'MAGENETIC_GLOVES'
        | 'CATCHERS_MITT'
        | 'COMPASS'
        | 'GC'
        | 'TSHIRT_AND_JEANS'
        | 'OFFICERS_UNIFORM'
        | 'Category'
        | 'ASMINS_AXE'
        | 'GREAT_WAIL'
        | 'JUSTICE'
        | 'KEYSTONE'
        | 'ASSUALTER'
        | 'STRIKER'
        | 'ENERGY_BREAKER'
        | 'STONE_BREAKER'
        | 'THE_MAN_SLAYER'
        | 'HEROS_BLADE'
        | 'SWORD_OF_LAWZON'
        | 'TINY_TIMBER'
        | 'CADUCEUS'
        | 'ANTEDILUVIAN'
        | 'ETERNAL_FOLD'
        | 'GOLD_RUSH'
        | 'KINGS_BLADE'
        | 'RUSTY_RAPIER'
        | 'MYSTERIOUS_PENDANT'
        | 'PEACEKEEPER'
        | 'TROUBLE_MAKER'
        | 'STANDARD_ISSUE'
        | 'GREED'
        | 'LIBERTY'
        | 'MONARCH'
        | 'REGRET'
        | 'VICEROY'
        | 'VIOLATED',
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.gearControllerFind(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async gearControllerList(
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.gearControllerList(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {'BERSERK' | 'TOXIC_THRUST' | 'AERIAL_ASSUALT' | 'ONI' | 'TRUE_ONI' | 'APPRIASE' | 'COMBINE' | 'THROW' | 'PREPARE_FOOD' | 'GRAVITY' | 'SHOCK' | 'QUAKE' | 'LANDSLIDE' | 'BLIZZARD' | 'FIREBALL' | 'INFERNO' | 'TWISTER' | 'GUST' | 'GALE' | 'CYCLONE' | 'TSUNAMI' | 'AQUA' | 'HEAL' | 'REVIVE' | 'CURE' | 'BARRIER' | 'BOOM' | 'REFLECT' | 'FLARE' | 'METEOR' | 'TELEPATHY' | 'LIGHT' | 'DESOLATE' | 'DARKNESS' | 'STOP' | 'SLOW' | 'HASTE' | 'CHILL' | 'CHARM' | 'FROST' | 'ABSORB' | 'LEECH' | 'DRAIN' | 'GRAPPLING_HOOK' | 'PARRY' | 'SLASH' | 'STRIKE' | 'STAB' | 'CHOP' | 'CLEAVE' | 'WALK' | 'RUN' | 'SWIM' | 'BACK_FLIP' | 'DOUBLE_BACK_FLIP' | 'HIGH_JUMP' | 'CLIMB' | 'DUAL_WELD' | 'ESCAPE_ARTIST' | 'INTIMIDATE' | 'CONCENTRATION' | 'BLUFF' | 'SENSE_BLUFF' | 'GREEDY_INTENT' | 'SLOTH_COMPOSURE' | 'BLOOD_LUST' | 'ENVIOUS_OF_COMBAT' | 'GLUTTONOUS_DESIRE' | 'CATCHER' | 'COMMAND' | 'FORMATIONS' | 'ORDER' | 'VACHEL' | 'FELIX' | 'HERALDIC_LION' | 'SUMMON' | 'DISMISS' | 'LYRE' | 'SANDY' | 'OURUBORUS' | 'MISCHIEVOUS' | 'SCRIBBLES' | 'POISON_TRAP' | 'EXPLOSIVE_TRAP' | 'TIME_BOMB_TRAP' | 'CALTROPS_TRAP' | 'DISABLE_TRAP' | 'Focusable' | 'BOAST' | 'DISGUISE' | 'FOCUS' | 'GRAPPLE' | 'HIDE' | 'SCAN' | 'CHEER' | 'SUPPORT' | 'HOPE' | 'INSPIRE' | 'SCOUT' | 'MIMIC' | 'PICKPOCKET' | 'SEAL' | 'LULLABY' | 'WARD' | 'SACRIFICE' | 'PROTECT' | 'MOCK' | 'SEARCH' | 'STEAL' | 'PROTECTION' | 'RAGE'} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async skillControllerFind(
      id:
        | 'BERSERK'
        | 'TOXIC_THRUST'
        | 'AERIAL_ASSUALT'
        | 'ONI'
        | 'TRUE_ONI'
        | 'APPRIASE'
        | 'COMBINE'
        | 'THROW'
        | 'PREPARE_FOOD'
        | 'GRAVITY'
        | 'SHOCK'
        | 'QUAKE'
        | 'LANDSLIDE'
        | 'BLIZZARD'
        | 'FIREBALL'
        | 'INFERNO'
        | 'TWISTER'
        | 'GUST'
        | 'GALE'
        | 'CYCLONE'
        | 'TSUNAMI'
        | 'AQUA'
        | 'HEAL'
        | 'REVIVE'
        | 'CURE'
        | 'BARRIER'
        | 'BOOM'
        | 'REFLECT'
        | 'FLARE'
        | 'METEOR'
        | 'TELEPATHY'
        | 'LIGHT'
        | 'DESOLATE'
        | 'DARKNESS'
        | 'STOP'
        | 'SLOW'
        | 'HASTE'
        | 'CHILL'
        | 'CHARM'
        | 'FROST'
        | 'ABSORB'
        | 'LEECH'
        | 'DRAIN'
        | 'GRAPPLING_HOOK'
        | 'PARRY'
        | 'SLASH'
        | 'STRIKE'
        | 'STAB'
        | 'CHOP'
        | 'CLEAVE'
        | 'WALK'
        | 'RUN'
        | 'SWIM'
        | 'BACK_FLIP'
        | 'DOUBLE_BACK_FLIP'
        | 'HIGH_JUMP'
        | 'CLIMB'
        | 'DUAL_WELD'
        | 'ESCAPE_ARTIST'
        | 'INTIMIDATE'
        | 'CONCENTRATION'
        | 'BLUFF'
        | 'SENSE_BLUFF'
        | 'GREEDY_INTENT'
        | 'SLOTH_COMPOSURE'
        | 'BLOOD_LUST'
        | 'ENVIOUS_OF_COMBAT'
        | 'GLUTTONOUS_DESIRE'
        | 'CATCHER'
        | 'COMMAND'
        | 'FORMATIONS'
        | 'ORDER'
        | 'VACHEL'
        | 'FELIX'
        | 'HERALDIC_LION'
        | 'SUMMON'
        | 'DISMISS'
        | 'LYRE'
        | 'SANDY'
        | 'OURUBORUS'
        | 'MISCHIEVOUS'
        | 'SCRIBBLES'
        | 'POISON_TRAP'
        | 'EXPLOSIVE_TRAP'
        | 'TIME_BOMB_TRAP'
        | 'CALTROPS_TRAP'
        | 'DISABLE_TRAP'
        | 'Focusable'
        | 'BOAST'
        | 'DISGUISE'
        | 'FOCUS'
        | 'GRAPPLE'
        | 'HIDE'
        | 'SCAN'
        | 'CHEER'
        | 'SUPPORT'
        | 'HOPE'
        | 'INSPIRE'
        | 'SCOUT'
        | 'MIMIC'
        | 'PICKPOCKET'
        | 'SEAL'
        | 'LULLABY'
        | 'WARD'
        | 'SACRIFICE'
        | 'PROTECT'
        | 'MOCK'
        | 'SEARCH'
        | 'STEAL'
        | 'PROTECTION'
        | 'RAGE',
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.skillControllerFind(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async skillControllerList(
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.skillControllerList(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     *
     * @param {'MOTHER' | 'MISCHIEVOUS_PIEBALD' | 'JANUS_PERSIAN' | 'LOOMEE_ANGORA' | 'OUERN_ONI' | 'VALLON_ONI' | 'MEEKU_ONI' | 'ARINOTH_DIYATH' | 'FAYE_IMAGO' | 'GAALI_RUNEWIN' | 'GUNTER_STONEWELL' | 'MALACE_TSIA' | 'PENNY_KIBBUTZ' | 'TRAEZ_UTHSHA' | 'VOID' | 'GENKI' | 'LAWZON_GREY' | 'MADHI_TSIA' | 'SUYRI' | 'WISP' | 'ASMIN' | 'DIAG' | 'MONARCH' | 'VICEROY' | 'SPIDER' | 'WARLING' | 'SEA_HORSE' | 'SENSITIVE_PLANT' | 'DEEP_THINKER'} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    archetypeControllerFind(
      id:
        | 'MOTHER'
        | 'MISCHIEVOUS_PIEBALD'
        | 'JANUS_PERSIAN'
        | 'LOOMEE_ANGORA'
        | 'OUERN_ONI'
        | 'VALLON_ONI'
        | 'MEEKU_ONI'
        | 'ARINOTH_DIYATH'
        | 'FAYE_IMAGO'
        | 'GAALI_RUNEWIN'
        | 'GUNTER_STONEWELL'
        | 'MALACE_TSIA'
        | 'PENNY_KIBBUTZ'
        | 'TRAEZ_UTHSHA'
        | 'VOID'
        | 'GENKI'
        | 'LAWZON_GREY'
        | 'MADHI_TSIA'
        | 'SUYRI'
        | 'WISP'
        | 'ASMIN'
        | 'DIAG'
        | 'MONARCH'
        | 'VICEROY'
        | 'SPIDER'
        | 'WARLING'
        | 'SEA_HORSE'
        | 'SENSITIVE_PLANT'
        | 'DEEP_THINKER',
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .archetypeControllerFind(id, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    archetypeControllerList(options?: any): AxiosPromise<void> {
      return localVarFp
        .archetypeControllerList(options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {CreateCharacterSheetDto} createCharacterSheetDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    characterSheetControllerCreate(
      createCharacterSheetDto: CreateCharacterSheetDto,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .characterSheetControllerCreate(createCharacterSheetDto, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    characterSheetControllerDelete(
      id: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .characterSheetControllerDelete(id, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    characterSheetControllerFindAll(options?: any): AxiosPromise<void> {
      return localVarFp
        .characterSheetControllerFindAll(options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    characterSheetControllerFindOne(
      id: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .characterSheetControllerFindOne(id, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {'GOLD_BRACELETS' | 'RED_SCRAF' | 'COWHIDE_VEST' | 'FUNERAL_JAR' | 'SWORD_SHEATH' | 'MAGENETIC_GLOVES' | 'CATCHERS_MITT' | 'COMPASS' | 'GC' | 'TSHIRT_AND_JEANS' | 'OFFICERS_UNIFORM' | 'Category' | 'ASMINS_AXE' | 'GREAT_WAIL' | 'JUSTICE' | 'KEYSTONE' | 'ASSUALTER' | 'STRIKER' | 'ENERGY_BREAKER' | 'STONE_BREAKER' | 'THE_MAN_SLAYER' | 'HEROS_BLADE' | 'SWORD_OF_LAWZON' | 'TINY_TIMBER' | 'CADUCEUS' | 'ANTEDILUVIAN' | 'ETERNAL_FOLD' | 'GOLD_RUSH' | 'KINGS_BLADE' | 'RUSTY_RAPIER' | 'MYSTERIOUS_PENDANT' | 'PEACEKEEPER' | 'TROUBLE_MAKER' | 'STANDARD_ISSUE' | 'GREED' | 'LIBERTY' | 'MONARCH' | 'REGRET' | 'VICEROY' | 'VIOLATED'} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gearControllerFind(
      id:
        | 'GOLD_BRACELETS'
        | 'RED_SCRAF'
        | 'COWHIDE_VEST'
        | 'FUNERAL_JAR'
        | 'SWORD_SHEATH'
        | 'MAGENETIC_GLOVES'
        | 'CATCHERS_MITT'
        | 'COMPASS'
        | 'GC'
        | 'TSHIRT_AND_JEANS'
        | 'OFFICERS_UNIFORM'
        | 'Category'
        | 'ASMINS_AXE'
        | 'GREAT_WAIL'
        | 'JUSTICE'
        | 'KEYSTONE'
        | 'ASSUALTER'
        | 'STRIKER'
        | 'ENERGY_BREAKER'
        | 'STONE_BREAKER'
        | 'THE_MAN_SLAYER'
        | 'HEROS_BLADE'
        | 'SWORD_OF_LAWZON'
        | 'TINY_TIMBER'
        | 'CADUCEUS'
        | 'ANTEDILUVIAN'
        | 'ETERNAL_FOLD'
        | 'GOLD_RUSH'
        | 'KINGS_BLADE'
        | 'RUSTY_RAPIER'
        | 'MYSTERIOUS_PENDANT'
        | 'PEACEKEEPER'
        | 'TROUBLE_MAKER'
        | 'STANDARD_ISSUE'
        | 'GREED'
        | 'LIBERTY'
        | 'MONARCH'
        | 'REGRET'
        | 'VICEROY'
        | 'VIOLATED',
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .gearControllerFind(id, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gearControllerList(options?: any): AxiosPromise<void> {
      return localVarFp
        .gearControllerList(options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {'BERSERK' | 'TOXIC_THRUST' | 'AERIAL_ASSUALT' | 'ONI' | 'TRUE_ONI' | 'APPRIASE' | 'COMBINE' | 'THROW' | 'PREPARE_FOOD' | 'GRAVITY' | 'SHOCK' | 'QUAKE' | 'LANDSLIDE' | 'BLIZZARD' | 'FIREBALL' | 'INFERNO' | 'TWISTER' | 'GUST' | 'GALE' | 'CYCLONE' | 'TSUNAMI' | 'AQUA' | 'HEAL' | 'REVIVE' | 'CURE' | 'BARRIER' | 'BOOM' | 'REFLECT' | 'FLARE' | 'METEOR' | 'TELEPATHY' | 'LIGHT' | 'DESOLATE' | 'DARKNESS' | 'STOP' | 'SLOW' | 'HASTE' | 'CHILL' | 'CHARM' | 'FROST' | 'ABSORB' | 'LEECH' | 'DRAIN' | 'GRAPPLING_HOOK' | 'PARRY' | 'SLASH' | 'STRIKE' | 'STAB' | 'CHOP' | 'CLEAVE' | 'WALK' | 'RUN' | 'SWIM' | 'BACK_FLIP' | 'DOUBLE_BACK_FLIP' | 'HIGH_JUMP' | 'CLIMB' | 'DUAL_WELD' | 'ESCAPE_ARTIST' | 'INTIMIDATE' | 'CONCENTRATION' | 'BLUFF' | 'SENSE_BLUFF' | 'GREEDY_INTENT' | 'SLOTH_COMPOSURE' | 'BLOOD_LUST' | 'ENVIOUS_OF_COMBAT' | 'GLUTTONOUS_DESIRE' | 'CATCHER' | 'COMMAND' | 'FORMATIONS' | 'ORDER' | 'VACHEL' | 'FELIX' | 'HERALDIC_LION' | 'SUMMON' | 'DISMISS' | 'LYRE' | 'SANDY' | 'OURUBORUS' | 'MISCHIEVOUS' | 'SCRIBBLES' | 'POISON_TRAP' | 'EXPLOSIVE_TRAP' | 'TIME_BOMB_TRAP' | 'CALTROPS_TRAP' | 'DISABLE_TRAP' | 'Focusable' | 'BOAST' | 'DISGUISE' | 'FOCUS' | 'GRAPPLE' | 'HIDE' | 'SCAN' | 'CHEER' | 'SUPPORT' | 'HOPE' | 'INSPIRE' | 'SCOUT' | 'MIMIC' | 'PICKPOCKET' | 'SEAL' | 'LULLABY' | 'WARD' | 'SACRIFICE' | 'PROTECT' | 'MOCK' | 'SEARCH' | 'STEAL' | 'PROTECTION' | 'RAGE'} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    skillControllerFind(
      id:
        | 'BERSERK'
        | 'TOXIC_THRUST'
        | 'AERIAL_ASSUALT'
        | 'ONI'
        | 'TRUE_ONI'
        | 'APPRIASE'
        | 'COMBINE'
        | 'THROW'
        | 'PREPARE_FOOD'
        | 'GRAVITY'
        | 'SHOCK'
        | 'QUAKE'
        | 'LANDSLIDE'
        | 'BLIZZARD'
        | 'FIREBALL'
        | 'INFERNO'
        | 'TWISTER'
        | 'GUST'
        | 'GALE'
        | 'CYCLONE'
        | 'TSUNAMI'
        | 'AQUA'
        | 'HEAL'
        | 'REVIVE'
        | 'CURE'
        | 'BARRIER'
        | 'BOOM'
        | 'REFLECT'
        | 'FLARE'
        | 'METEOR'
        | 'TELEPATHY'
        | 'LIGHT'
        | 'DESOLATE'
        | 'DARKNESS'
        | 'STOP'
        | 'SLOW'
        | 'HASTE'
        | 'CHILL'
        | 'CHARM'
        | 'FROST'
        | 'ABSORB'
        | 'LEECH'
        | 'DRAIN'
        | 'GRAPPLING_HOOK'
        | 'PARRY'
        | 'SLASH'
        | 'STRIKE'
        | 'STAB'
        | 'CHOP'
        | 'CLEAVE'
        | 'WALK'
        | 'RUN'
        | 'SWIM'
        | 'BACK_FLIP'
        | 'DOUBLE_BACK_FLIP'
        | 'HIGH_JUMP'
        | 'CLIMB'
        | 'DUAL_WELD'
        | 'ESCAPE_ARTIST'
        | 'INTIMIDATE'
        | 'CONCENTRATION'
        | 'BLUFF'
        | 'SENSE_BLUFF'
        | 'GREEDY_INTENT'
        | 'SLOTH_COMPOSURE'
        | 'BLOOD_LUST'
        | 'ENVIOUS_OF_COMBAT'
        | 'GLUTTONOUS_DESIRE'
        | 'CATCHER'
        | 'COMMAND'
        | 'FORMATIONS'
        | 'ORDER'
        | 'VACHEL'
        | 'FELIX'
        | 'HERALDIC_LION'
        | 'SUMMON'
        | 'DISMISS'
        | 'LYRE'
        | 'SANDY'
        | 'OURUBORUS'
        | 'MISCHIEVOUS'
        | 'SCRIBBLES'
        | 'POISON_TRAP'
        | 'EXPLOSIVE_TRAP'
        | 'TIME_BOMB_TRAP'
        | 'CALTROPS_TRAP'
        | 'DISABLE_TRAP'
        | 'Focusable'
        | 'BOAST'
        | 'DISGUISE'
        | 'FOCUS'
        | 'GRAPPLE'
        | 'HIDE'
        | 'SCAN'
        | 'CHEER'
        | 'SUPPORT'
        | 'HOPE'
        | 'INSPIRE'
        | 'SCOUT'
        | 'MIMIC'
        | 'PICKPOCKET'
        | 'SEAL'
        | 'LULLABY'
        | 'WARD'
        | 'SACRIFICE'
        | 'PROTECT'
        | 'MOCK'
        | 'SEARCH'
        | 'STEAL'
        | 'PROTECTION'
        | 'RAGE',
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .skillControllerFind(id, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    skillControllerList(options?: any): AxiosPromise<void> {
      return localVarFp
        .skillControllerList(options)
        .then(request => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
  /**
   *
   * @param {'MOTHER' | 'MISCHIEVOUS_PIEBALD' | 'JANUS_PERSIAN' | 'LOOMEE_ANGORA' | 'OUERN_ONI' | 'VALLON_ONI' | 'MEEKU_ONI' | 'ARINOTH_DIYATH' | 'FAYE_IMAGO' | 'GAALI_RUNEWIN' | 'GUNTER_STONEWELL' | 'MALACE_TSIA' | 'PENNY_KIBBUTZ' | 'TRAEZ_UTHSHA' | 'VOID' | 'GENKI' | 'LAWZON_GREY' | 'MADHI_TSIA' | 'SUYRI' | 'WISP' | 'ASMIN' | 'DIAG' | 'MONARCH' | 'VICEROY' | 'SPIDER' | 'WARLING' | 'SEA_HORSE' | 'SENSITIVE_PLANT' | 'DEEP_THINKER'} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  archetypeControllerFind(
    id:
      | 'MOTHER'
      | 'MISCHIEVOUS_PIEBALD'
      | 'JANUS_PERSIAN'
      | 'LOOMEE_ANGORA'
      | 'OUERN_ONI'
      | 'VALLON_ONI'
      | 'MEEKU_ONI'
      | 'ARINOTH_DIYATH'
      | 'FAYE_IMAGO'
      | 'GAALI_RUNEWIN'
      | 'GUNTER_STONEWELL'
      | 'MALACE_TSIA'
      | 'PENNY_KIBBUTZ'
      | 'TRAEZ_UTHSHA'
      | 'VOID'
      | 'GENKI'
      | 'LAWZON_GREY'
      | 'MADHI_TSIA'
      | 'SUYRI'
      | 'WISP'
      | 'ASMIN'
      | 'DIAG'
      | 'MONARCH'
      | 'VICEROY'
      | 'SPIDER'
      | 'WARLING'
      | 'SEA_HORSE'
      | 'SENSITIVE_PLANT'
      | 'DEEP_THINKER',
    options?: any,
  ): AxiosPromise<void>;

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  archetypeControllerList(options?: any): AxiosPromise<void>;

  /**
   *
   * @param {CreateCharacterSheetDto} createCharacterSheetDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  characterSheetControllerCreate(
    createCharacterSheetDto: CreateCharacterSheetDto,
    options?: any,
  ): AxiosPromise<void>;

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  characterSheetControllerDelete(id: string, options?: any): AxiosPromise<void>;

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  characterSheetControllerFindAll(options?: any): AxiosPromise<void>;

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  characterSheetControllerFindOne(
    id: string,
    options?: any,
  ): AxiosPromise<void>;

  /**
   *
   * @param {'GOLD_BRACELETS' | 'RED_SCRAF' | 'COWHIDE_VEST' | 'FUNERAL_JAR' | 'SWORD_SHEATH' | 'MAGENETIC_GLOVES' | 'CATCHERS_MITT' | 'COMPASS' | 'GC' | 'TSHIRT_AND_JEANS' | 'OFFICERS_UNIFORM' | 'Category' | 'ASMINS_AXE' | 'GREAT_WAIL' | 'JUSTICE' | 'KEYSTONE' | 'ASSUALTER' | 'STRIKER' | 'ENERGY_BREAKER' | 'STONE_BREAKER' | 'THE_MAN_SLAYER' | 'HEROS_BLADE' | 'SWORD_OF_LAWZON' | 'TINY_TIMBER' | 'CADUCEUS' | 'ANTEDILUVIAN' | 'ETERNAL_FOLD' | 'GOLD_RUSH' | 'KINGS_BLADE' | 'RUSTY_RAPIER' | 'MYSTERIOUS_PENDANT' | 'PEACEKEEPER' | 'TROUBLE_MAKER' | 'STANDARD_ISSUE' | 'GREED' | 'LIBERTY' | 'MONARCH' | 'REGRET' | 'VICEROY' | 'VIOLATED'} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  gearControllerFind(
    id:
      | 'GOLD_BRACELETS'
      | 'RED_SCRAF'
      | 'COWHIDE_VEST'
      | 'FUNERAL_JAR'
      | 'SWORD_SHEATH'
      | 'MAGENETIC_GLOVES'
      | 'CATCHERS_MITT'
      | 'COMPASS'
      | 'GC'
      | 'TSHIRT_AND_JEANS'
      | 'OFFICERS_UNIFORM'
      | 'Category'
      | 'ASMINS_AXE'
      | 'GREAT_WAIL'
      | 'JUSTICE'
      | 'KEYSTONE'
      | 'ASSUALTER'
      | 'STRIKER'
      | 'ENERGY_BREAKER'
      | 'STONE_BREAKER'
      | 'THE_MAN_SLAYER'
      | 'HEROS_BLADE'
      | 'SWORD_OF_LAWZON'
      | 'TINY_TIMBER'
      | 'CADUCEUS'
      | 'ANTEDILUVIAN'
      | 'ETERNAL_FOLD'
      | 'GOLD_RUSH'
      | 'KINGS_BLADE'
      | 'RUSTY_RAPIER'
      | 'MYSTERIOUS_PENDANT'
      | 'PEACEKEEPER'
      | 'TROUBLE_MAKER'
      | 'STANDARD_ISSUE'
      | 'GREED'
      | 'LIBERTY'
      | 'MONARCH'
      | 'REGRET'
      | 'VICEROY'
      | 'VIOLATED',
    options?: any,
  ): AxiosPromise<void>;

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  gearControllerList(options?: any): AxiosPromise<void>;

  /**
   *
   * @param {'BERSERK' | 'TOXIC_THRUST' | 'AERIAL_ASSUALT' | 'ONI' | 'TRUE_ONI' | 'APPRIASE' | 'COMBINE' | 'THROW' | 'PREPARE_FOOD' | 'GRAVITY' | 'SHOCK' | 'QUAKE' | 'LANDSLIDE' | 'BLIZZARD' | 'FIREBALL' | 'INFERNO' | 'TWISTER' | 'GUST' | 'GALE' | 'CYCLONE' | 'TSUNAMI' | 'AQUA' | 'HEAL' | 'REVIVE' | 'CURE' | 'BARRIER' | 'BOOM' | 'REFLECT' | 'FLARE' | 'METEOR' | 'TELEPATHY' | 'LIGHT' | 'DESOLATE' | 'DARKNESS' | 'STOP' | 'SLOW' | 'HASTE' | 'CHILL' | 'CHARM' | 'FROST' | 'ABSORB' | 'LEECH' | 'DRAIN' | 'GRAPPLING_HOOK' | 'PARRY' | 'SLASH' | 'STRIKE' | 'STAB' | 'CHOP' | 'CLEAVE' | 'WALK' | 'RUN' | 'SWIM' | 'BACK_FLIP' | 'DOUBLE_BACK_FLIP' | 'HIGH_JUMP' | 'CLIMB' | 'DUAL_WELD' | 'ESCAPE_ARTIST' | 'INTIMIDATE' | 'CONCENTRATION' | 'BLUFF' | 'SENSE_BLUFF' | 'GREEDY_INTENT' | 'SLOTH_COMPOSURE' | 'BLOOD_LUST' | 'ENVIOUS_OF_COMBAT' | 'GLUTTONOUS_DESIRE' | 'CATCHER' | 'COMMAND' | 'FORMATIONS' | 'ORDER' | 'VACHEL' | 'FELIX' | 'HERALDIC_LION' | 'SUMMON' | 'DISMISS' | 'LYRE' | 'SANDY' | 'OURUBORUS' | 'MISCHIEVOUS' | 'SCRIBBLES' | 'POISON_TRAP' | 'EXPLOSIVE_TRAP' | 'TIME_BOMB_TRAP' | 'CALTROPS_TRAP' | 'DISABLE_TRAP' | 'Focusable' | 'BOAST' | 'DISGUISE' | 'FOCUS' | 'GRAPPLE' | 'HIDE' | 'SCAN' | 'CHEER' | 'SUPPORT' | 'HOPE' | 'INSPIRE' | 'SCOUT' | 'MIMIC' | 'PICKPOCKET' | 'SEAL' | 'LULLABY' | 'WARD' | 'SACRIFICE' | 'PROTECT' | 'MOCK' | 'SEARCH' | 'STEAL' | 'PROTECTION' | 'RAGE'} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  skillControllerFind(
    id:
      | 'BERSERK'
      | 'TOXIC_THRUST'
      | 'AERIAL_ASSUALT'
      | 'ONI'
      | 'TRUE_ONI'
      | 'APPRIASE'
      | 'COMBINE'
      | 'THROW'
      | 'PREPARE_FOOD'
      | 'GRAVITY'
      | 'SHOCK'
      | 'QUAKE'
      | 'LANDSLIDE'
      | 'BLIZZARD'
      | 'FIREBALL'
      | 'INFERNO'
      | 'TWISTER'
      | 'GUST'
      | 'GALE'
      | 'CYCLONE'
      | 'TSUNAMI'
      | 'AQUA'
      | 'HEAL'
      | 'REVIVE'
      | 'CURE'
      | 'BARRIER'
      | 'BOOM'
      | 'REFLECT'
      | 'FLARE'
      | 'METEOR'
      | 'TELEPATHY'
      | 'LIGHT'
      | 'DESOLATE'
      | 'DARKNESS'
      | 'STOP'
      | 'SLOW'
      | 'HASTE'
      | 'CHILL'
      | 'CHARM'
      | 'FROST'
      | 'ABSORB'
      | 'LEECH'
      | 'DRAIN'
      | 'GRAPPLING_HOOK'
      | 'PARRY'
      | 'SLASH'
      | 'STRIKE'
      | 'STAB'
      | 'CHOP'
      | 'CLEAVE'
      | 'WALK'
      | 'RUN'
      | 'SWIM'
      | 'BACK_FLIP'
      | 'DOUBLE_BACK_FLIP'
      | 'HIGH_JUMP'
      | 'CLIMB'
      | 'DUAL_WELD'
      | 'ESCAPE_ARTIST'
      | 'INTIMIDATE'
      | 'CONCENTRATION'
      | 'BLUFF'
      | 'SENSE_BLUFF'
      | 'GREEDY_INTENT'
      | 'SLOTH_COMPOSURE'
      | 'BLOOD_LUST'
      | 'ENVIOUS_OF_COMBAT'
      | 'GLUTTONOUS_DESIRE'
      | 'CATCHER'
      | 'COMMAND'
      | 'FORMATIONS'
      | 'ORDER'
      | 'VACHEL'
      | 'FELIX'
      | 'HERALDIC_LION'
      | 'SUMMON'
      | 'DISMISS'
      | 'LYRE'
      | 'SANDY'
      | 'OURUBORUS'
      | 'MISCHIEVOUS'
      | 'SCRIBBLES'
      | 'POISON_TRAP'
      | 'EXPLOSIVE_TRAP'
      | 'TIME_BOMB_TRAP'
      | 'CALTROPS_TRAP'
      | 'DISABLE_TRAP'
      | 'Focusable'
      | 'BOAST'
      | 'DISGUISE'
      | 'FOCUS'
      | 'GRAPPLE'
      | 'HIDE'
      | 'SCAN'
      | 'CHEER'
      | 'SUPPORT'
      | 'HOPE'
      | 'INSPIRE'
      | 'SCOUT'
      | 'MIMIC'
      | 'PICKPOCKET'
      | 'SEAL'
      | 'LULLABY'
      | 'WARD'
      | 'SACRIFICE'
      | 'PROTECT'
      | 'MOCK'
      | 'SEARCH'
      | 'STEAL'
      | 'PROTECTION'
      | 'RAGE',
    options?: any,
  ): AxiosPromise<void>;

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  skillControllerList(options?: any): AxiosPromise<void>;
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
  /**
   *
   * @param {'MOTHER' | 'MISCHIEVOUS_PIEBALD' | 'JANUS_PERSIAN' | 'LOOMEE_ANGORA' | 'OUERN_ONI' | 'VALLON_ONI' | 'MEEKU_ONI' | 'ARINOTH_DIYATH' | 'FAYE_IMAGO' | 'GAALI_RUNEWIN' | 'GUNTER_STONEWELL' | 'MALACE_TSIA' | 'PENNY_KIBBUTZ' | 'TRAEZ_UTHSHA' | 'VOID' | 'GENKI' | 'LAWZON_GREY' | 'MADHI_TSIA' | 'SUYRI' | 'WISP' | 'ASMIN' | 'DIAG' | 'MONARCH' | 'VICEROY' | 'SPIDER' | 'WARLING' | 'SEA_HORSE' | 'SENSITIVE_PLANT' | 'DEEP_THINKER'} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public archetypeControllerFind(
    id:
      | 'MOTHER'
      | 'MISCHIEVOUS_PIEBALD'
      | 'JANUS_PERSIAN'
      | 'LOOMEE_ANGORA'
      | 'OUERN_ONI'
      | 'VALLON_ONI'
      | 'MEEKU_ONI'
      | 'ARINOTH_DIYATH'
      | 'FAYE_IMAGO'
      | 'GAALI_RUNEWIN'
      | 'GUNTER_STONEWELL'
      | 'MALACE_TSIA'
      | 'PENNY_KIBBUTZ'
      | 'TRAEZ_UTHSHA'
      | 'VOID'
      | 'GENKI'
      | 'LAWZON_GREY'
      | 'MADHI_TSIA'
      | 'SUYRI'
      | 'WISP'
      | 'ASMIN'
      | 'DIAG'
      | 'MONARCH'
      | 'VICEROY'
      | 'SPIDER'
      | 'WARLING'
      | 'SEA_HORSE'
      | 'SENSITIVE_PLANT'
      | 'DEEP_THINKER',
    options?: any,
  ) {
    return DefaultApiFp(this.configuration)
      .archetypeControllerFind(id, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public archetypeControllerList(options?: any) {
    return DefaultApiFp(this.configuration)
      .archetypeControllerList(options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {CreateCharacterSheetDto} createCharacterSheetDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public characterSheetControllerCreate(
    createCharacterSheetDto: CreateCharacterSheetDto,
    options?: any,
  ) {
    return DefaultApiFp(this.configuration)
      .characterSheetControllerCreate(createCharacterSheetDto, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public characterSheetControllerDelete(id: string, options?: any) {
    return DefaultApiFp(this.configuration)
      .characterSheetControllerDelete(id, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public characterSheetControllerFindAll(options?: any) {
    return DefaultApiFp(this.configuration)
      .characterSheetControllerFindAll(options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public characterSheetControllerFindOne(id: string, options?: any) {
    return DefaultApiFp(this.configuration)
      .characterSheetControllerFindOne(id, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {'GOLD_BRACELETS' | 'RED_SCRAF' | 'COWHIDE_VEST' | 'FUNERAL_JAR' | 'SWORD_SHEATH' | 'MAGENETIC_GLOVES' | 'CATCHERS_MITT' | 'COMPASS' | 'GC' | 'TSHIRT_AND_JEANS' | 'OFFICERS_UNIFORM' | 'Category' | 'ASMINS_AXE' | 'GREAT_WAIL' | 'JUSTICE' | 'KEYSTONE' | 'ASSUALTER' | 'STRIKER' | 'ENERGY_BREAKER' | 'STONE_BREAKER' | 'THE_MAN_SLAYER' | 'HEROS_BLADE' | 'SWORD_OF_LAWZON' | 'TINY_TIMBER' | 'CADUCEUS' | 'ANTEDILUVIAN' | 'ETERNAL_FOLD' | 'GOLD_RUSH' | 'KINGS_BLADE' | 'RUSTY_RAPIER' | 'MYSTERIOUS_PENDANT' | 'PEACEKEEPER' | 'TROUBLE_MAKER' | 'STANDARD_ISSUE' | 'GREED' | 'LIBERTY' | 'MONARCH' | 'REGRET' | 'VICEROY' | 'VIOLATED'} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public gearControllerFind(
    id:
      | 'GOLD_BRACELETS'
      | 'RED_SCRAF'
      | 'COWHIDE_VEST'
      | 'FUNERAL_JAR'
      | 'SWORD_SHEATH'
      | 'MAGENETIC_GLOVES'
      | 'CATCHERS_MITT'
      | 'COMPASS'
      | 'GC'
      | 'TSHIRT_AND_JEANS'
      | 'OFFICERS_UNIFORM'
      | 'Category'
      | 'ASMINS_AXE'
      | 'GREAT_WAIL'
      | 'JUSTICE'
      | 'KEYSTONE'
      | 'ASSUALTER'
      | 'STRIKER'
      | 'ENERGY_BREAKER'
      | 'STONE_BREAKER'
      | 'THE_MAN_SLAYER'
      | 'HEROS_BLADE'
      | 'SWORD_OF_LAWZON'
      | 'TINY_TIMBER'
      | 'CADUCEUS'
      | 'ANTEDILUVIAN'
      | 'ETERNAL_FOLD'
      | 'GOLD_RUSH'
      | 'KINGS_BLADE'
      | 'RUSTY_RAPIER'
      | 'MYSTERIOUS_PENDANT'
      | 'PEACEKEEPER'
      | 'TROUBLE_MAKER'
      | 'STANDARD_ISSUE'
      | 'GREED'
      | 'LIBERTY'
      | 'MONARCH'
      | 'REGRET'
      | 'VICEROY'
      | 'VIOLATED',
    options?: any,
  ) {
    return DefaultApiFp(this.configuration)
      .gearControllerFind(id, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public gearControllerList(options?: any) {
    return DefaultApiFp(this.configuration)
      .gearControllerList(options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {'BERSERK' | 'TOXIC_THRUST' | 'AERIAL_ASSUALT' | 'ONI' | 'TRUE_ONI' | 'APPRIASE' | 'COMBINE' | 'THROW' | 'PREPARE_FOOD' | 'GRAVITY' | 'SHOCK' | 'QUAKE' | 'LANDSLIDE' | 'BLIZZARD' | 'FIREBALL' | 'INFERNO' | 'TWISTER' | 'GUST' | 'GALE' | 'CYCLONE' | 'TSUNAMI' | 'AQUA' | 'HEAL' | 'REVIVE' | 'CURE' | 'BARRIER' | 'BOOM' | 'REFLECT' | 'FLARE' | 'METEOR' | 'TELEPATHY' | 'LIGHT' | 'DESOLATE' | 'DARKNESS' | 'STOP' | 'SLOW' | 'HASTE' | 'CHILL' | 'CHARM' | 'FROST' | 'ABSORB' | 'LEECH' | 'DRAIN' | 'GRAPPLING_HOOK' | 'PARRY' | 'SLASH' | 'STRIKE' | 'STAB' | 'CHOP' | 'CLEAVE' | 'WALK' | 'RUN' | 'SWIM' | 'BACK_FLIP' | 'DOUBLE_BACK_FLIP' | 'HIGH_JUMP' | 'CLIMB' | 'DUAL_WELD' | 'ESCAPE_ARTIST' | 'INTIMIDATE' | 'CONCENTRATION' | 'BLUFF' | 'SENSE_BLUFF' | 'GREEDY_INTENT' | 'SLOTH_COMPOSURE' | 'BLOOD_LUST' | 'ENVIOUS_OF_COMBAT' | 'GLUTTONOUS_DESIRE' | 'CATCHER' | 'COMMAND' | 'FORMATIONS' | 'ORDER' | 'VACHEL' | 'FELIX' | 'HERALDIC_LION' | 'SUMMON' | 'DISMISS' | 'LYRE' | 'SANDY' | 'OURUBORUS' | 'MISCHIEVOUS' | 'SCRIBBLES' | 'POISON_TRAP' | 'EXPLOSIVE_TRAP' | 'TIME_BOMB_TRAP' | 'CALTROPS_TRAP' | 'DISABLE_TRAP' | 'Focusable' | 'BOAST' | 'DISGUISE' | 'FOCUS' | 'GRAPPLE' | 'HIDE' | 'SCAN' | 'CHEER' | 'SUPPORT' | 'HOPE' | 'INSPIRE' | 'SCOUT' | 'MIMIC' | 'PICKPOCKET' | 'SEAL' | 'LULLABY' | 'WARD' | 'SACRIFICE' | 'PROTECT' | 'MOCK' | 'SEARCH' | 'STEAL' | 'PROTECTION' | 'RAGE'} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public skillControllerFind(
    id:
      | 'BERSERK'
      | 'TOXIC_THRUST'
      | 'AERIAL_ASSUALT'
      | 'ONI'
      | 'TRUE_ONI'
      | 'APPRIASE'
      | 'COMBINE'
      | 'THROW'
      | 'PREPARE_FOOD'
      | 'GRAVITY'
      | 'SHOCK'
      | 'QUAKE'
      | 'LANDSLIDE'
      | 'BLIZZARD'
      | 'FIREBALL'
      | 'INFERNO'
      | 'TWISTER'
      | 'GUST'
      | 'GALE'
      | 'CYCLONE'
      | 'TSUNAMI'
      | 'AQUA'
      | 'HEAL'
      | 'REVIVE'
      | 'CURE'
      | 'BARRIER'
      | 'BOOM'
      | 'REFLECT'
      | 'FLARE'
      | 'METEOR'
      | 'TELEPATHY'
      | 'LIGHT'
      | 'DESOLATE'
      | 'DARKNESS'
      | 'STOP'
      | 'SLOW'
      | 'HASTE'
      | 'CHILL'
      | 'CHARM'
      | 'FROST'
      | 'ABSORB'
      | 'LEECH'
      | 'DRAIN'
      | 'GRAPPLING_HOOK'
      | 'PARRY'
      | 'SLASH'
      | 'STRIKE'
      | 'STAB'
      | 'CHOP'
      | 'CLEAVE'
      | 'WALK'
      | 'RUN'
      | 'SWIM'
      | 'BACK_FLIP'
      | 'DOUBLE_BACK_FLIP'
      | 'HIGH_JUMP'
      | 'CLIMB'
      | 'DUAL_WELD'
      | 'ESCAPE_ARTIST'
      | 'INTIMIDATE'
      | 'CONCENTRATION'
      | 'BLUFF'
      | 'SENSE_BLUFF'
      | 'GREEDY_INTENT'
      | 'SLOTH_COMPOSURE'
      | 'BLOOD_LUST'
      | 'ENVIOUS_OF_COMBAT'
      | 'GLUTTONOUS_DESIRE'
      | 'CATCHER'
      | 'COMMAND'
      | 'FORMATIONS'
      | 'ORDER'
      | 'VACHEL'
      | 'FELIX'
      | 'HERALDIC_LION'
      | 'SUMMON'
      | 'DISMISS'
      | 'LYRE'
      | 'SANDY'
      | 'OURUBORUS'
      | 'MISCHIEVOUS'
      | 'SCRIBBLES'
      | 'POISON_TRAP'
      | 'EXPLOSIVE_TRAP'
      | 'TIME_BOMB_TRAP'
      | 'CALTROPS_TRAP'
      | 'DISABLE_TRAP'
      | 'Focusable'
      | 'BOAST'
      | 'DISGUISE'
      | 'FOCUS'
      | 'GRAPPLE'
      | 'HIDE'
      | 'SCAN'
      | 'CHEER'
      | 'SUPPORT'
      | 'HOPE'
      | 'INSPIRE'
      | 'SCOUT'
      | 'MIMIC'
      | 'PICKPOCKET'
      | 'SEAL'
      | 'LULLABY'
      | 'WARD'
      | 'SACRIFICE'
      | 'PROTECT'
      | 'MOCK'
      | 'SEARCH'
      | 'STEAL'
      | 'PROTECTION'
      | 'RAGE',
    options?: any,
  ) {
    return DefaultApiFp(this.configuration)
      .skillControllerFind(id, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public skillControllerList(options?: any) {
    return DefaultApiFp(this.configuration)
      .skillControllerList(options)
      .then(request => request(this.axios, this.basePath));
  }
}
