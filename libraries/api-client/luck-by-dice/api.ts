/* tslint:disable */
/* eslint-disable */
/**
 * @org-packages/luck-by-dice
 * An API for simulating dice rolls and luck from dice notation
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {Configuration} from './configuration';
import globalAxios, {AxiosPromise, AxiosInstance} from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from './base';

export const rollControllerTurnKey = (
  notation: string,
  luck: number,
  options: any = {},
) => {
  const localVarPath = `/roll/notation/{notation}/luck/{luck}`
    .replace(`{${'notation'}}`, encodeURIComponent(String(notation)))
    .replace(`{${'luck'}}`, encodeURIComponent(String(luck)));
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
  const canSearch =
    true &&
    notation !== undefined &&
    notation !== null &&
    luck !== undefined &&
    luck !== null;
  return canSearch ? localVarUrlObj.toString() : null;
};

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {string} notation
     * @param {number} luck
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rollControllerTurn: async (
      notation: string,
      luck: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'notation' is not null or undefined
      assertParamExists('rollControllerTurn', 'notation', notation);
      // verify required parameter 'luck' is not null or undefined
      assertParamExists('rollControllerTurn', 'luck', luck);
      const localVarPath = `/roll/notation/{notation}/luck/{luck}`
        .replace(`{${'notation'}}`, encodeURIComponent(String(notation)))
        .replace(`{${'luck'}}`, encodeURIComponent(String(luck)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} notation
     * @param {number} luck
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async rollControllerTurn(
      notation: string,
      luck: number,
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.rollControllerTurn(
          notation,
          luck,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     *
     * @param {string} notation
     * @param {number} luck
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rollControllerTurn(
      notation: string,
      luck: number,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .rollControllerTurn(notation, luck, options)
        .then(request => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
  /**
   *
   * @param {string} notation
   * @param {number} luck
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  rollControllerTurn(
    notation: string,
    luck: number,
    options?: any,
  ): AxiosPromise<void>;
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
  /**
   *
   * @param {string} notation
   * @param {number} luck
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public rollControllerTurn(notation: string, luck: number, options?: any) {
    return DefaultApiFp(this.configuration)
      .rollControllerTurn(notation, luck, options)
      .then(request => request(this.axios, this.basePath));
  }
}
