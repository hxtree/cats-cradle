/* tslint:disable */
/* eslint-disable */
/**
 * @org-packages/character-sheet
 * An API for the character sheet service
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';



export const archetypeControllerFindKey = (id: 'MISCHIEVOUS_PIEBALD' | 'JANUS_PERSIAN' | 'LOOMEE_ANGORA' | 'VALLON_ONI' | 'OUERN_ONI' | 'MEEKU_ONI' | 'ARINOTH_DIYATH' | 'FAYE_IMAGO' | 'GAALI_RUNEWIN' | 'GUNTER_STONEWELL' | 'MALACE_TSIA' | 'PENNY_KIBBUTZ' | 'TRAEZ_UTHSHA' | 'VOID' | 'GENKI' | 'LAWZON_GREY' | 'MADHI_TSIA' | 'SUYRI' | 'WISP' | 'ASMIN' | 'DIAG' | 'MONARCH' | 'VICEROY' | 'SPIDER' | 'WARLING' | 'SEA_HORSE' | 'SENSITIVE_PLANT' | 'DEEP_THINKER', options: any = {}) => {
    const localVarPath = `/archetype/id/{id}`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)));
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    const canSearch = true && id !== undefined && id !== null;
    return canSearch ? localVarUrlObj.toString() : null;
}        
export const archetypeControllerListKey = (options: any = {}) => {
    const localVarPath = `/archetype/list`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    const canSearch = true;
    return canSearch ? localVarUrlObj.toString() : null;
}        
export const gearControllerFindKey = (id: 'GOLD_BRACELETS' | 'RED_SCRAF' | 'COWHIDE_VEST' | 'FUNERAL_JAR' | 'SWORD_SHEATH' | 'MAGENETIC_GLOVES' | 'CATCHERS_MITT' | 'COMPASS' | 'GC' | 'TSHIRT_AND_JEANS' | 'OFFICERS_UNIFORM' | 'Category' | 'ASMINS_AXE' | 'GREAT_WAIL' | 'JUSTICE' | 'KEYSTONE' | 'ASSUALTER' | 'STRIKER' | 'ENERGY_BREAKER' | 'STONE_BREAKER' | 'THE_MAN_SLAYER' | 'HEROS_BLADE' | 'SWORD_OF_LAWZON' | 'TINY_TIMBER' | 'CADUCEUS' | 'ANTEDILUVIAN' | 'ETERNAL_FOLD' | 'GOLD_RUSH' | 'KINGS_BLADE' | 'RUSTY_RAPIER' | 'MYSTERIOUS_PENDANT' | 'PEACEKEEPER' | 'TROUBLE_MAKER' | 'STANDARD_ISSUE' | 'GREED' | 'LIBERTY' | 'MONARCH' | 'REGRET' | 'VICEROY' | 'VIOLATED', options: any = {}) => {
    const localVarPath = `/gear/id/{id}`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)));
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    const canSearch = true && id !== undefined && id !== null;
    return canSearch ? localVarUrlObj.toString() : null;
}        
export const gearControllerListKey = (options: any = {}) => {
    const localVarPath = `/gear/list`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    const canSearch = true;
    return canSearch ? localVarUrlObj.toString() : null;
}        
export const skillControllerFindKey = (id: 'BERSERK' | 'TOXIC_THRUST' | 'AERIAL_ASSUALT' | 'ONI' | 'TRUE_ONI' | 'APPRIASE' | 'COMBINE' | 'THROW' | 'PREPARE_FOOD' | 'GRAVITY' | 'SHOCK' | 'QUAKE' | 'LANDSLIDE' | 'BLIZZARD' | 'FIREBALL' | 'INFERNO' | 'TWISTER' | 'GUST' | 'GALE' | 'CYCLONE' | 'TSUNAMI' | 'AQUA' | 'HEAL' | 'REVIVE' | 'CURE' | 'BARRIER' | 'BOOM' | 'REFLECT' | 'FLARE' | 'METEOR' | 'TELEPATHY' | 'LIGHT' | 'DESOLATE' | 'DARKNESS' | 'STOP' | 'SLOW' | 'HASTE' | 'CHILL' | 'CHARM' | 'FROST' | 'ABSORB' | 'LEECH' | 'DRAIN' | 'GRAPPLING_HOOK' | 'PARRY' | 'SLASH' | 'STRIKE' | 'STAB' | 'CHOP' | 'CLEAVE' | 'WALK' | 'RUN' | 'SWIM' | 'BACK_FLIP' | 'DOUBLE_BACK_FLIP' | 'HIGH_JUMP' | 'CLIMB' | 'DUAL_WELD' | 'ESCAPE_ARTIST' | 'INTIMIDATE' | 'CONCENTRATION' | 'BLUFF' | 'SENSE_BLUFF' | 'GREEDY_INTENT' | 'SLOTH_COMPOSURE' | 'BLOOD_LUST' | 'ENVIOUS_OF_COMBAT' | 'GLUTTONOUS_DESIRE' | 'CATCHER' | 'COMMAND' | 'FORMATIONS' | 'ORDER' | 'VACHEL' | 'FELIX' | 'HERALDIC_LION' | 'SUMMON' | 'DISMISS' | 'LYRE' | 'SANDY' | 'OURUBORUS' | 'MISCHIEVOUS' | 'SCRIBBLES' | 'POISON_TRAP' | 'EXPLOSIVE_TRAP' | 'TIME_BOMB_TRAP' | 'CALTROPS_TRAP' | 'DISABLE_TRAP' | 'Focusable' | 'BOAST' | 'DISGUISE' | 'FOCUS' | 'GRAPPLE' | 'HIDE' | 'SCAN' | 'CHEER' | 'SUPPORT' | 'HOPE' | 'INSPIRE' | 'SCOUT' | 'MIMIC' | 'PICKPOCKET' | 'SEAL' | 'LULLABY' | 'WARD' | 'SACRIFICE' | 'PROTECT' | 'MOCK' | 'SEARCH' | 'STEAL' | 'PROTECTION' | 'RAGE', options: any = {}) => {
    const localVarPath = `/skill/id/{id}`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)));
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    const canSearch = true && id !== undefined && id !== null;
    return canSearch ? localVarUrlObj.toString() : null;
}        
export const skillControllerListKey = (options: any = {}) => {
    const localVarPath = `/skill/list`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    const canSearch = true;
    return canSearch ? localVarUrlObj.toString() : null;
}        

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {'MISCHIEVOUS_PIEBALD' | 'JANUS_PERSIAN' | 'LOOMEE_ANGORA' | 'VALLON_ONI' | 'OUERN_ONI' | 'MEEKU_ONI' | 'ARINOTH_DIYATH' | 'FAYE_IMAGO' | 'GAALI_RUNEWIN' | 'GUNTER_STONEWELL' | 'MALACE_TSIA' | 'PENNY_KIBBUTZ' | 'TRAEZ_UTHSHA' | 'VOID' | 'GENKI' | 'LAWZON_GREY' | 'MADHI_TSIA' | 'SUYRI' | 'WISP' | 'ASMIN' | 'DIAG' | 'MONARCH' | 'VICEROY' | 'SPIDER' | 'WARLING' | 'SEA_HORSE' | 'SENSITIVE_PLANT' | 'DEEP_THINKER'} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archetypeControllerFind: async (id: 'MISCHIEVOUS_PIEBALD' | 'JANUS_PERSIAN' | 'LOOMEE_ANGORA' | 'VALLON_ONI' | 'OUERN_ONI' | 'MEEKU_ONI' | 'ARINOTH_DIYATH' | 'FAYE_IMAGO' | 'GAALI_RUNEWIN' | 'GUNTER_STONEWELL' | 'MALACE_TSIA' | 'PENNY_KIBBUTZ' | 'TRAEZ_UTHSHA' | 'VOID' | 'GENKI' | 'LAWZON_GREY' | 'MADHI_TSIA' | 'SUYRI' | 'WISP' | 'ASMIN' | 'DIAG' | 'MONARCH' | 'VICEROY' | 'SPIDER' | 'WARLING' | 'SEA_HORSE' | 'SENSITIVE_PLANT' | 'DEEP_THINKER', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('archetypeControllerFind', 'id', id)
            const localVarPath = `/archetype/id/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archetypeControllerList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/archetype/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {'GOLD_BRACELETS' | 'RED_SCRAF' | 'COWHIDE_VEST' | 'FUNERAL_JAR' | 'SWORD_SHEATH' | 'MAGENETIC_GLOVES' | 'CATCHERS_MITT' | 'COMPASS' | 'GC' | 'TSHIRT_AND_JEANS' | 'OFFICERS_UNIFORM' | 'Category' | 'ASMINS_AXE' | 'GREAT_WAIL' | 'JUSTICE' | 'KEYSTONE' | 'ASSUALTER' | 'STRIKER' | 'ENERGY_BREAKER' | 'STONE_BREAKER' | 'THE_MAN_SLAYER' | 'HEROS_BLADE' | 'SWORD_OF_LAWZON' | 'TINY_TIMBER' | 'CADUCEUS' | 'ANTEDILUVIAN' | 'ETERNAL_FOLD' | 'GOLD_RUSH' | 'KINGS_BLADE' | 'RUSTY_RAPIER' | 'MYSTERIOUS_PENDANT' | 'PEACEKEEPER' | 'TROUBLE_MAKER' | 'STANDARD_ISSUE' | 'GREED' | 'LIBERTY' | 'MONARCH' | 'REGRET' | 'VICEROY' | 'VIOLATED'} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gearControllerFind: async (id: 'GOLD_BRACELETS' | 'RED_SCRAF' | 'COWHIDE_VEST' | 'FUNERAL_JAR' | 'SWORD_SHEATH' | 'MAGENETIC_GLOVES' | 'CATCHERS_MITT' | 'COMPASS' | 'GC' | 'TSHIRT_AND_JEANS' | 'OFFICERS_UNIFORM' | 'Category' | 'ASMINS_AXE' | 'GREAT_WAIL' | 'JUSTICE' | 'KEYSTONE' | 'ASSUALTER' | 'STRIKER' | 'ENERGY_BREAKER' | 'STONE_BREAKER' | 'THE_MAN_SLAYER' | 'HEROS_BLADE' | 'SWORD_OF_LAWZON' | 'TINY_TIMBER' | 'CADUCEUS' | 'ANTEDILUVIAN' | 'ETERNAL_FOLD' | 'GOLD_RUSH' | 'KINGS_BLADE' | 'RUSTY_RAPIER' | 'MYSTERIOUS_PENDANT' | 'PEACEKEEPER' | 'TROUBLE_MAKER' | 'STANDARD_ISSUE' | 'GREED' | 'LIBERTY' | 'MONARCH' | 'REGRET' | 'VICEROY' | 'VIOLATED', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('gearControllerFind', 'id', id)
            const localVarPath = `/gear/id/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gearControllerList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/gear/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {'BERSERK' | 'TOXIC_THRUST' | 'AERIAL_ASSUALT' | 'ONI' | 'TRUE_ONI' | 'APPRIASE' | 'COMBINE' | 'THROW' | 'PREPARE_FOOD' | 'GRAVITY' | 'SHOCK' | 'QUAKE' | 'LANDSLIDE' | 'BLIZZARD' | 'FIREBALL' | 'INFERNO' | 'TWISTER' | 'GUST' | 'GALE' | 'CYCLONE' | 'TSUNAMI' | 'AQUA' | 'HEAL' | 'REVIVE' | 'CURE' | 'BARRIER' | 'BOOM' | 'REFLECT' | 'FLARE' | 'METEOR' | 'TELEPATHY' | 'LIGHT' | 'DESOLATE' | 'DARKNESS' | 'STOP' | 'SLOW' | 'HASTE' | 'CHILL' | 'CHARM' | 'FROST' | 'ABSORB' | 'LEECH' | 'DRAIN' | 'GRAPPLING_HOOK' | 'PARRY' | 'SLASH' | 'STRIKE' | 'STAB' | 'CHOP' | 'CLEAVE' | 'WALK' | 'RUN' | 'SWIM' | 'BACK_FLIP' | 'DOUBLE_BACK_FLIP' | 'HIGH_JUMP' | 'CLIMB' | 'DUAL_WELD' | 'ESCAPE_ARTIST' | 'INTIMIDATE' | 'CONCENTRATION' | 'BLUFF' | 'SENSE_BLUFF' | 'GREEDY_INTENT' | 'SLOTH_COMPOSURE' | 'BLOOD_LUST' | 'ENVIOUS_OF_COMBAT' | 'GLUTTONOUS_DESIRE' | 'CATCHER' | 'COMMAND' | 'FORMATIONS' | 'ORDER' | 'VACHEL' | 'FELIX' | 'HERALDIC_LION' | 'SUMMON' | 'DISMISS' | 'LYRE' | 'SANDY' | 'OURUBORUS' | 'MISCHIEVOUS' | 'SCRIBBLES' | 'POISON_TRAP' | 'EXPLOSIVE_TRAP' | 'TIME_BOMB_TRAP' | 'CALTROPS_TRAP' | 'DISABLE_TRAP' | 'Focusable' | 'BOAST' | 'DISGUISE' | 'FOCUS' | 'GRAPPLE' | 'HIDE' | 'SCAN' | 'CHEER' | 'SUPPORT' | 'HOPE' | 'INSPIRE' | 'SCOUT' | 'MIMIC' | 'PICKPOCKET' | 'SEAL' | 'LULLABY' | 'WARD' | 'SACRIFICE' | 'PROTECT' | 'MOCK' | 'SEARCH' | 'STEAL' | 'PROTECTION' | 'RAGE'} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skillControllerFind: async (id: 'BERSERK' | 'TOXIC_THRUST' | 'AERIAL_ASSUALT' | 'ONI' | 'TRUE_ONI' | 'APPRIASE' | 'COMBINE' | 'THROW' | 'PREPARE_FOOD' | 'GRAVITY' | 'SHOCK' | 'QUAKE' | 'LANDSLIDE' | 'BLIZZARD' | 'FIREBALL' | 'INFERNO' | 'TWISTER' | 'GUST' | 'GALE' | 'CYCLONE' | 'TSUNAMI' | 'AQUA' | 'HEAL' | 'REVIVE' | 'CURE' | 'BARRIER' | 'BOOM' | 'REFLECT' | 'FLARE' | 'METEOR' | 'TELEPATHY' | 'LIGHT' | 'DESOLATE' | 'DARKNESS' | 'STOP' | 'SLOW' | 'HASTE' | 'CHILL' | 'CHARM' | 'FROST' | 'ABSORB' | 'LEECH' | 'DRAIN' | 'GRAPPLING_HOOK' | 'PARRY' | 'SLASH' | 'STRIKE' | 'STAB' | 'CHOP' | 'CLEAVE' | 'WALK' | 'RUN' | 'SWIM' | 'BACK_FLIP' | 'DOUBLE_BACK_FLIP' | 'HIGH_JUMP' | 'CLIMB' | 'DUAL_WELD' | 'ESCAPE_ARTIST' | 'INTIMIDATE' | 'CONCENTRATION' | 'BLUFF' | 'SENSE_BLUFF' | 'GREEDY_INTENT' | 'SLOTH_COMPOSURE' | 'BLOOD_LUST' | 'ENVIOUS_OF_COMBAT' | 'GLUTTONOUS_DESIRE' | 'CATCHER' | 'COMMAND' | 'FORMATIONS' | 'ORDER' | 'VACHEL' | 'FELIX' | 'HERALDIC_LION' | 'SUMMON' | 'DISMISS' | 'LYRE' | 'SANDY' | 'OURUBORUS' | 'MISCHIEVOUS' | 'SCRIBBLES' | 'POISON_TRAP' | 'EXPLOSIVE_TRAP' | 'TIME_BOMB_TRAP' | 'CALTROPS_TRAP' | 'DISABLE_TRAP' | 'Focusable' | 'BOAST' | 'DISGUISE' | 'FOCUS' | 'GRAPPLE' | 'HIDE' | 'SCAN' | 'CHEER' | 'SUPPORT' | 'HOPE' | 'INSPIRE' | 'SCOUT' | 'MIMIC' | 'PICKPOCKET' | 'SEAL' | 'LULLABY' | 'WARD' | 'SACRIFICE' | 'PROTECT' | 'MOCK' | 'SEARCH' | 'STEAL' | 'PROTECTION' | 'RAGE', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('skillControllerFind', 'id', id)
            const localVarPath = `/skill/id/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skillControllerList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/skill/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {'MISCHIEVOUS_PIEBALD' | 'JANUS_PERSIAN' | 'LOOMEE_ANGORA' | 'VALLON_ONI' | 'OUERN_ONI' | 'MEEKU_ONI' | 'ARINOTH_DIYATH' | 'FAYE_IMAGO' | 'GAALI_RUNEWIN' | 'GUNTER_STONEWELL' | 'MALACE_TSIA' | 'PENNY_KIBBUTZ' | 'TRAEZ_UTHSHA' | 'VOID' | 'GENKI' | 'LAWZON_GREY' | 'MADHI_TSIA' | 'SUYRI' | 'WISP' | 'ASMIN' | 'DIAG' | 'MONARCH' | 'VICEROY' | 'SPIDER' | 'WARLING' | 'SEA_HORSE' | 'SENSITIVE_PLANT' | 'DEEP_THINKER'} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archetypeControllerFind(id: 'MISCHIEVOUS_PIEBALD' | 'JANUS_PERSIAN' | 'LOOMEE_ANGORA' | 'VALLON_ONI' | 'OUERN_ONI' | 'MEEKU_ONI' | 'ARINOTH_DIYATH' | 'FAYE_IMAGO' | 'GAALI_RUNEWIN' | 'GUNTER_STONEWELL' | 'MALACE_TSIA' | 'PENNY_KIBBUTZ' | 'TRAEZ_UTHSHA' | 'VOID' | 'GENKI' | 'LAWZON_GREY' | 'MADHI_TSIA' | 'SUYRI' | 'WISP' | 'ASMIN' | 'DIAG' | 'MONARCH' | 'VICEROY' | 'SPIDER' | 'WARLING' | 'SEA_HORSE' | 'SENSITIVE_PLANT' | 'DEEP_THINKER', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archetypeControllerFind(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archetypeControllerList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archetypeControllerList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {'GOLD_BRACELETS' | 'RED_SCRAF' | 'COWHIDE_VEST' | 'FUNERAL_JAR' | 'SWORD_SHEATH' | 'MAGENETIC_GLOVES' | 'CATCHERS_MITT' | 'COMPASS' | 'GC' | 'TSHIRT_AND_JEANS' | 'OFFICERS_UNIFORM' | 'Category' | 'ASMINS_AXE' | 'GREAT_WAIL' | 'JUSTICE' | 'KEYSTONE' | 'ASSUALTER' | 'STRIKER' | 'ENERGY_BREAKER' | 'STONE_BREAKER' | 'THE_MAN_SLAYER' | 'HEROS_BLADE' | 'SWORD_OF_LAWZON' | 'TINY_TIMBER' | 'CADUCEUS' | 'ANTEDILUVIAN' | 'ETERNAL_FOLD' | 'GOLD_RUSH' | 'KINGS_BLADE' | 'RUSTY_RAPIER' | 'MYSTERIOUS_PENDANT' | 'PEACEKEEPER' | 'TROUBLE_MAKER' | 'STANDARD_ISSUE' | 'GREED' | 'LIBERTY' | 'MONARCH' | 'REGRET' | 'VICEROY' | 'VIOLATED'} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gearControllerFind(id: 'GOLD_BRACELETS' | 'RED_SCRAF' | 'COWHIDE_VEST' | 'FUNERAL_JAR' | 'SWORD_SHEATH' | 'MAGENETIC_GLOVES' | 'CATCHERS_MITT' | 'COMPASS' | 'GC' | 'TSHIRT_AND_JEANS' | 'OFFICERS_UNIFORM' | 'Category' | 'ASMINS_AXE' | 'GREAT_WAIL' | 'JUSTICE' | 'KEYSTONE' | 'ASSUALTER' | 'STRIKER' | 'ENERGY_BREAKER' | 'STONE_BREAKER' | 'THE_MAN_SLAYER' | 'HEROS_BLADE' | 'SWORD_OF_LAWZON' | 'TINY_TIMBER' | 'CADUCEUS' | 'ANTEDILUVIAN' | 'ETERNAL_FOLD' | 'GOLD_RUSH' | 'KINGS_BLADE' | 'RUSTY_RAPIER' | 'MYSTERIOUS_PENDANT' | 'PEACEKEEPER' | 'TROUBLE_MAKER' | 'STANDARD_ISSUE' | 'GREED' | 'LIBERTY' | 'MONARCH' | 'REGRET' | 'VICEROY' | 'VIOLATED', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gearControllerFind(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gearControllerList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gearControllerList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {'BERSERK' | 'TOXIC_THRUST' | 'AERIAL_ASSUALT' | 'ONI' | 'TRUE_ONI' | 'APPRIASE' | 'COMBINE' | 'THROW' | 'PREPARE_FOOD' | 'GRAVITY' | 'SHOCK' | 'QUAKE' | 'LANDSLIDE' | 'BLIZZARD' | 'FIREBALL' | 'INFERNO' | 'TWISTER' | 'GUST' | 'GALE' | 'CYCLONE' | 'TSUNAMI' | 'AQUA' | 'HEAL' | 'REVIVE' | 'CURE' | 'BARRIER' | 'BOOM' | 'REFLECT' | 'FLARE' | 'METEOR' | 'TELEPATHY' | 'LIGHT' | 'DESOLATE' | 'DARKNESS' | 'STOP' | 'SLOW' | 'HASTE' | 'CHILL' | 'CHARM' | 'FROST' | 'ABSORB' | 'LEECH' | 'DRAIN' | 'GRAPPLING_HOOK' | 'PARRY' | 'SLASH' | 'STRIKE' | 'STAB' | 'CHOP' | 'CLEAVE' | 'WALK' | 'RUN' | 'SWIM' | 'BACK_FLIP' | 'DOUBLE_BACK_FLIP' | 'HIGH_JUMP' | 'CLIMB' | 'DUAL_WELD' | 'ESCAPE_ARTIST' | 'INTIMIDATE' | 'CONCENTRATION' | 'BLUFF' | 'SENSE_BLUFF' | 'GREEDY_INTENT' | 'SLOTH_COMPOSURE' | 'BLOOD_LUST' | 'ENVIOUS_OF_COMBAT' | 'GLUTTONOUS_DESIRE' | 'CATCHER' | 'COMMAND' | 'FORMATIONS' | 'ORDER' | 'VACHEL' | 'FELIX' | 'HERALDIC_LION' | 'SUMMON' | 'DISMISS' | 'LYRE' | 'SANDY' | 'OURUBORUS' | 'MISCHIEVOUS' | 'SCRIBBLES' | 'POISON_TRAP' | 'EXPLOSIVE_TRAP' | 'TIME_BOMB_TRAP' | 'CALTROPS_TRAP' | 'DISABLE_TRAP' | 'Focusable' | 'BOAST' | 'DISGUISE' | 'FOCUS' | 'GRAPPLE' | 'HIDE' | 'SCAN' | 'CHEER' | 'SUPPORT' | 'HOPE' | 'INSPIRE' | 'SCOUT' | 'MIMIC' | 'PICKPOCKET' | 'SEAL' | 'LULLABY' | 'WARD' | 'SACRIFICE' | 'PROTECT' | 'MOCK' | 'SEARCH' | 'STEAL' | 'PROTECTION' | 'RAGE'} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async skillControllerFind(id: 'BERSERK' | 'TOXIC_THRUST' | 'AERIAL_ASSUALT' | 'ONI' | 'TRUE_ONI' | 'APPRIASE' | 'COMBINE' | 'THROW' | 'PREPARE_FOOD' | 'GRAVITY' | 'SHOCK' | 'QUAKE' | 'LANDSLIDE' | 'BLIZZARD' | 'FIREBALL' | 'INFERNO' | 'TWISTER' | 'GUST' | 'GALE' | 'CYCLONE' | 'TSUNAMI' | 'AQUA' | 'HEAL' | 'REVIVE' | 'CURE' | 'BARRIER' | 'BOOM' | 'REFLECT' | 'FLARE' | 'METEOR' | 'TELEPATHY' | 'LIGHT' | 'DESOLATE' | 'DARKNESS' | 'STOP' | 'SLOW' | 'HASTE' | 'CHILL' | 'CHARM' | 'FROST' | 'ABSORB' | 'LEECH' | 'DRAIN' | 'GRAPPLING_HOOK' | 'PARRY' | 'SLASH' | 'STRIKE' | 'STAB' | 'CHOP' | 'CLEAVE' | 'WALK' | 'RUN' | 'SWIM' | 'BACK_FLIP' | 'DOUBLE_BACK_FLIP' | 'HIGH_JUMP' | 'CLIMB' | 'DUAL_WELD' | 'ESCAPE_ARTIST' | 'INTIMIDATE' | 'CONCENTRATION' | 'BLUFF' | 'SENSE_BLUFF' | 'GREEDY_INTENT' | 'SLOTH_COMPOSURE' | 'BLOOD_LUST' | 'ENVIOUS_OF_COMBAT' | 'GLUTTONOUS_DESIRE' | 'CATCHER' | 'COMMAND' | 'FORMATIONS' | 'ORDER' | 'VACHEL' | 'FELIX' | 'HERALDIC_LION' | 'SUMMON' | 'DISMISS' | 'LYRE' | 'SANDY' | 'OURUBORUS' | 'MISCHIEVOUS' | 'SCRIBBLES' | 'POISON_TRAP' | 'EXPLOSIVE_TRAP' | 'TIME_BOMB_TRAP' | 'CALTROPS_TRAP' | 'DISABLE_TRAP' | 'Focusable' | 'BOAST' | 'DISGUISE' | 'FOCUS' | 'GRAPPLE' | 'HIDE' | 'SCAN' | 'CHEER' | 'SUPPORT' | 'HOPE' | 'INSPIRE' | 'SCOUT' | 'MIMIC' | 'PICKPOCKET' | 'SEAL' | 'LULLABY' | 'WARD' | 'SACRIFICE' | 'PROTECT' | 'MOCK' | 'SEARCH' | 'STEAL' | 'PROTECTION' | 'RAGE', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.skillControllerFind(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async skillControllerList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.skillControllerList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {'MISCHIEVOUS_PIEBALD' | 'JANUS_PERSIAN' | 'LOOMEE_ANGORA' | 'VALLON_ONI' | 'OUERN_ONI' | 'MEEKU_ONI' | 'ARINOTH_DIYATH' | 'FAYE_IMAGO' | 'GAALI_RUNEWIN' | 'GUNTER_STONEWELL' | 'MALACE_TSIA' | 'PENNY_KIBBUTZ' | 'TRAEZ_UTHSHA' | 'VOID' | 'GENKI' | 'LAWZON_GREY' | 'MADHI_TSIA' | 'SUYRI' | 'WISP' | 'ASMIN' | 'DIAG' | 'MONARCH' | 'VICEROY' | 'SPIDER' | 'WARLING' | 'SEA_HORSE' | 'SENSITIVE_PLANT' | 'DEEP_THINKER'} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archetypeControllerFind(id: 'MISCHIEVOUS_PIEBALD' | 'JANUS_PERSIAN' | 'LOOMEE_ANGORA' | 'VALLON_ONI' | 'OUERN_ONI' | 'MEEKU_ONI' | 'ARINOTH_DIYATH' | 'FAYE_IMAGO' | 'GAALI_RUNEWIN' | 'GUNTER_STONEWELL' | 'MALACE_TSIA' | 'PENNY_KIBBUTZ' | 'TRAEZ_UTHSHA' | 'VOID' | 'GENKI' | 'LAWZON_GREY' | 'MADHI_TSIA' | 'SUYRI' | 'WISP' | 'ASMIN' | 'DIAG' | 'MONARCH' | 'VICEROY' | 'SPIDER' | 'WARLING' | 'SEA_HORSE' | 'SENSITIVE_PLANT' | 'DEEP_THINKER', options?: any): AxiosPromise<void> {
            return localVarFp.archetypeControllerFind(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archetypeControllerList(options?: any): AxiosPromise<void> {
            return localVarFp.archetypeControllerList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {'GOLD_BRACELETS' | 'RED_SCRAF' | 'COWHIDE_VEST' | 'FUNERAL_JAR' | 'SWORD_SHEATH' | 'MAGENETIC_GLOVES' | 'CATCHERS_MITT' | 'COMPASS' | 'GC' | 'TSHIRT_AND_JEANS' | 'OFFICERS_UNIFORM' | 'Category' | 'ASMINS_AXE' | 'GREAT_WAIL' | 'JUSTICE' | 'KEYSTONE' | 'ASSUALTER' | 'STRIKER' | 'ENERGY_BREAKER' | 'STONE_BREAKER' | 'THE_MAN_SLAYER' | 'HEROS_BLADE' | 'SWORD_OF_LAWZON' | 'TINY_TIMBER' | 'CADUCEUS' | 'ANTEDILUVIAN' | 'ETERNAL_FOLD' | 'GOLD_RUSH' | 'KINGS_BLADE' | 'RUSTY_RAPIER' | 'MYSTERIOUS_PENDANT' | 'PEACEKEEPER' | 'TROUBLE_MAKER' | 'STANDARD_ISSUE' | 'GREED' | 'LIBERTY' | 'MONARCH' | 'REGRET' | 'VICEROY' | 'VIOLATED'} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gearControllerFind(id: 'GOLD_BRACELETS' | 'RED_SCRAF' | 'COWHIDE_VEST' | 'FUNERAL_JAR' | 'SWORD_SHEATH' | 'MAGENETIC_GLOVES' | 'CATCHERS_MITT' | 'COMPASS' | 'GC' | 'TSHIRT_AND_JEANS' | 'OFFICERS_UNIFORM' | 'Category' | 'ASMINS_AXE' | 'GREAT_WAIL' | 'JUSTICE' | 'KEYSTONE' | 'ASSUALTER' | 'STRIKER' | 'ENERGY_BREAKER' | 'STONE_BREAKER' | 'THE_MAN_SLAYER' | 'HEROS_BLADE' | 'SWORD_OF_LAWZON' | 'TINY_TIMBER' | 'CADUCEUS' | 'ANTEDILUVIAN' | 'ETERNAL_FOLD' | 'GOLD_RUSH' | 'KINGS_BLADE' | 'RUSTY_RAPIER' | 'MYSTERIOUS_PENDANT' | 'PEACEKEEPER' | 'TROUBLE_MAKER' | 'STANDARD_ISSUE' | 'GREED' | 'LIBERTY' | 'MONARCH' | 'REGRET' | 'VICEROY' | 'VIOLATED', options?: any): AxiosPromise<void> {
            return localVarFp.gearControllerFind(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gearControllerList(options?: any): AxiosPromise<void> {
            return localVarFp.gearControllerList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {'BERSERK' | 'TOXIC_THRUST' | 'AERIAL_ASSUALT' | 'ONI' | 'TRUE_ONI' | 'APPRIASE' | 'COMBINE' | 'THROW' | 'PREPARE_FOOD' | 'GRAVITY' | 'SHOCK' | 'QUAKE' | 'LANDSLIDE' | 'BLIZZARD' | 'FIREBALL' | 'INFERNO' | 'TWISTER' | 'GUST' | 'GALE' | 'CYCLONE' | 'TSUNAMI' | 'AQUA' | 'HEAL' | 'REVIVE' | 'CURE' | 'BARRIER' | 'BOOM' | 'REFLECT' | 'FLARE' | 'METEOR' | 'TELEPATHY' | 'LIGHT' | 'DESOLATE' | 'DARKNESS' | 'STOP' | 'SLOW' | 'HASTE' | 'CHILL' | 'CHARM' | 'FROST' | 'ABSORB' | 'LEECH' | 'DRAIN' | 'GRAPPLING_HOOK' | 'PARRY' | 'SLASH' | 'STRIKE' | 'STAB' | 'CHOP' | 'CLEAVE' | 'WALK' | 'RUN' | 'SWIM' | 'BACK_FLIP' | 'DOUBLE_BACK_FLIP' | 'HIGH_JUMP' | 'CLIMB' | 'DUAL_WELD' | 'ESCAPE_ARTIST' | 'INTIMIDATE' | 'CONCENTRATION' | 'BLUFF' | 'SENSE_BLUFF' | 'GREEDY_INTENT' | 'SLOTH_COMPOSURE' | 'BLOOD_LUST' | 'ENVIOUS_OF_COMBAT' | 'GLUTTONOUS_DESIRE' | 'CATCHER' | 'COMMAND' | 'FORMATIONS' | 'ORDER' | 'VACHEL' | 'FELIX' | 'HERALDIC_LION' | 'SUMMON' | 'DISMISS' | 'LYRE' | 'SANDY' | 'OURUBORUS' | 'MISCHIEVOUS' | 'SCRIBBLES' | 'POISON_TRAP' | 'EXPLOSIVE_TRAP' | 'TIME_BOMB_TRAP' | 'CALTROPS_TRAP' | 'DISABLE_TRAP' | 'Focusable' | 'BOAST' | 'DISGUISE' | 'FOCUS' | 'GRAPPLE' | 'HIDE' | 'SCAN' | 'CHEER' | 'SUPPORT' | 'HOPE' | 'INSPIRE' | 'SCOUT' | 'MIMIC' | 'PICKPOCKET' | 'SEAL' | 'LULLABY' | 'WARD' | 'SACRIFICE' | 'PROTECT' | 'MOCK' | 'SEARCH' | 'STEAL' | 'PROTECTION' | 'RAGE'} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skillControllerFind(id: 'BERSERK' | 'TOXIC_THRUST' | 'AERIAL_ASSUALT' | 'ONI' | 'TRUE_ONI' | 'APPRIASE' | 'COMBINE' | 'THROW' | 'PREPARE_FOOD' | 'GRAVITY' | 'SHOCK' | 'QUAKE' | 'LANDSLIDE' | 'BLIZZARD' | 'FIREBALL' | 'INFERNO' | 'TWISTER' | 'GUST' | 'GALE' | 'CYCLONE' | 'TSUNAMI' | 'AQUA' | 'HEAL' | 'REVIVE' | 'CURE' | 'BARRIER' | 'BOOM' | 'REFLECT' | 'FLARE' | 'METEOR' | 'TELEPATHY' | 'LIGHT' | 'DESOLATE' | 'DARKNESS' | 'STOP' | 'SLOW' | 'HASTE' | 'CHILL' | 'CHARM' | 'FROST' | 'ABSORB' | 'LEECH' | 'DRAIN' | 'GRAPPLING_HOOK' | 'PARRY' | 'SLASH' | 'STRIKE' | 'STAB' | 'CHOP' | 'CLEAVE' | 'WALK' | 'RUN' | 'SWIM' | 'BACK_FLIP' | 'DOUBLE_BACK_FLIP' | 'HIGH_JUMP' | 'CLIMB' | 'DUAL_WELD' | 'ESCAPE_ARTIST' | 'INTIMIDATE' | 'CONCENTRATION' | 'BLUFF' | 'SENSE_BLUFF' | 'GREEDY_INTENT' | 'SLOTH_COMPOSURE' | 'BLOOD_LUST' | 'ENVIOUS_OF_COMBAT' | 'GLUTTONOUS_DESIRE' | 'CATCHER' | 'COMMAND' | 'FORMATIONS' | 'ORDER' | 'VACHEL' | 'FELIX' | 'HERALDIC_LION' | 'SUMMON' | 'DISMISS' | 'LYRE' | 'SANDY' | 'OURUBORUS' | 'MISCHIEVOUS' | 'SCRIBBLES' | 'POISON_TRAP' | 'EXPLOSIVE_TRAP' | 'TIME_BOMB_TRAP' | 'CALTROPS_TRAP' | 'DISABLE_TRAP' | 'Focusable' | 'BOAST' | 'DISGUISE' | 'FOCUS' | 'GRAPPLE' | 'HIDE' | 'SCAN' | 'CHEER' | 'SUPPORT' | 'HOPE' | 'INSPIRE' | 'SCOUT' | 'MIMIC' | 'PICKPOCKET' | 'SEAL' | 'LULLABY' | 'WARD' | 'SACRIFICE' | 'PROTECT' | 'MOCK' | 'SEARCH' | 'STEAL' | 'PROTECTION' | 'RAGE', options?: any): AxiosPromise<void> {
            return localVarFp.skillControllerFind(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skillControllerList(options?: any): AxiosPromise<void> {
            return localVarFp.skillControllerList(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * 
     * @param {'MISCHIEVOUS_PIEBALD' | 'JANUS_PERSIAN' | 'LOOMEE_ANGORA' | 'VALLON_ONI' | 'OUERN_ONI' | 'MEEKU_ONI' | 'ARINOTH_DIYATH' | 'FAYE_IMAGO' | 'GAALI_RUNEWIN' | 'GUNTER_STONEWELL' | 'MALACE_TSIA' | 'PENNY_KIBBUTZ' | 'TRAEZ_UTHSHA' | 'VOID' | 'GENKI' | 'LAWZON_GREY' | 'MADHI_TSIA' | 'SUYRI' | 'WISP' | 'ASMIN' | 'DIAG' | 'MONARCH' | 'VICEROY' | 'SPIDER' | 'WARLING' | 'SEA_HORSE' | 'SENSITIVE_PLANT' | 'DEEP_THINKER'} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    archetypeControllerFind(id: 'MISCHIEVOUS_PIEBALD' | 'JANUS_PERSIAN' | 'LOOMEE_ANGORA' | 'VALLON_ONI' | 'OUERN_ONI' | 'MEEKU_ONI' | 'ARINOTH_DIYATH' | 'FAYE_IMAGO' | 'GAALI_RUNEWIN' | 'GUNTER_STONEWELL' | 'MALACE_TSIA' | 'PENNY_KIBBUTZ' | 'TRAEZ_UTHSHA' | 'VOID' | 'GENKI' | 'LAWZON_GREY' | 'MADHI_TSIA' | 'SUYRI' | 'WISP' | 'ASMIN' | 'DIAG' | 'MONARCH' | 'VICEROY' | 'SPIDER' | 'WARLING' | 'SEA_HORSE' | 'SENSITIVE_PLANT' | 'DEEP_THINKER', options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    archetypeControllerList(options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {'GOLD_BRACELETS' | 'RED_SCRAF' | 'COWHIDE_VEST' | 'FUNERAL_JAR' | 'SWORD_SHEATH' | 'MAGENETIC_GLOVES' | 'CATCHERS_MITT' | 'COMPASS' | 'GC' | 'TSHIRT_AND_JEANS' | 'OFFICERS_UNIFORM' | 'Category' | 'ASMINS_AXE' | 'GREAT_WAIL' | 'JUSTICE' | 'KEYSTONE' | 'ASSUALTER' | 'STRIKER' | 'ENERGY_BREAKER' | 'STONE_BREAKER' | 'THE_MAN_SLAYER' | 'HEROS_BLADE' | 'SWORD_OF_LAWZON' | 'TINY_TIMBER' | 'CADUCEUS' | 'ANTEDILUVIAN' | 'ETERNAL_FOLD' | 'GOLD_RUSH' | 'KINGS_BLADE' | 'RUSTY_RAPIER' | 'MYSTERIOUS_PENDANT' | 'PEACEKEEPER' | 'TROUBLE_MAKER' | 'STANDARD_ISSUE' | 'GREED' | 'LIBERTY' | 'MONARCH' | 'REGRET' | 'VICEROY' | 'VIOLATED'} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    gearControllerFind(id: 'GOLD_BRACELETS' | 'RED_SCRAF' | 'COWHIDE_VEST' | 'FUNERAL_JAR' | 'SWORD_SHEATH' | 'MAGENETIC_GLOVES' | 'CATCHERS_MITT' | 'COMPASS' | 'GC' | 'TSHIRT_AND_JEANS' | 'OFFICERS_UNIFORM' | 'Category' | 'ASMINS_AXE' | 'GREAT_WAIL' | 'JUSTICE' | 'KEYSTONE' | 'ASSUALTER' | 'STRIKER' | 'ENERGY_BREAKER' | 'STONE_BREAKER' | 'THE_MAN_SLAYER' | 'HEROS_BLADE' | 'SWORD_OF_LAWZON' | 'TINY_TIMBER' | 'CADUCEUS' | 'ANTEDILUVIAN' | 'ETERNAL_FOLD' | 'GOLD_RUSH' | 'KINGS_BLADE' | 'RUSTY_RAPIER' | 'MYSTERIOUS_PENDANT' | 'PEACEKEEPER' | 'TROUBLE_MAKER' | 'STANDARD_ISSUE' | 'GREED' | 'LIBERTY' | 'MONARCH' | 'REGRET' | 'VICEROY' | 'VIOLATED', options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    gearControllerList(options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {'BERSERK' | 'TOXIC_THRUST' | 'AERIAL_ASSUALT' | 'ONI' | 'TRUE_ONI' | 'APPRIASE' | 'COMBINE' | 'THROW' | 'PREPARE_FOOD' | 'GRAVITY' | 'SHOCK' | 'QUAKE' | 'LANDSLIDE' | 'BLIZZARD' | 'FIREBALL' | 'INFERNO' | 'TWISTER' | 'GUST' | 'GALE' | 'CYCLONE' | 'TSUNAMI' | 'AQUA' | 'HEAL' | 'REVIVE' | 'CURE' | 'BARRIER' | 'BOOM' | 'REFLECT' | 'FLARE' | 'METEOR' | 'TELEPATHY' | 'LIGHT' | 'DESOLATE' | 'DARKNESS' | 'STOP' | 'SLOW' | 'HASTE' | 'CHILL' | 'CHARM' | 'FROST' | 'ABSORB' | 'LEECH' | 'DRAIN' | 'GRAPPLING_HOOK' | 'PARRY' | 'SLASH' | 'STRIKE' | 'STAB' | 'CHOP' | 'CLEAVE' | 'WALK' | 'RUN' | 'SWIM' | 'BACK_FLIP' | 'DOUBLE_BACK_FLIP' | 'HIGH_JUMP' | 'CLIMB' | 'DUAL_WELD' | 'ESCAPE_ARTIST' | 'INTIMIDATE' | 'CONCENTRATION' | 'BLUFF' | 'SENSE_BLUFF' | 'GREEDY_INTENT' | 'SLOTH_COMPOSURE' | 'BLOOD_LUST' | 'ENVIOUS_OF_COMBAT' | 'GLUTTONOUS_DESIRE' | 'CATCHER' | 'COMMAND' | 'FORMATIONS' | 'ORDER' | 'VACHEL' | 'FELIX' | 'HERALDIC_LION' | 'SUMMON' | 'DISMISS' | 'LYRE' | 'SANDY' | 'OURUBORUS' | 'MISCHIEVOUS' | 'SCRIBBLES' | 'POISON_TRAP' | 'EXPLOSIVE_TRAP' | 'TIME_BOMB_TRAP' | 'CALTROPS_TRAP' | 'DISABLE_TRAP' | 'Focusable' | 'BOAST' | 'DISGUISE' | 'FOCUS' | 'GRAPPLE' | 'HIDE' | 'SCAN' | 'CHEER' | 'SUPPORT' | 'HOPE' | 'INSPIRE' | 'SCOUT' | 'MIMIC' | 'PICKPOCKET' | 'SEAL' | 'LULLABY' | 'WARD' | 'SACRIFICE' | 'PROTECT' | 'MOCK' | 'SEARCH' | 'STEAL' | 'PROTECTION' | 'RAGE'} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    skillControllerFind(id: 'BERSERK' | 'TOXIC_THRUST' | 'AERIAL_ASSUALT' | 'ONI' | 'TRUE_ONI' | 'APPRIASE' | 'COMBINE' | 'THROW' | 'PREPARE_FOOD' | 'GRAVITY' | 'SHOCK' | 'QUAKE' | 'LANDSLIDE' | 'BLIZZARD' | 'FIREBALL' | 'INFERNO' | 'TWISTER' | 'GUST' | 'GALE' | 'CYCLONE' | 'TSUNAMI' | 'AQUA' | 'HEAL' | 'REVIVE' | 'CURE' | 'BARRIER' | 'BOOM' | 'REFLECT' | 'FLARE' | 'METEOR' | 'TELEPATHY' | 'LIGHT' | 'DESOLATE' | 'DARKNESS' | 'STOP' | 'SLOW' | 'HASTE' | 'CHILL' | 'CHARM' | 'FROST' | 'ABSORB' | 'LEECH' | 'DRAIN' | 'GRAPPLING_HOOK' | 'PARRY' | 'SLASH' | 'STRIKE' | 'STAB' | 'CHOP' | 'CLEAVE' | 'WALK' | 'RUN' | 'SWIM' | 'BACK_FLIP' | 'DOUBLE_BACK_FLIP' | 'HIGH_JUMP' | 'CLIMB' | 'DUAL_WELD' | 'ESCAPE_ARTIST' | 'INTIMIDATE' | 'CONCENTRATION' | 'BLUFF' | 'SENSE_BLUFF' | 'GREEDY_INTENT' | 'SLOTH_COMPOSURE' | 'BLOOD_LUST' | 'ENVIOUS_OF_COMBAT' | 'GLUTTONOUS_DESIRE' | 'CATCHER' | 'COMMAND' | 'FORMATIONS' | 'ORDER' | 'VACHEL' | 'FELIX' | 'HERALDIC_LION' | 'SUMMON' | 'DISMISS' | 'LYRE' | 'SANDY' | 'OURUBORUS' | 'MISCHIEVOUS' | 'SCRIBBLES' | 'POISON_TRAP' | 'EXPLOSIVE_TRAP' | 'TIME_BOMB_TRAP' | 'CALTROPS_TRAP' | 'DISABLE_TRAP' | 'Focusable' | 'BOAST' | 'DISGUISE' | 'FOCUS' | 'GRAPPLE' | 'HIDE' | 'SCAN' | 'CHEER' | 'SUPPORT' | 'HOPE' | 'INSPIRE' | 'SCOUT' | 'MIMIC' | 'PICKPOCKET' | 'SEAL' | 'LULLABY' | 'WARD' | 'SACRIFICE' | 'PROTECT' | 'MOCK' | 'SEARCH' | 'STEAL' | 'PROTECTION' | 'RAGE', options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    skillControllerList(options?: any): AxiosPromise<void>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * 
     * @param {'MISCHIEVOUS_PIEBALD' | 'JANUS_PERSIAN' | 'LOOMEE_ANGORA' | 'VALLON_ONI' | 'OUERN_ONI' | 'MEEKU_ONI' | 'ARINOTH_DIYATH' | 'FAYE_IMAGO' | 'GAALI_RUNEWIN' | 'GUNTER_STONEWELL' | 'MALACE_TSIA' | 'PENNY_KIBBUTZ' | 'TRAEZ_UTHSHA' | 'VOID' | 'GENKI' | 'LAWZON_GREY' | 'MADHI_TSIA' | 'SUYRI' | 'WISP' | 'ASMIN' | 'DIAG' | 'MONARCH' | 'VICEROY' | 'SPIDER' | 'WARLING' | 'SEA_HORSE' | 'SENSITIVE_PLANT' | 'DEEP_THINKER'} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public archetypeControllerFind(id: 'MISCHIEVOUS_PIEBALD' | 'JANUS_PERSIAN' | 'LOOMEE_ANGORA' | 'VALLON_ONI' | 'OUERN_ONI' | 'MEEKU_ONI' | 'ARINOTH_DIYATH' | 'FAYE_IMAGO' | 'GAALI_RUNEWIN' | 'GUNTER_STONEWELL' | 'MALACE_TSIA' | 'PENNY_KIBBUTZ' | 'TRAEZ_UTHSHA' | 'VOID' | 'GENKI' | 'LAWZON_GREY' | 'MADHI_TSIA' | 'SUYRI' | 'WISP' | 'ASMIN' | 'DIAG' | 'MONARCH' | 'VICEROY' | 'SPIDER' | 'WARLING' | 'SEA_HORSE' | 'SENSITIVE_PLANT' | 'DEEP_THINKER', options?: any) {
        return DefaultApiFp(this.configuration).archetypeControllerFind(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public archetypeControllerList(options?: any) {
        return DefaultApiFp(this.configuration).archetypeControllerList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {'GOLD_BRACELETS' | 'RED_SCRAF' | 'COWHIDE_VEST' | 'FUNERAL_JAR' | 'SWORD_SHEATH' | 'MAGENETIC_GLOVES' | 'CATCHERS_MITT' | 'COMPASS' | 'GC' | 'TSHIRT_AND_JEANS' | 'OFFICERS_UNIFORM' | 'Category' | 'ASMINS_AXE' | 'GREAT_WAIL' | 'JUSTICE' | 'KEYSTONE' | 'ASSUALTER' | 'STRIKER' | 'ENERGY_BREAKER' | 'STONE_BREAKER' | 'THE_MAN_SLAYER' | 'HEROS_BLADE' | 'SWORD_OF_LAWZON' | 'TINY_TIMBER' | 'CADUCEUS' | 'ANTEDILUVIAN' | 'ETERNAL_FOLD' | 'GOLD_RUSH' | 'KINGS_BLADE' | 'RUSTY_RAPIER' | 'MYSTERIOUS_PENDANT' | 'PEACEKEEPER' | 'TROUBLE_MAKER' | 'STANDARD_ISSUE' | 'GREED' | 'LIBERTY' | 'MONARCH' | 'REGRET' | 'VICEROY' | 'VIOLATED'} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public gearControllerFind(id: 'GOLD_BRACELETS' | 'RED_SCRAF' | 'COWHIDE_VEST' | 'FUNERAL_JAR' | 'SWORD_SHEATH' | 'MAGENETIC_GLOVES' | 'CATCHERS_MITT' | 'COMPASS' | 'GC' | 'TSHIRT_AND_JEANS' | 'OFFICERS_UNIFORM' | 'Category' | 'ASMINS_AXE' | 'GREAT_WAIL' | 'JUSTICE' | 'KEYSTONE' | 'ASSUALTER' | 'STRIKER' | 'ENERGY_BREAKER' | 'STONE_BREAKER' | 'THE_MAN_SLAYER' | 'HEROS_BLADE' | 'SWORD_OF_LAWZON' | 'TINY_TIMBER' | 'CADUCEUS' | 'ANTEDILUVIAN' | 'ETERNAL_FOLD' | 'GOLD_RUSH' | 'KINGS_BLADE' | 'RUSTY_RAPIER' | 'MYSTERIOUS_PENDANT' | 'PEACEKEEPER' | 'TROUBLE_MAKER' | 'STANDARD_ISSUE' | 'GREED' | 'LIBERTY' | 'MONARCH' | 'REGRET' | 'VICEROY' | 'VIOLATED', options?: any) {
        return DefaultApiFp(this.configuration).gearControllerFind(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public gearControllerList(options?: any) {
        return DefaultApiFp(this.configuration).gearControllerList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {'BERSERK' | 'TOXIC_THRUST' | 'AERIAL_ASSUALT' | 'ONI' | 'TRUE_ONI' | 'APPRIASE' | 'COMBINE' | 'THROW' | 'PREPARE_FOOD' | 'GRAVITY' | 'SHOCK' | 'QUAKE' | 'LANDSLIDE' | 'BLIZZARD' | 'FIREBALL' | 'INFERNO' | 'TWISTER' | 'GUST' | 'GALE' | 'CYCLONE' | 'TSUNAMI' | 'AQUA' | 'HEAL' | 'REVIVE' | 'CURE' | 'BARRIER' | 'BOOM' | 'REFLECT' | 'FLARE' | 'METEOR' | 'TELEPATHY' | 'LIGHT' | 'DESOLATE' | 'DARKNESS' | 'STOP' | 'SLOW' | 'HASTE' | 'CHILL' | 'CHARM' | 'FROST' | 'ABSORB' | 'LEECH' | 'DRAIN' | 'GRAPPLING_HOOK' | 'PARRY' | 'SLASH' | 'STRIKE' | 'STAB' | 'CHOP' | 'CLEAVE' | 'WALK' | 'RUN' | 'SWIM' | 'BACK_FLIP' | 'DOUBLE_BACK_FLIP' | 'HIGH_JUMP' | 'CLIMB' | 'DUAL_WELD' | 'ESCAPE_ARTIST' | 'INTIMIDATE' | 'CONCENTRATION' | 'BLUFF' | 'SENSE_BLUFF' | 'GREEDY_INTENT' | 'SLOTH_COMPOSURE' | 'BLOOD_LUST' | 'ENVIOUS_OF_COMBAT' | 'GLUTTONOUS_DESIRE' | 'CATCHER' | 'COMMAND' | 'FORMATIONS' | 'ORDER' | 'VACHEL' | 'FELIX' | 'HERALDIC_LION' | 'SUMMON' | 'DISMISS' | 'LYRE' | 'SANDY' | 'OURUBORUS' | 'MISCHIEVOUS' | 'SCRIBBLES' | 'POISON_TRAP' | 'EXPLOSIVE_TRAP' | 'TIME_BOMB_TRAP' | 'CALTROPS_TRAP' | 'DISABLE_TRAP' | 'Focusable' | 'BOAST' | 'DISGUISE' | 'FOCUS' | 'GRAPPLE' | 'HIDE' | 'SCAN' | 'CHEER' | 'SUPPORT' | 'HOPE' | 'INSPIRE' | 'SCOUT' | 'MIMIC' | 'PICKPOCKET' | 'SEAL' | 'LULLABY' | 'WARD' | 'SACRIFICE' | 'PROTECT' | 'MOCK' | 'SEARCH' | 'STEAL' | 'PROTECTION' | 'RAGE'} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public skillControllerFind(id: 'BERSERK' | 'TOXIC_THRUST' | 'AERIAL_ASSUALT' | 'ONI' | 'TRUE_ONI' | 'APPRIASE' | 'COMBINE' | 'THROW' | 'PREPARE_FOOD' | 'GRAVITY' | 'SHOCK' | 'QUAKE' | 'LANDSLIDE' | 'BLIZZARD' | 'FIREBALL' | 'INFERNO' | 'TWISTER' | 'GUST' | 'GALE' | 'CYCLONE' | 'TSUNAMI' | 'AQUA' | 'HEAL' | 'REVIVE' | 'CURE' | 'BARRIER' | 'BOOM' | 'REFLECT' | 'FLARE' | 'METEOR' | 'TELEPATHY' | 'LIGHT' | 'DESOLATE' | 'DARKNESS' | 'STOP' | 'SLOW' | 'HASTE' | 'CHILL' | 'CHARM' | 'FROST' | 'ABSORB' | 'LEECH' | 'DRAIN' | 'GRAPPLING_HOOK' | 'PARRY' | 'SLASH' | 'STRIKE' | 'STAB' | 'CHOP' | 'CLEAVE' | 'WALK' | 'RUN' | 'SWIM' | 'BACK_FLIP' | 'DOUBLE_BACK_FLIP' | 'HIGH_JUMP' | 'CLIMB' | 'DUAL_WELD' | 'ESCAPE_ARTIST' | 'INTIMIDATE' | 'CONCENTRATION' | 'BLUFF' | 'SENSE_BLUFF' | 'GREEDY_INTENT' | 'SLOTH_COMPOSURE' | 'BLOOD_LUST' | 'ENVIOUS_OF_COMBAT' | 'GLUTTONOUS_DESIRE' | 'CATCHER' | 'COMMAND' | 'FORMATIONS' | 'ORDER' | 'VACHEL' | 'FELIX' | 'HERALDIC_LION' | 'SUMMON' | 'DISMISS' | 'LYRE' | 'SANDY' | 'OURUBORUS' | 'MISCHIEVOUS' | 'SCRIBBLES' | 'POISON_TRAP' | 'EXPLOSIVE_TRAP' | 'TIME_BOMB_TRAP' | 'CALTROPS_TRAP' | 'DISABLE_TRAP' | 'Focusable' | 'BOAST' | 'DISGUISE' | 'FOCUS' | 'GRAPPLE' | 'HIDE' | 'SCAN' | 'CHEER' | 'SUPPORT' | 'HOPE' | 'INSPIRE' | 'SCOUT' | 'MIMIC' | 'PICKPOCKET' | 'SEAL' | 'LULLABY' | 'WARD' | 'SACRIFICE' | 'PROTECT' | 'MOCK' | 'SEARCH' | 'STEAL' | 'PROTECTION' | 'RAGE', options?: any) {
        return DefaultApiFp(this.configuration).skillControllerFind(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public skillControllerList(options?: any) {
        return DefaultApiFp(this.configuration).skillControllerList(options).then((request) => request(this.axios, this.basePath));
    }
}


