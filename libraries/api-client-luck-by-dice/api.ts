/* tslint:disable */
/* eslint-disable */
/**
 * @cats-cradle/luck-by-dice
 * An API Simulating dice rolls that can be effected by luck from dice notation
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from './base';

/**
 *
 * @export
 * @interface QueryRollDto
 */
export interface QueryRollDto {
  /**
   * Dice notation
   * @type {string}
   * @memberof QueryRollDto
   */
  notation: string;
  /**
   * Characters luck
   * @type {number}
   * @memberof QueryRollDto
   */
  luck: number;
  /**
   * Amount of times to roll
   * @type {number}
   * @memberof QueryRollDto
   */
  iterations: number;
}

export const diceRollControllerCreateKey = (
  queryRollDto: QueryRollDto,
  options: any = {},
) => {
  const localVarPath = `/dice-roll`;
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
  const canSearch = true && queryRollDto !== undefined && queryRollDto !== null;
  return canSearch ? localVarUrlObj.toString() : null;
};

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {QueryRollDto} queryRollDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    diceRollControllerCreate: async (
      queryRollDto: QueryRollDto,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'queryRollDto' is not null or undefined
      assertParamExists(
        'diceRollControllerCreate',
        'queryRollDto',
        queryRollDto,
      );
      const localVarPath = `/dice-roll`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryRollDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {QueryRollDto} queryRollDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async diceRollControllerCreate(
      queryRollDto: QueryRollDto,
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.diceRollControllerCreate(
          queryRollDto,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     *
     * @param {QueryRollDto} queryRollDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    diceRollControllerCreate(
      queryRollDto: QueryRollDto,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .diceRollControllerCreate(queryRollDto, options)
        .then(request => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
  /**
   *
   * @param {QueryRollDto} queryRollDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  diceRollControllerCreate(
    queryRollDto: QueryRollDto,
    options?: any,
  ): AxiosPromise<void>;
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
  /**
   *
   * @param {QueryRollDto} queryRollDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public diceRollControllerCreate(queryRollDto: QueryRollDto, options?: any) {
    return DefaultApiFp(this.configuration)
      .diceRollControllerCreate(queryRollDto, options)
      .then(request => request(this.axios, this.basePath));
  }
}
